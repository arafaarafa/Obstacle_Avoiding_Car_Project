
Obstical_avoiding_car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000027d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000082  00800060  000027d0  00002864  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000082  008000e2  008000e2  000028e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000028e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000440  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000564f  00000000  00000000  00002d94  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001485  00000000  00000000  000083e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000286d  00000000  00000000  00009868  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ce8  00000000  00000000  0000c0d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001a14  00000000  00000000  0000cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003b23  00000000  00000000  0000e7d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000420  00000000  00000000  000122f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 ee 0e 	jmp	0x1ddc	; 0x1ddc <__vector_1>
       8:	0c 94 15 0f 	jmp	0x1e2a	; 0x1e2a <__vector_2>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <__vector_4>
      14:	0c 94 23 11 	jmp	0x2246	; 0x2246 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7d 10 	jmp	0x20fa	; 0x20fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 56 10 	jmp	0x20ac	; 0x20ac <__vector_9>
      28:	0c 94 c9 0f 	jmp	0x1f92	; 0x1f92 <__vector_10>
      2c:	0c 94 a2 0f 	jmp	0x1f44	; 0x1f44 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3e       	cpi	r26, 0xE2	; 226
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ee       	ldi	r26, 0xE2	; 226
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 36       	cpi	r26, 0x64	; 100
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 7c 0d 	call	0x1af8	; 0x1af8 <main>
      8a:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BUTTON_vidChangeState>:
 * This function toggles the motor state between start and stop when the button is pressed.
 */

void BUTTON_vidChangeState(void)
{
	if(en_motorSel == EN_MOTOR_STOP){	
      92:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
      96:	81 30       	cpi	r24, 0x01	; 1
      98:	19 f4       	brne	.+6      	; 0xa0 <BUTTON_vidChangeState+0xe>
		en_motorSel = EN_MOTOR_START;
      9a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <en_motorSel>
      9e:	08 95       	ret
	}else{
		en_motorSel = EN_MOTOR_STOP;
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <en_motorSel>
      a6:	08 95       	ret

000000a8 <intToString>:
 */
void intToString(uint8_t copy_u8_num, uint8_t *ptr_string){
	uint8_t u8_digit_counter = U8_ZERO_VALUE;
	
	// Calculate the number of digits in the number
	if (copy_u8_num == U8_ZERO_VALUE) {
      a8:	88 23       	and	r24, r24
      aa:	71 f0       	breq	.+28     	; 0xc8 <intToString+0x20>
      ac:	98 2f       	mov	r25, r24
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	08 c0       	rjmp	.+16     	; 0xc2 <intToString+0x1a>
		u8_digit_counter = U8_ONE_VALUE;
	} else {
		uint8_t temp = copy_u8_num;  // Store a temporary copy of the number
		while (temp != U8_ZERO_VALUE) {
			temp /= APP_SELECT_TENS_DIGIT;
      b2:	3d ec       	ldi	r19, 0xCD	; 205
      b4:	93 9f       	mul	r25, r19
      b6:	91 2d       	mov	r25, r1
      b8:	11 24       	eor	r1, r1
      ba:	96 95       	lsr	r25
      bc:	96 95       	lsr	r25
      be:	96 95       	lsr	r25
			u8_digit_counter++;
      c0:	2f 5f       	subi	r18, 0xFF	; 255
	// Calculate the number of digits in the number
	if (copy_u8_num == U8_ZERO_VALUE) {
		u8_digit_counter = U8_ONE_VALUE;
	} else {
		uint8_t temp = copy_u8_num;  // Store a temporary copy of the number
		while (temp != U8_ZERO_VALUE) {
      c2:	91 11       	cpse	r25, r1
      c4:	f6 cf       	rjmp	.-20     	; 0xb2 <intToString+0xa>
      c6:	01 c0       	rjmp	.+2      	; 0xca <intToString+0x22>
void intToString(uint8_t copy_u8_num, uint8_t *ptr_string){
	uint8_t u8_digit_counter = U8_ZERO_VALUE;
	
	// Calculate the number of digits in the number
	if (copy_u8_num == U8_ZERO_VALUE) {
		u8_digit_counter = U8_ONE_VALUE;
      c8:	21 e0       	ldi	r18, 0x01	; 1
		}
	}
	u8_digit_counter++;

	uint8_t u8_string_counter = u8_digit_counter - U8_ONE_VALUE;  // Start from the end of the buffer
	ptr_string[u8_string_counter] = APP_NULL_TERMINATION_STRING;  // Null-terminate the string
      ca:	fb 01       	movw	r30, r22
      cc:	e2 0f       	add	r30, r18
      ce:	f1 1d       	adc	r31, r1
      d0:	10 82       	st	Z, r1

	if (copy_u8_num == U8_ZERO_VALUE) {
      d2:	81 11       	cpse	r24, r1
      d4:	1c c0       	rjmp	.+56     	; 0x10e <intToString+0x66>
		ptr_string[--u8_string_counter] = APP_0_CHAR;  // Handle the special case of zero
      d6:	21 50       	subi	r18, 0x01	; 1
      d8:	fb 01       	movw	r30, r22
      da:	e2 0f       	add	r30, r18
      dc:	f1 1d       	adc	r31, r1
      de:	80 e3       	ldi	r24, 0x30	; 48
      e0:	80 83       	st	Z, r24
      e2:	08 95       	ret
	} else {
		while (copy_u8_num > 0 && u8_string_counter > U8_ZERO_VALUE) {
			ptr_string[--u8_string_counter] = APP_0_CHAR + (copy_u8_num % APP_SELECT_TENS_DIGIT); // Convert the digit to character
      e4:	21 50       	subi	r18, 0x01	; 1
      e6:	fb 01       	movw	r30, r22
      e8:	e2 0f       	add	r30, r18
      ea:	f1 1d       	adc	r31, r1
      ec:	9d ec       	ldi	r25, 0xCD	; 205
      ee:	89 9f       	mul	r24, r25
      f0:	91 2d       	mov	r25, r1
      f2:	11 24       	eor	r1, r1
      f4:	96 95       	lsr	r25
      f6:	96 95       	lsr	r25
      f8:	96 95       	lsr	r25
      fa:	49 2f       	mov	r20, r25
      fc:	44 0f       	add	r20, r20
      fe:	34 2f       	mov	r19, r20
     100:	33 0f       	add	r19, r19
     102:	33 0f       	add	r19, r19
     104:	34 0f       	add	r19, r20
     106:	83 1b       	sub	r24, r19
     108:	80 5d       	subi	r24, 0xD0	; 208
     10a:	80 83       	st	Z, r24
			copy_u8_num /= APP_SELECT_TENS_DIGIT;
     10c:	89 2f       	mov	r24, r25
	ptr_string[u8_string_counter] = APP_NULL_TERMINATION_STRING;  // Null-terminate the string

	if (copy_u8_num == U8_ZERO_VALUE) {
		ptr_string[--u8_string_counter] = APP_0_CHAR;  // Handle the special case of zero
	} else {
		while (copy_u8_num > 0 && u8_string_counter > U8_ZERO_VALUE) {
     10e:	88 23       	and	r24, r24
     110:	11 f0       	breq	.+4      	; 0x116 <intToString+0x6e>
     112:	21 11       	cpse	r18, r1
     114:	e7 cf       	rjmp	.-50     	; 0xe4 <intToString+0x3c>
     116:	08 95       	ret

00000118 <APP_updateDirection>:
 * The user can switch between left and right directions. The function displays the selected direction
 * on an LCD screen and waits for a specific time before proceeding.
 */
void APP_updateDirection(void)
{
	HULTRASONIC_vidInterruptDisable();
     118:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <HULTRASONIC_vidInterruptDisable>

	LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     11c:	40 e0       	ldi	r20, 0x00	; 0
     11e:	61 e0       	ldi	r22, 0x01	; 1
     120:	8d ef       	ldi	r24, 0xFD	; 253
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
	LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Right");
     128:	62 e6       	ldi	r22, 0x62	; 98
     12a:	70 e0       	ldi	r23, 0x00	; 0
     12c:	8d ef       	ldi	r24, 0xFD	; 253
     12e:	90 e0       	ldi	r25, 0x00	; 0
     130:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
	while(timing_time_out(APP_WAIT_TO_SET_DIR_TIME) == TIMING_NOT_TIME_OUT)
     134:	2c c0       	rjmp	.+88     	; 0x18e <APP_updateDirection+0x76>
	{
		BTN_get_state(&gs_btn_dir_state, &gs_enu_btn_dir_state);
     136:	62 ee       	ldi	r22, 0xE2	; 226
     138:	70 e0       	ldi	r23, 0x00	; 0
     13a:	83 ee       	ldi	r24, 0xE3	; 227
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	0e 94 3c 04 	call	0x878	; 0x878 <BTN_get_state>
		if(gs_enu_btn_dir_state == BTN_PUSHED){
     142:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__data_end>
     146:	81 11       	cpse	r24, r1
     148:	22 c0       	rjmp	.+68     	; 0x18e <APP_updateDirection+0x76>
			if(u8_g_dirStateCounter == MOTOR_TURN_LEFT){
     14a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_g_dirStateCounter>
     14e:	81 30       	cpi	r24, 0x01	; 1
     150:	79 f4       	brne	.+30     	; 0x170 <APP_updateDirection+0x58>
				u8_g_dirStateCounter = MOTOR_TURN_RIGHT;
     152:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <u8_g_dirStateCounter>
				LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	61 e0       	ldi	r22, 0x01	; 1
     15a:	8d ef       	ldi	r24, 0xFD	; 253
     15c:	90 e0       	ldi	r25, 0x00	; 0
     15e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Right");
     162:	62 e6       	ldi	r22, 0x62	; 98
     164:	70 e0       	ldi	r23, 0x00	; 0
     166:	8d ef       	ldi	r24, 0xFD	; 253
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
     16e:	0f c0       	rjmp	.+30     	; 0x18e <APP_updateDirection+0x76>
			}else{
				u8_g_dirStateCounter = MOTOR_TURN_LEFT;
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <u8_g_dirStateCounter>
				LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     176:	40 e0       	ldi	r20, 0x00	; 0
     178:	61 e0       	ldi	r22, 0x01	; 1
     17a:	8d ef       	ldi	r24, 0xFD	; 253
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Left ");
     182:	68 e6       	ldi	r22, 0x68	; 104
     184:	70 e0       	ldi	r23, 0x00	; 0
     186:	8d ef       	ldi	r24, 0xFD	; 253
     188:	90 e0       	ldi	r25, 0x00	; 0
     18a:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
{
	HULTRASONIC_vidInterruptDisable();

	LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
	LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Right");
	while(timing_time_out(APP_WAIT_TO_SET_DIR_TIME) == TIMING_NOT_TIME_OUT)
     18e:	85 e0       	ldi	r24, 0x05	; 5
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <timing_time_out>
     196:	81 30       	cpi	r24, 0x01	; 1
     198:	71 f2       	breq	.-100    	; 0x136 <APP_updateDirection+0x1e>
		}
		else {
			/* do nothing  */
		}
	}
	LCD_clear(&gs_str_lcd_config);
     19a:	8d ef       	ldi	r24, 0xFD	; 253
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_clear>
	HULTRASONIC_vidInterruptEnable();
     1a2:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HULTRASONIC_vidInterruptEnable>
	LCD_setCursor(&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     1a6:	40 e0       	ldi	r20, 0x00	; 0
     1a8:	60 e0       	ldi	r22, 0x00	; 0
     1aa:	8d ef       	ldi	r24, 0xFD	; 253
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
	LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Motor starts in");
     1b2:	6e e6       	ldi	r22, 0x6E	; 110
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	8d ef       	ldi	r24, 0xFD	; 253
     1b8:	90 e0       	ldi	r25, 0x00	; 0
     1ba:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
	LCD_setCursor(&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     1be:	40 e0       	ldi	r20, 0x00	; 0
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	8d ef       	ldi	r24, 0xFD	; 253
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
	LCD_writeString (&gs_str_lcd_config, (uint8_t*)"2 Sec.");
     1ca:	6e e7       	ldi	r22, 0x7E	; 126
     1cc:	70 e0       	ldi	r23, 0x00	; 0
     1ce:	8d ef       	ldi	r24, 0xFD	; 253
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
	delay_s(2);
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 34 0c 	call	0x1868	; 0x1868 <delay_s>
	LCD_clear (&gs_str_lcd_config);
     1de:	8d ef       	ldi	r24, 0xFD	; 253
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_clear>
     1e6:	08 95       	ret

000001e8 <APP_make_decision>:
 * pointer to an en_Dist_states_t variable.
 *
 * @param[in,out] ptr_f_distination Pointer to the variable storing the measured distance.
 * @param[in,out] ptr_enu_decision Pointer to the variable where the decision will be stored.
 */
void APP_make_decision(float64_t *ptr_f_distination, en_Dist_states_t *ptr_enu_decision){
     1e8:	cf 92       	push	r12
     1ea:	df 92       	push	r13
     1ec:	ef 92       	push	r14
     1ee:	ff 92       	push	r15
     1f0:	0f 93       	push	r16
     1f2:	1f 93       	push	r17
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	ec 01       	movw	r28, r24
     1fa:	8b 01       	movw	r16, r22
	double f_distination = HULTRASONIC_u8Read();  // Read distance from ultrasonic sensor
     1fc:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <HULTRASONIC_u8Read>
     200:	6b 01       	movw	r12, r22
     202:	7c 01       	movw	r14, r24
	if(f_distination > APP_MAX_MEASURED_DIST) {
     204:	20 e0       	ldi	r18, 0x00	; 0
     206:	30 e0       	ldi	r19, 0x00	; 0
     208:	46 ec       	ldi	r20, 0xC6	; 198
     20a:	52 e4       	ldi	r21, 0x42	; 66
     20c:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
     210:	18 16       	cp	r1, r24
     212:	44 f4       	brge	.+16     	; 0x224 <APP_make_decision+0x3c>
		f_distination = APP_MAX_MEASURED_DIST;  // Limit the distance to 99.0 cm
     214:	0f 2e       	mov	r0, r31
     216:	c1 2c       	mov	r12, r1
     218:	d1 2c       	mov	r13, r1
     21a:	f6 ec       	ldi	r31, 0xC6	; 198
     21c:	ef 2e       	mov	r14, r31
     21e:	f2 e4       	ldi	r31, 0x42	; 66
     220:	ff 2e       	mov	r15, r31
     222:	f0 2d       	mov	r31, r0
	}
	*ptr_f_distination = f_distination;  // Update the measured distance
     224:	c8 82       	st	Y, r12
     226:	d9 82       	std	Y+1, r13	; 0x01
     228:	ea 82       	std	Y+2, r14	; 0x02
     22a:	fb 82       	std	Y+3, r15	; 0x03

	// Make a decision based on the measured distance
	if(f_distination > APP_DISTANCE_70_CM) {
     22c:	20 e0       	ldi	r18, 0x00	; 0
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	4c e8       	ldi	r20, 0x8C	; 140
     232:	52 e4       	ldi	r21, 0x42	; 66
     234:	c7 01       	movw	r24, r14
     236:	b6 01       	movw	r22, r12
     238:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
     23c:	18 16       	cp	r1, r24
     23e:	24 f4       	brge	.+8      	; 0x248 <APP_make_decision+0x60>
		*ptr_enu_decision = NO_OBSTACLES;  // No obstacles in the path
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	f8 01       	movw	r30, r16
     244:	80 83       	st	Z, r24
     246:	41 c0       	rjmp	.+130    	; 0x2ca <APP_make_decision+0xe2>
	} else if ((f_distination > APP_DISTANCE_30_CM) && (f_distination <= APP_DISTANCE_70_CM)) {
     248:	20 e0       	ldi	r18, 0x00	; 0
     24a:	30 e0       	ldi	r19, 0x00	; 0
     24c:	40 ef       	ldi	r20, 0xF0	; 240
     24e:	51 e4       	ldi	r21, 0x41	; 65
     250:	c7 01       	movw	r24, r14
     252:	b6 01       	movw	r22, r12
     254:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
     258:	18 16       	cp	r1, r24
     25a:	74 f4       	brge	.+28     	; 0x278 <APP_make_decision+0x90>
     25c:	20 e0       	ldi	r18, 0x00	; 0
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	4c e8       	ldi	r20, 0x8C	; 140
     262:	52 e4       	ldi	r21, 0x42	; 66
     264:	c7 01       	movw	r24, r14
     266:	b6 01       	movw	r22, r12
     268:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
     26c:	18 16       	cp	r1, r24
     26e:	24 f0       	brlt	.+8      	; 0x278 <APP_make_decision+0x90>
		*ptr_enu_decision = OBSTACLE_70_30;  // Obstacle at 70-30 cm distance
     270:	82 e0       	ldi	r24, 0x02	; 2
     272:	f8 01       	movw	r30, r16
     274:	80 83       	st	Z, r24
     276:	29 c0       	rjmp	.+82     	; 0x2ca <APP_make_decision+0xe2>
	} else if ((f_distination >= APP_DISTANCE_20_CM) && (f_distination <= APP_DISTANCE_30_CM)) {
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	30 e0       	ldi	r19, 0x00	; 0
     27c:	40 ea       	ldi	r20, 0xA0	; 160
     27e:	51 e4       	ldi	r21, 0x41	; 65
     280:	c7 01       	movw	r24, r14
     282:	b6 01       	movw	r22, r12
     284:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__gesf2>
     288:	88 23       	and	r24, r24
     28a:	74 f0       	brlt	.+28     	; 0x2a8 <APP_make_decision+0xc0>
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	30 e0       	ldi	r19, 0x00	; 0
     290:	40 ef       	ldi	r20, 0xF0	; 240
     292:	51 e4       	ldi	r21, 0x41	; 65
     294:	c7 01       	movw	r24, r14
     296:	b6 01       	movw	r22, r12
     298:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
     29c:	18 16       	cp	r1, r24
     29e:	24 f0       	brlt	.+8      	; 0x2a8 <APP_make_decision+0xc0>
		*ptr_enu_decision = OBSTACLE_30_20;  // Obstacle at 30-20 cm distance
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	f8 01       	movw	r30, r16
     2a4:	80 83       	st	Z, r24
     2a6:	11 c0       	rjmp	.+34     	; 0x2ca <APP_make_decision+0xe2>
	} else if (f_distination < APP_DISTANCE_20_CM) {
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	40 ea       	ldi	r20, 0xA0	; 160
     2ae:	51 e4       	ldi	r21, 0x41	; 65
     2b0:	c7 01       	movw	r24, r14
     2b2:	b6 01       	movw	r22, r12
     2b4:	0e 94 de 11 	call	0x23bc	; 0x23bc <__cmpsf2>
     2b8:	88 23       	and	r24, r24
     2ba:	24 f4       	brge	.+8      	; 0x2c4 <APP_make_decision+0xdc>
		*ptr_enu_decision = OBSTACLE_LESS_20;  // Obstacle less than 20 cm distance
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	f8 01       	movw	r30, r16
     2c0:	80 83       	st	Z, r24
     2c2:	03 c0       	rjmp	.+6      	; 0x2ca <APP_make_decision+0xe2>
	} else {
		*ptr_enu_decision = NO_DECISION;  // No decision based on the given conditions
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	f8 01       	movw	r30, r16
     2c8:	80 83       	st	Z, r24
	}
	// Note: The last condition, 'else', covers any unexpected cases
}
     2ca:	df 91       	pop	r29
     2cc:	cf 91       	pop	r28
     2ce:	1f 91       	pop	r17
     2d0:	0f 91       	pop	r16
     2d2:	ff 90       	pop	r15
     2d4:	ef 90       	pop	r14
     2d6:	df 90       	pop	r13
     2d8:	cf 90       	pop	r12
     2da:	08 95       	ret

000002dc <APP_vidInit>:
 *
 * This function initializes various components of the application, including the ultrasonic sensor,
 * LCD, buttons, external interrupts, timing system, and motor control.
 */
void APP_vidInit(void)
{
     2dc:	0f 93       	push	r16
     2de:	1f 93       	push	r17
     2e0:	cf 93       	push	r28
     2e2:	df 93       	push	r29
    // Initialize ultrasonic sensor and enable interrupts
    HULTRASONIC_vidInit();
     2e4:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <HULTRASONIC_vidInit>
    HULTRASONIC_vidInterruptEnable();
     2e8:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <HULTRASONIC_vidInterruptEnable>

    /* LCD Initialization */
    // Configuration for the LCD
    gs_str_lcd_config.enu_mode = LCD_4_BIT_MODE;
     2ec:	ed ef       	ldi	r30, 0xFD	; 253
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	10 82       	st	Z, r1

    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_0].enu_port = PORTC;
     2f2:	c2 e0       	ldi	r28, 0x02	; 2
     2f4:	c1 83       	std	Z+1, r28	; 0x01
    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_1].enu_pin  = PIN0;

    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_1].enu_port = PORTC;
     2f6:	c3 83       	std	Z+3, r28	; 0x03
    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_1].enu_pin  = PIN1;
     2f8:	d1 e0       	ldi	r29, 0x01	; 1
     2fa:	d4 83       	std	Z+4, r29	; 0x04

    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_2].enu_port = PORTC;
     2fc:	c5 83       	std	Z+5, r28	; 0x05
    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_2].enu_pin  = PIN2;
     2fe:	c6 83       	std	Z+6, r28	; 0x06

    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_3].enu_port = PORTC;
     300:	c7 83       	std	Z+7, r28	; 0x07
    gs_str_lcd_config.str_data_pins[APP_LCD_PIN_DATA_INDEX_3].enu_pin  = PIN3;
     302:	13 e0       	ldi	r17, 0x03	; 3
     304:	10 87       	std	Z+8, r17	; 0x08

    gs_str_lcd_config.str_RSpin.enu_port = PORTC;
     306:	c1 8b       	std	Z+17, r28	; 0x11
    gs_str_lcd_config.str_RSpin.enu_pin  = PIN4;
     308:	04 e0       	ldi	r16, 0x04	; 4
     30a:	02 8b       	std	Z+18, r16	; 0x12

    gs_str_lcd_config.str_RWpin.enu_port = PORTC;
     30c:	c3 8b       	std	Z+19, r28	; 0x13
    gs_str_lcd_config.str_RWpin.enu_pin  = PIN5;
     30e:	85 e0       	ldi	r24, 0x05	; 5
     310:	84 8b       	std	Z+20, r24	; 0x14

    gs_str_lcd_config.str_Epin.enu_port = PORTC;
     312:	c5 8b       	std	Z+21, r28	; 0x15
    gs_str_lcd_config.str_Epin.enu_pin  = PIN6;
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	86 8b       	std	Z+22, r24	; 0x16

    // Initialize the LCD with the configured settings
    LCD_init(&gs_str_lcd_config);
     318:	cf 01       	movw	r24, r30
     31a:	0e 94 0a 07 	call	0xe14	; 0xe14 <LCD_init>

    /* Button Initialization */
    gs_btn_dir_state.enu_port  = PORTD;
     31e:	e3 ee       	ldi	r30, 0xE3	; 227
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	10 83       	st	Z, r17
    gs_btn_dir_state.enu_pin   = PIN1;
     324:	d1 83       	std	Z+1, r29	; 0x01
    BTN_init(&gs_btn_dir_state);
     326:	cf 01       	movw	r24, r30
     328:	0e 94 30 04 	call	0x860	; 0x860 <BTN_init>

    /* External Interrupt Initialization */
    gs_str_extim_config_btn.enu_exti_interrupt_no = EXTI_0;
     32c:	eb ef       	ldi	r30, 0xFB	; 251
     32e:	f0 e0       	ldi	r31, 0x00	; 0
     330:	10 82       	st	Z, r1
    gs_str_extim_config_btn.enu_edge_detection    = EXTI_FALLING_EDGE;
     332:	c1 83       	std	Z+1, r28	; 0x01
    extim_init(&gs_str_extim_config_btn, BUTTON_vidChangeState);
     334:	69 e4       	ldi	r22, 0x49	; 73
     336:	70 e0       	ldi	r23, 0x00	; 0
     338:	cf 01       	movw	r24, r30
     33a:	0e 94 9a 05 	call	0xb34	; 0xb34 <extim_init>

    /* Timing Initialization */
    timing_init_1(APP_SYS_TICK_DURATION);
     33e:	88 ee       	ldi	r24, 0xE8	; 232
     340:	93 e0       	ldi	r25, 0x03	; 3
     342:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <timing_init_1>

    /* Motor Initialization */
    gs_str_motor_1.port        = PORTA;
     346:	e8 ee       	ldi	r30, 0xE8	; 232
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	10 82       	st	Z, r1
    gs_str_motor_1.pin_num1    = PIN3;
     34c:	11 83       	std	Z+1, r17	; 0x01
    gs_str_motor_1.pin_num2    = PIN4;
     34e:	02 83       	std	Z+2, r16	; 0x02

    gs_str_motor_2.port        = PORTA;
     350:	e5 ee       	ldi	r30, 0xE5	; 229
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	10 82       	st	Z, r1
    gs_str_motor_2.pin_num1    = PIN0;
     356:	11 82       	std	Z+1, r1	; 0x01
    gs_str_motor_2.pin_num2    = PIN1;
     358:	d2 83       	std	Z+2, r29	; 0x02

    // PWM Configuration for Car Control
    gs_str_pwm_pin.frequency       = APP_CAR_PWM_FREQ;
     35a:	eb ee       	ldi	r30, 0xEB	; 235
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	84 e1       	ldi	r24, 0x14	; 20
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	a0 e0       	ldi	r26, 0x00	; 0
     364:	b0 e0       	ldi	r27, 0x00	; 0
     366:	83 83       	std	Z+3, r24	; 0x03
     368:	94 83       	std	Z+4, r25	; 0x04
     36a:	a5 83       	std	Z+5, r26	; 0x05
     36c:	b6 83       	std	Z+6, r27	; 0x06
    gs_str_pwm_pin.duty_cycle      = APP_CAR_SPEED_30_PRE;
     36e:	8e e1       	ldi	r24, 0x1E	; 30
     370:	82 83       	std	Z+2, r24	; 0x02
    gs_str_pwm_pin.enu_pin_index   = PIN2;
     372:	c1 83       	std	Z+1, r28	; 0x01
    gs_str_pwm_pin.enu_port_index  = PORTA;
     374:	10 82       	st	Z, r1
    CAR_INIT(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     376:	af 01       	movw	r20, r30
     378:	65 ee       	ldi	r22, 0xE5	; 229
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	88 ee       	ldi	r24, 0xE8	; 232
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	0e 94 96 04 	call	0x92c	; 0x92c <CAR_INIT>

    // Start the timing system
    timing_start_1();
     384:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <timing_start_1>
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	08 95       	ret

00000392 <APP_vidStart>:
 * distances and controlling the car's movement accordingly.
 */
void APP_vidStart(void)
{
	// Enable external interrupt
	extim_enable(&gs_str_extim_config_btn);
     392:	8b ef       	ldi	r24, 0xFB	; 251
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 b1 05 	call	0xb62	; 0xb62 <extim_enable>

	if(en_motorSel == EN_MOTOR_START){
     39a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     39e:	81 11       	cpse	r24, r1
     3a0:	3c c2       	rjmp	.+1144   	; 0x81a <__DATA_REGION_LENGTH__+0x1a>

		if (en_start_state == EN_UPDATE_DIR)
     3a2:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <en_start_state>
     3a6:	81 11       	cpse	r24, r1
     3a8:	32 c2       	rjmp	.+1124   	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		{
			// Clear LCD and display message
			LCD_clear (&gs_str_lcd_config);
     3aa:	8d ef       	ldi	r24, 0xFD	; 253
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_clear>
			LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	8d ef       	ldi	r24, 0xFD	; 253
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
			LCD_writeString (&gs_str_lcd_config, (uint8_t*) "Set Def. Rot.");
     3be:	65 e8       	ldi	r22, 0x85	; 133
     3c0:	70 e0       	ldi	r23, 0x00	; 0
     3c2:	8d ef       	ldi	r24, 0xFD	; 253
     3c4:	90 e0       	ldi	r25, 0x00	; 0
     3c6:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
			// Update direction based on obstacle detection
			APP_updateDirection();
     3ca:	0e 94 8c 00 	call	0x118	; 0x118 <APP_updateDirection>
			en_start_state = UPDATE_OBSTACLE_STATE;
     3ce:	81 e0       	ldi	r24, 0x01	; 1
     3d0:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <en_start_state>
     3d4:	1c c2       	rjmp	.+1080   	; 0x80e <__DATA_REGION_LENGTH__+0xe>
		}

		// Continuously loop while motor is started
		while(en_motorSel == EN_MOTOR_START){
			// Check if maximum rotation count has not been reached
			if(gs_u8_rotate_counter < APP_MAX_CAR_ROTATE){
     3d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	30 f4       	brcc	.+12     	; 0x3ea <APP_vidStart+0x58>
				APP_make_decision(&gs_fl_dist, &en_Dist_states);
     3de:	6d e1       	ldi	r22, 0x1D	; 29
     3e0:	71 e0       	ldi	r23, 0x01	; 1
     3e2:	89 e1       	ldi	r24, 0x19	; 25
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
			}

			if(en_Dist_states == NO_OBSTACLES){
     3ea:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	09 f0       	breq	.+2      	; 0x3f4 <APP_vidStart+0x62>
     3f2:	aa c0       	rjmp	.+340    	; 0x548 <__EEPROM_REGION_LENGTH__+0x148>
				// Display speed and direction information on LCD
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     3f4:	40 e0       	ldi	r20, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	8d ef       	ldi	r24, 0xFD	; 253
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
     400:	63 e9       	ldi	r22, 0x93	; 147
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	8d ef       	ldi	r24, 0xFD	; 253
     406:	90 e0       	ldi	r25, 0x00	; 0
     408:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:F");
     40c:	6e e9       	ldi	r22, 0x9E	; 158
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	8d ef       	ldi	r24, 0xFD	; 253
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>

				// Continue moving forward for a set time period
				while((timing_time_out(APP_5_SEC_WITHOUT_OBSTACLES) == TIMING_NOT_TIME_OUT) && (en_motorSel == EN_MOTOR_START)){
     418:	38 c0       	rjmp	.+112    	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
					LCD_setCursor (&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     41a:	40 e0       	ldi	r20, 0x00	; 0
     41c:	61 e0       	ldi	r22, 0x01	; 1
     41e:	8d ef       	ldi	r24, 0xFD	; 253
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dist: ");
     426:	64 ea       	ldi	r22, 0xA4	; 164
     428:	70 e0       	ldi	r23, 0x00	; 0
     42a:	8d ef       	ldi	r24, 0xFD	; 253
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
     432:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <gs_fl_dist>
     436:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <gs_fl_dist+0x1>
     43a:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <gs_fl_dist+0x2>
     43e:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <gs_fl_dist+0x3>
     442:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
     446:	86 2f       	mov	r24, r22
     448:	64 e1       	ldi	r22, 0x14	; 20
     44a:	71 e0       	ldi	r23, 0x01	; 1
     44c:	0e 94 54 00 	call	0xa8	; 0xa8 <intToString>
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
     450:	64 e1       	ldi	r22, 0x14	; 20
     452:	71 e0       	ldi	r23, 0x01	; 1
     454:	8d ef       	ldi	r24, 0xFD	; 253
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
     45c:	6b ea       	ldi	r22, 0xAB	; 171
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	8d ef       	ldi	r24, 0xFD	; 253
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
     468:	8e e1       	ldi	r24, 0x1E	; 30
     46a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gs_str_pwm_pin+0x2>
					CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     46e:	4b ee       	ldi	r20, 0xEB	; 235
     470:	50 e0       	ldi	r21, 0x00	; 0
     472:	65 ee       	ldi	r22, 0xE5	; 229
     474:	70 e0       	ldi	r23, 0x00	; 0
     476:	88 ee       	ldi	r24, 0xE8	; 232
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 c1 04 	call	0x982	; 0x982 <CAR_FORWARD>
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
     47e:	6d e1       	ldi	r22, 0x1D	; 29
     480:	71 e0       	ldi	r23, 0x01	; 1
     482:	89 e1       	ldi	r24, 0x19	; 25
     484:	91 e0       	ldi	r25, 0x01	; 1
     486:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:F");

				// Continue moving forward for a set time period
				while((timing_time_out(APP_5_SEC_WITHOUT_OBSTACLES) == TIMING_NOT_TIME_OUT) && (en_motorSel == EN_MOTOR_START)){
     48a:	85 e0       	ldi	r24, 0x05	; 5
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <timing_time_out>
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	29 f4       	brne	.+10     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     496:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
     49e:	bd cf       	rjmp	.-134    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
					CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
				}

				// Check obstacle state again after time period
				if(en_Dist_states == NO_OBSTACLES){
     4a0:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	09 f0       	breq	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
     4a8:	b2 c1       	rjmp	.+868    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     4aa:	40 e0       	ldi	r20, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	8d ef       	ldi	r24, 0xFD	; 253
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:50% ");
     4b6:	60 eb       	ldi	r22, 0xB0	; 176
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	8d ef       	ldi	r24, 0xFD	; 253
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_50_PRE;
     4c2:	82 e3       	ldi	r24, 0x32	; 50
     4c4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gs_str_pwm_pin+0x2>
					CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     4c8:	4b ee       	ldi	r20, 0xEB	; 235
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	65 ee       	ldi	r22, 0xE5	; 229
     4ce:	70 e0       	ldi	r23, 0x00	; 0
     4d0:	88 ee       	ldi	r24, 0xE8	; 232
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	0e 94 c1 04 	call	0x982	; 0x982 <CAR_FORWARD>

					// Continue moving forward while monitoring obstacle state
					while((en_Dist_states == NO_OBSTACLES) && (en_motorSel == EN_MOTOR_START)){
     4d8:	2d c0       	rjmp	.+90     	; 0x534 <__EEPROM_REGION_LENGTH__+0x134>
						LCD_setCursor (&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     4da:	40 e0       	ldi	r20, 0x00	; 0
     4dc:	61 e0       	ldi	r22, 0x01	; 1
     4de:	8d ef       	ldi	r24, 0xFD	; 253
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
						LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dist: ");
     4e6:	64 ea       	ldi	r22, 0xA4	; 164
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	8d ef       	ldi	r24, 0xFD	; 253
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
						intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
     4f2:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <gs_fl_dist>
     4f6:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <gs_fl_dist+0x1>
     4fa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <gs_fl_dist+0x2>
     4fe:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <gs_fl_dist+0x3>
     502:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
     506:	86 2f       	mov	r24, r22
     508:	64 e1       	ldi	r22, 0x14	; 20
     50a:	71 e0       	ldi	r23, 0x01	; 1
     50c:	0e 94 54 00 	call	0xa8	; 0xa8 <intToString>
						LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
     510:	64 e1       	ldi	r22, 0x14	; 20
     512:	71 e0       	ldi	r23, 0x01	; 1
     514:	8d ef       	ldi	r24, 0xFD	; 253
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
						LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
     51c:	6b ea       	ldi	r22, 0xAB	; 171
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	8d ef       	ldi	r24, 0xFD	; 253
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
						APP_make_decision(&gs_fl_dist, &en_Dist_states);
     528:	6d e1       	ldi	r22, 0x1D	; 29
     52a:	71 e0       	ldi	r23, 0x01	; 1
     52c:	89 e1       	ldi	r24, 0x19	; 25
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:50% ");
					gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_50_PRE;
					CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);

					// Continue moving forward while monitoring obstacle state
					while((en_Dist_states == NO_OBSTACLES) && (en_motorSel == EN_MOTOR_START)){
     534:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     538:	81 30       	cpi	r24, 0x01	; 1
     53a:	09 f0       	breq	.+2      	; 0x53e <__EEPROM_REGION_LENGTH__+0x13e>
     53c:	68 c1       	rjmp	.+720    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     53e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     542:	88 23       	and	r24, r24
     544:	51 f2       	breq	.-108    	; 0x4da <__EEPROM_REGION_LENGTH__+0xda>
     546:	63 c1       	rjmp	.+710    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
						APP_make_decision(&gs_fl_dist, &en_Dist_states);
					}
					} else {
					// No action needed
				}
				} else if(en_Dist_states == OBSTACLE_70_30){
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	09 f0       	breq	.+2      	; 0x54e <__EEPROM_REGION_LENGTH__+0x14e>
     54c:	55 c0       	rjmp	.+170    	; 0x5f8 <__EEPROM_REGION_LENGTH__+0x1f8>
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     54e:	40 e0       	ldi	r20, 0x00	; 0
     550:	60 e0       	ldi	r22, 0x00	; 0
     552:	8d ef       	ldi	r24, 0xFD	; 253
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
     55a:	63 e9       	ldi	r22, 0x93	; 147
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	8d ef       	ldi	r24, 0xFD	; 253
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:F");
     566:	6e e9       	ldi	r22, 0x9E	; 158
     568:	70 e0       	ldi	r23, 0x00	; 0
     56a:	8d ef       	ldi	r24, 0xFD	; 253
     56c:	90 e0       	ldi	r25, 0x00	; 0
     56e:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>

				gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
     572:	8e e1       	ldi	r24, 0x1E	; 30
     574:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gs_str_pwm_pin+0x2>
				CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     578:	4b ee       	ldi	r20, 0xEB	; 235
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	65 ee       	ldi	r22, 0xE5	; 229
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	88 ee       	ldi	r24, 0xE8	; 232
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	0e 94 c1 04 	call	0x982	; 0x982 <CAR_FORWARD>

				while((en_Dist_states == OBSTACLE_70_30) && (en_motorSel == EN_MOTOR_START)){
     588:	2d c0       	rjmp	.+90     	; 0x5e4 <__EEPROM_REGION_LENGTH__+0x1e4>
					LCD_setCursor (&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	61 e0       	ldi	r22, 0x01	; 1
     58e:	8d ef       	ldi	r24, 0xFD	; 253
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dist: ");
     596:	64 ea       	ldi	r22, 0xA4	; 164
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	8d ef       	ldi	r24, 0xFD	; 253
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
     5a2:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <gs_fl_dist>
     5a6:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <gs_fl_dist+0x1>
     5aa:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <gs_fl_dist+0x2>
     5ae:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <gs_fl_dist+0x3>
     5b2:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
     5b6:	86 2f       	mov	r24, r22
     5b8:	64 e1       	ldi	r22, 0x14	; 20
     5ba:	71 e0       	ldi	r23, 0x01	; 1
     5bc:	0e 94 54 00 	call	0xa8	; 0xa8 <intToString>
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
     5c0:	64 e1       	ldi	r22, 0x14	; 20
     5c2:	71 e0       	ldi	r23, 0x01	; 1
     5c4:	8d ef       	ldi	r24, 0xFD	; 253
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
     5cc:	6b ea       	ldi	r22, 0xAB	; 171
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	8d ef       	ldi	r24, 0xFD	; 253
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
     5d8:	6d e1       	ldi	r22, 0x1D	; 29
     5da:	71 e0       	ldi	r23, 0x01	; 1
     5dc:	89 e1       	ldi	r24, 0x19	; 25
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:F");

				gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
				CAR_FORWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);

				while((en_Dist_states == OBSTACLE_70_30) && (en_motorSel == EN_MOTOR_START)){
     5e4:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     5e8:	82 30       	cpi	r24, 0x02	; 2
     5ea:	09 f0       	breq	.+2      	; 0x5ee <__EEPROM_REGION_LENGTH__+0x1ee>
     5ec:	10 c1       	rjmp	.+544    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     5ee:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     5f2:	88 23       	and	r24, r24
     5f4:	51 f2       	breq	.-108    	; 0x58a <__EEPROM_REGION_LENGTH__+0x18a>
     5f6:	0b c1       	rjmp	.+534    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
				}

				} else if(en_Dist_states == OBSTACLE_30_20){
     5f8:	83 30       	cpi	r24, 0x03	; 3
     5fa:	09 f0       	breq	.+2      	; 0x5fe <__EEPROM_REGION_LENGTH__+0x1fe>
     5fc:	8c c0       	rjmp	.+280    	; 0x716 <__EEPROM_REGION_LENGTH__+0x316>

				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     5fe:	40 e0       	ldi	r20, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	8d ef       	ldi	r24, 0xFD	; 253
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
     60a:	63 e9       	ldi	r22, 0x93	; 147
     60c:	70 e0       	ldi	r23, 0x00	; 0
     60e:	8d ef       	ldi	r24, 0xFD	; 253
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:R");
     616:	6b eb       	ldi	r22, 0xBB	; 187
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	8d ef       	ldi	r24, 0xFD	; 253
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				CAR_STOP(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     622:	4b ee       	ldi	r20, 0xEB	; 235
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	65 ee       	ldi	r22, 0xE5	; 229
     628:	70 e0       	ldi	r23, 0x00	; 0
     62a:	88 ee       	ldi	r24, 0xE8	; 232
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 71 05 	call	0xae2	; 0xae2 <CAR_STOP>

				gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
     632:	8e e1       	ldi	r24, 0x1E	; 30
     634:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gs_str_pwm_pin+0x2>
				if(u8_g_dirStateCounter == MOTOR_TURN_LEFT){
     638:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <u8_g_dirStateCounter>
     63c:	81 30       	cpi	r24, 0x01	; 1
     63e:	49 f4       	brne	.+18     	; 0x652 <__EEPROM_REGION_LENGTH__+0x252>
					CAR_REVERSE_LEFT(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     640:	4b ee       	ldi	r20, 0xEB	; 235
     642:	50 e0       	ldi	r21, 0x00	; 0
     644:	65 ee       	ldi	r22, 0xE5	; 229
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	88 ee       	ldi	r24, 0xE8	; 232
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	0e 94 45 05 	call	0xa8a	; 0xa8a <CAR_REVERSE_LEFT>
     650:	36 c0       	rjmp	.+108    	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
					} else {
					CAR_REVERSE_RIGHT(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     652:	4b ee       	ldi	r20, 0xEB	; 235
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	65 ee       	ldi	r22, 0xE5	; 229
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	88 ee       	ldi	r24, 0xE8	; 232
     65c:	90 e0       	ldi	r25, 0x00	; 0
     65e:	0e 94 19 05 	call	0xa32	; 0xa32 <CAR_REVERSE_RIGHT>
     662:	2d c0       	rjmp	.+90     	; 0x6be <__EEPROM_REGION_LENGTH__+0x2be>
				}
				while((timing_time_out(APP_2_SEC_TO_ROTATE) == TIMING_NOT_TIME_OUT) && (en_motorSel == EN_MOTOR_START)){
					LCD_setCursor (&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     664:	40 e0       	ldi	r20, 0x00	; 0
     666:	61 e0       	ldi	r22, 0x01	; 1
     668:	8d ef       	ldi	r24, 0xFD	; 253
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dist: ");
     670:	64 ea       	ldi	r22, 0xA4	; 164
     672:	70 e0       	ldi	r23, 0x00	; 0
     674:	8d ef       	ldi	r24, 0xFD	; 253
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
     67c:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <gs_fl_dist>
     680:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <gs_fl_dist+0x1>
     684:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <gs_fl_dist+0x2>
     688:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <gs_fl_dist+0x3>
     68c:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
     690:	86 2f       	mov	r24, r22
     692:	64 e1       	ldi	r22, 0x14	; 20
     694:	71 e0       	ldi	r23, 0x01	; 1
     696:	0e 94 54 00 	call	0xa8	; 0xa8 <intToString>
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
     69a:	64 e1       	ldi	r22, 0x14	; 20
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	8d ef       	ldi	r24, 0xFD	; 253
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
     6a6:	6b ea       	ldi	r22, 0xAB	; 171
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	8d ef       	ldi	r24, 0xFD	; 253
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
     6b2:	6d e1       	ldi	r22, 0x1D	; 29
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	89 e1       	ldi	r24, 0x19	; 25
     6b8:	91 e0       	ldi	r25, 0x01	; 1
     6ba:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
				if(u8_g_dirStateCounter == MOTOR_TURN_LEFT){
					CAR_REVERSE_LEFT(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
					} else {
					CAR_REVERSE_RIGHT(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
				}
				while((timing_time_out(APP_2_SEC_TO_ROTATE) == TIMING_NOT_TIME_OUT) && (en_motorSel == EN_MOTOR_START)){
     6be:	82 e0       	ldi	r24, 0x02	; 2
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <timing_time_out>
     6c6:	81 30       	cpi	r24, 0x01	; 1
     6c8:	21 f4       	brne	.+8      	; 0x6d2 <__EEPROM_REGION_LENGTH__+0x2d2>
     6ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     6ce:	88 23       	and	r24, r24
     6d0:	49 f2       	breq	.-110    	; 0x664 <__EEPROM_REGION_LENGTH__+0x264>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
				}
				CAR_STOP(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     6d2:	4b ee       	ldi	r20, 0xEB	; 235
     6d4:	50 e0       	ldi	r21, 0x00	; 0
     6d6:	65 ee       	ldi	r22, 0xE5	; 229
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	88 ee       	ldi	r24, 0xE8	; 232
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	0e 94 71 05 	call	0xae2	; 0xae2 <CAR_STOP>
				APP_make_decision(&gs_fl_dist, &en_Dist_states);
     6e2:	6d e1       	ldi	r22, 0x1D	; 29
     6e4:	71 e0       	ldi	r23, 0x01	; 1
     6e6:	89 e1       	ldi	r24, 0x19	; 25
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
				if(en_Dist_states == OBSTACLE_30_20){
     6ee:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     6f2:	83 30       	cpi	r24, 0x03	; 3
     6f4:	61 f4       	brne	.+24     	; 0x70e <__EEPROM_REGION_LENGTH__+0x30e>
					gs_u8_rotate_counter++;
     6f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     6fa:	8f 5f       	subi	r24, 0xFF	; 255
     6fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
					if(gs_u8_rotate_counter >= APP_MAX_CAR_ROTATE){
     700:	85 30       	cpi	r24, 0x05	; 5
     702:	08 f4       	brcc	.+2      	; 0x706 <__EEPROM_REGION_LENGTH__+0x306>
     704:	84 c0       	rjmp	.+264    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
						en_Dist_states = OBSTACLE_HOLD_MOVING;
     706:	85 e0       	ldi	r24, 0x05	; 5
     708:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <en_Dist_states>
     70c:	80 c0       	rjmp	.+256    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
						} else {
						// No action needed
					}
					} else {
					gs_u8_rotate_counter = U8_ONE_VALUE;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     714:	7c c0       	rjmp	.+248    	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				}

				} else if(en_Dist_states == OBSTACLE_LESS_20){
     716:	84 30       	cpi	r24, 0x04	; 4
     718:	09 f0       	breq	.+2      	; 0x71c <__EEPROM_REGION_LENGTH__+0x31c>
     71a:	54 c0       	rjmp	.+168    	; 0x7c4 <__EEPROM_REGION_LENGTH__+0x3c4>
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     71c:	40 e0       	ldi	r20, 0x00	; 0
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	8d ef       	ldi	r24, 0xFD	; 253
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
     728:	63 e9       	ldi	r22, 0x93	; 147
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	8d ef       	ldi	r24, 0xFD	; 253
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:B");
     734:	61 ec       	ldi	r22, 0xC1	; 193
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	8d ef       	ldi	r24, 0xFD	; 253
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
     740:	8e e1       	ldi	r24, 0x1E	; 30
     742:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <gs_str_pwm_pin+0x2>
				CAR_BACKWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     746:	4b ee       	ldi	r20, 0xEB	; 235
     748:	50 e0       	ldi	r21, 0x00	; 0
     74a:	65 ee       	ldi	r22, 0xE5	; 229
     74c:	70 e0       	ldi	r23, 0x00	; 0
     74e:	88 ee       	ldi	r24, 0xE8	; 232
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	0e 94 ed 04 	call	0x9da	; 0x9da <CAR_BACKWARD>
				while((en_Dist_states == OBSTACLE_LESS_20) && (en_motorSel == EN_MOTOR_START)){
     756:	2d c0       	rjmp	.+90     	; 0x7b2 <__EEPROM_REGION_LENGTH__+0x3b2>
					LCD_setCursor (&gs_str_lcd_config, LCD_ROW_2, LCD_COL_1);
     758:	40 e0       	ldi	r20, 0x00	; 0
     75a:	61 e0       	ldi	r22, 0x01	; 1
     75c:	8d ef       	ldi	r24, 0xFD	; 253
     75e:	90 e0       	ldi	r25, 0x00	; 0
     760:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
					LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dist: ");
     764:	64 ea       	ldi	r22, 0xA4	; 164
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	8d ef       	ldi	r24, 0xFD	; 253
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
     770:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <gs_fl_dist>
     774:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <gs_fl_dist+0x1>
     778:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <gs_fl_dist+0x2>
     77c:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <gs_fl_dist+0x3>
     780:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
     784:	86 2f       	mov	r24, r22
     786:	64 e1       	ldi	r22, 0x14	; 20
     788:	71 e0       	ldi	r23, 0x01	; 1
     78a:	0e 94 54 00 	call	0xa8	; 0xa8 <intToString>
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
     78e:	64 e1       	ldi	r22, 0x14	; 20
     790:	71 e0       	ldi	r23, 0x01	; 1
     792:	8d ef       	ldi	r24, 0xFD	; 253
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
     79a:	6b ea       	ldi	r22, 0xAB	; 171
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	8d ef       	ldi	r24, 0xFD	; 253
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
     7a6:	6d e1       	ldi	r22, 0x1D	; 29
     7a8:	71 e0       	ldi	r23, 0x01	; 1
     7aa:	89 e1       	ldi	r24, 0x19	; 25
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Speed:30% ");
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Dir:B");
				gs_str_pwm_pin.duty_cycle = APP_CAR_SPEED_30_PRE;
				CAR_BACKWARD(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
				while((en_Dist_states == OBSTACLE_LESS_20) && (en_motorSel == EN_MOTOR_START)){
     7b2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <en_Dist_states>
     7b6:	84 30       	cpi	r24, 0x04	; 4
     7b8:	51 f5       	brne	.+84     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     7ba:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     7be:	88 23       	and	r24, r24
     7c0:	59 f2       	breq	.-106    	; 0x758 <__EEPROM_REGION_LENGTH__+0x358>
     7c2:	25 c0       	rjmp	.+74     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
					intToString((uint8_t)gs_fl_dist, gs_arr_u8_string);
					LCD_writeString (&gs_str_lcd_config, gs_arr_u8_string);
					LCD_writeString (&gs_str_lcd_config,(uint8_t*)" cm ");
					APP_make_decision(&gs_fl_dist, &en_Dist_states);
				}
			} else if(en_Dist_states == OBSTACLE_HOLD_MOVING)
     7c4:	85 30       	cpi	r24, 0x05	; 5
     7c6:	19 f5       	brne	.+70     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
			{
				LCD_clear(&gs_str_lcd_config);
     7c8:	8d ef       	ldi	r24, 0xFD	; 253
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_clear>
				LCD_setCursor (&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	8d ef       	ldi	r24, 0xFD	; 253
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
				LCD_writeString (&gs_str_lcd_config, (uint8_t*)"Hold move 3S");
     7dc:	67 ec       	ldi	r22, 0xC7	; 199
     7de:	70 e0       	ldi	r23, 0x00	; 0
     7e0:	8d ef       	ldi	r24, 0xFD	; 253
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
				while((timing_time_out(APP_3_SEC_HOLD_MOVE) == TIMING_NOT_TIME_OUT) && (en_motorSel == EN_MOTOR_START));
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <timing_time_out>
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	21 f4       	brne	.+8      	; 0x7fc <__EEPROM_REGION_LENGTH__+0x3fc>
     7f4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     7f8:	88 23       	and	r24, r24
     7fa:	b1 f3       	breq	.-20     	; 0x7e8 <__EEPROM_REGION_LENGTH__+0x3e8>
				gs_u8_rotate_counter = U8_ONE_VALUE;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				APP_make_decision(&gs_fl_dist, &en_Dist_states);
     802:	6d e1       	ldi	r22, 0x1D	; 29
     804:	71 e0       	ldi	r23, 0x01	; 1
     806:	89 e1       	ldi	r24, 0x19	; 25
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <APP_make_decision>
			APP_updateDirection();
			en_start_state = UPDATE_OBSTACLE_STATE;
		}

		// Continuously loop while motor is started
		while(en_motorSel == EN_MOTOR_START){
     80e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     812:	88 23       	and	r24, r24
     814:	09 f4       	brne	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	df cd       	rjmp	.-1090   	; 0x3d6 <APP_vidStart+0x44>
     818:	08 95       	ret
				APP_make_decision(&gs_fl_dist, &en_Dist_states);
				} else {
				// No action needed
			}
		}
		} else if(en_motorSel == EN_MOTOR_STOP){/** if stop button pressed**/
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	01 f5       	brne	.+64     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>

		LCD_clear (&gs_str_lcd_config);
     81e:	8d ef       	ldi	r24, 0xFD	; 253
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	0e 94 84 07 	call	0xf08	; 0xf08 <LCD_clear>
		LCD_setCursor(&gs_str_lcd_config, LCD_ROW_1, LCD_COL_1);
     826:	40 e0       	ldi	r20, 0x00	; 0
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	8d ef       	ldi	r24, 0xFD	; 253
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	0e 94 8e 07 	call	0xf1c	; 0xf1c <LCD_setCursor>
		LCD_writeString (&gs_str_lcd_config, (uint8_t*) "Motor Stopped");
     832:	64 ed       	ldi	r22, 0xD4	; 212
     834:	70 e0       	ldi	r23, 0x00	; 0
     836:	8d ef       	ldi	r24, 0xFD	; 253
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	0e 94 a8 08 	call	0x1150	; 0x1150 <LCD_writeString>
		CAR_STOP(&gs_str_motor_1, &gs_str_motor_2, &gs_str_pwm_pin);
     83e:	4b ee       	ldi	r20, 0xEB	; 235
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	65 ee       	ldi	r22, 0xE5	; 229
     844:	70 e0       	ldi	r23, 0x00	; 0
     846:	88 ee       	ldi	r24, 0xE8	; 232
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 71 05 	call	0xae2	; 0xae2 <CAR_STOP>
		en_start_state = EN_UPDATE_DIR;
     84e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <en_start_state>
		timing_break_time_out();
     852:	0e 94 2d 0c 	call	0x185a	; 0x185a <timing_break_time_out>
		while(en_motorSel == EN_MOTOR_STOP);
     856:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <en_motorSel>
     85a:	81 30       	cpi	r24, 0x01	; 1
     85c:	e1 f3       	breq	.-8      	; 0x856 <__DATA_REGION_LENGTH__+0x56>
     85e:	08 95       	ret

00000860 <BTN_init>:
 */
btn_enu_return_state_t BTN_init(const btn_str_config_t *ptr_str_btn_config)
{
	btn_enu_return_state_t enu_return_state = BTN_E_OK;

	if(ptr_str_btn_config != NULL) {
     860:	00 97       	sbiw	r24, 0x00	; 0
     862:	41 f0       	breq	.+16     	; 0x874 <BTN_init+0x14>
     864:	fc 01       	movw	r30, r24
		// Initialize the specified pin of the specified port as an input pin
		DIO_init(ptr_str_btn_config->enu_port, ptr_str_btn_config->enu_pin, DIO_PIN_INPUT);
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	61 81       	ldd	r22, Z+1	; 0x01
     86a:	80 81       	ld	r24, Z
     86c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
 *
 * @note The button configuration structure contains the port and pin information.
 */
btn_enu_return_state_t BTN_init(const btn_str_config_t *ptr_str_btn_config)
{
	btn_enu_return_state_t enu_return_state = BTN_E_OK;
     870:	80 e0       	ldi	r24, 0x00	; 0
     872:	08 95       	ret

	if(ptr_str_btn_config != NULL) {
		// Initialize the specified pin of the specified port as an input pin
		DIO_init(ptr_str_btn_config->enu_port, ptr_str_btn_config->enu_pin, DIO_PIN_INPUT);
	} else {
		enu_return_state = BTN_NOT_OK;
     874:	81 e0       	ldi	r24, 0x01	; 1
	}

	return enu_return_state;
}
     876:	08 95       	ret

00000878 <BTN_get_state>:
 * @note The button configuration structure contains the port and pin information.
 * @note The function employs a debounce mechanism to ensure accurate button state detection.
 * @note The debounce threshold and checking time are constants defined in the module.
 */
btn_enu_return_state_t BTN_get_state(const btn_str_config_t *ptr_str_btn_config, btn_enu_state_t *ptr_enu_btn_state)
{
     878:	af 92       	push	r10
     87a:	bf 92       	push	r11
     87c:	cf 92       	push	r12
     87e:	df 92       	push	r13
     880:	ef 92       	push	r14
     882:	ff 92       	push	r15
     884:	0f 93       	push	r16
     886:	1f 93       	push	r17
     888:	cf 93       	push	r28
     88a:	df 93       	push	r29
     88c:	1f 92       	push	r1
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	btn_enu_return_state_t enu_return_state = BTN_E_OK;
	dio_enu_level_t enu_pin_state;
	uint16_t u16_button_time_counter = 0;
	uint16_t u16_debounceThreshold_counter = 0;

	if((ptr_str_btn_config != NULL) && (ptr_enu_btn_state != NULL)) {
     892:	00 97       	sbiw	r24, 0x00	; 0
     894:	e1 f1       	breq	.+120    	; 0x90e <BTN_get_state+0x96>
     896:	61 15       	cp	r22, r1
     898:	71 05       	cpc	r23, r1
     89a:	d9 f1       	breq	.+118    	; 0x912 <BTN_get_state+0x9a>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
		DIO_read_pin(ptr_str_btn_config->enu_port, ptr_str_btn_config->enu_pin, &enu_pin_state);
     8a0:	ae 01       	movw	r20, r28
     8a2:	4f 5f       	subi	r20, 0xFF	; 255
     8a4:	5f 4f       	sbci	r21, 0xFF	; 255
     8a6:	fc 01       	movw	r30, r24
     8a8:	61 81       	ldd	r22, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DIO_read_pin>

		if(enu_pin_state == DIO_PIN_LOW_LEVEL) {
     8b0:	89 81       	ldd	r24, Y+1	; 0x01
     8b2:	88 23       	and	r24, r24
     8b4:	91 f0       	breq	.+36     	; 0x8da <BTN_get_state+0x62>
     8b6:	26 c0       	rjmp	.+76     	; 0x904 <BTN_get_state+0x8c>
			u16_debounceThreshold_counter++;

			while(u16_button_time_counter < BUTTON_CHECKING_TIME) {
				DIO_read_pin(ptr_str_btn_config->enu_port, ptr_str_btn_config->enu_pin, &enu_pin_state);
     8b8:	ae 01       	movw	r20, r28
     8ba:	4f 5f       	subi	r20, 0xFF	; 255
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	f7 01       	movw	r30, r14
     8c0:	61 81       	ldd	r22, Z+1	; 0x01
     8c2:	80 81       	ld	r24, Z
     8c4:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <DIO_read_pin>
				
				if(enu_pin_state == DIO_PIN_LOW_LEVEL) {
     8c8:	89 81       	ldd	r24, Y+1	; 0x01
     8ca:	81 11       	cpse	r24, r1
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <BTN_get_state+0x5c>
					u16_debounceThreshold_counter++;
     8ce:	ff ef       	ldi	r31, 0xFF	; 255
     8d0:	af 1a       	sub	r10, r31
     8d2:	bf 0a       	sbc	r11, r31
				} else {
					/* Button released during the checking time */
				}
				
				u16_button_time_counter++;
     8d4:	0f 5f       	subi	r16, 0xFF	; 255
     8d6:	1f 4f       	sbci	r17, 0xFF	; 255
     8d8:	05 c0       	rjmp	.+10     	; 0x8e4 <BTN_get_state+0x6c>
     8da:	aa 24       	eor	r10, r10
     8dc:	a3 94       	inc	r10
     8de:	b1 2c       	mov	r11, r1
     8e0:	00 e0       	ldi	r16, 0x00	; 0
     8e2:	10 e0       	ldi	r17, 0x00	; 0
		DIO_read_pin(ptr_str_btn_config->enu_port, ptr_str_btn_config->enu_pin, &enu_pin_state);

		if(enu_pin_state == DIO_PIN_LOW_LEVEL) {
			u16_debounceThreshold_counter++;

			while(u16_button_time_counter < BUTTON_CHECKING_TIME) {
     8e4:	04 36       	cpi	r16, 0x64	; 100
     8e6:	11 05       	cpc	r17, r1
     8e8:	38 f3       	brcs	.-50     	; 0x8b8 <BTN_get_state+0x40>
				}
				
				u16_button_time_counter++;
			}
			
			if(u16_debounceThreshold_counter >= BUTTON_DEBOUNCE_THRESHOLD) {
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	a8 16       	cp	r10, r24
     8ee:	b1 04       	cpc	r11, r1
     8f0:	20 f0       	brcs	.+8      	; 0x8fa <BTN_get_state+0x82>
				*ptr_enu_btn_state = BTN_PUSHED;
     8f2:	f6 01       	movw	r30, r12
     8f4:	10 82       	st	Z, r1
 * @note The function employs a debounce mechanism to ensure accurate button state detection.
 * @note The debounce threshold and checking time are constants defined in the module.
 */
btn_enu_return_state_t BTN_get_state(const btn_str_config_t *ptr_str_btn_config, btn_enu_state_t *ptr_enu_btn_state)
{
	btn_enu_return_state_t enu_return_state = BTN_E_OK;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	0d c0       	rjmp	.+26     	; 0x914 <BTN_get_state+0x9c>
			}
			
			if(u16_debounceThreshold_counter >= BUTTON_DEBOUNCE_THRESHOLD) {
				*ptr_enu_btn_state = BTN_PUSHED;
			} else {
				*ptr_enu_btn_state = BTN_RELEASED;
     8fa:	81 e0       	ldi	r24, 0x01	; 1
     8fc:	f6 01       	movw	r30, r12
     8fe:	80 83       	st	Z, r24
 * @note The function employs a debounce mechanism to ensure accurate button state detection.
 * @note The debounce threshold and checking time are constants defined in the module.
 */
btn_enu_return_state_t BTN_get_state(const btn_str_config_t *ptr_str_btn_config, btn_enu_state_t *ptr_enu_btn_state)
{
	btn_enu_return_state_t enu_return_state = BTN_E_OK;
     900:	80 e0       	ldi	r24, 0x00	; 0
     902:	08 c0       	rjmp	.+16     	; 0x914 <BTN_get_state+0x9c>
			} else {
				*ptr_enu_btn_state = BTN_RELEASED;
			}
		} else {
			/* Button is not pushed */
			*ptr_enu_btn_state = BTN_RELEASED;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	f6 01       	movw	r30, r12
     908:	80 83       	st	Z, r24
 * @note The function employs a debounce mechanism to ensure accurate button state detection.
 * @note The debounce threshold and checking time are constants defined in the module.
 */
btn_enu_return_state_t BTN_get_state(const btn_str_config_t *ptr_str_btn_config, btn_enu_state_t *ptr_enu_btn_state)
{
	btn_enu_return_state_t enu_return_state = BTN_E_OK;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	03 c0       	rjmp	.+6      	; 0x914 <BTN_get_state+0x9c>
			/* Button is not pushed */
			*ptr_enu_btn_state = BTN_RELEASED;
		}
	} else {
		/* Invalid input parameters */
		enu_return_state = BTN_NOT_OK;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	01 c0       	rjmp	.+2      	; 0x914 <BTN_get_state+0x9c>
     912:	81 e0       	ldi	r24, 0x01	; 1
	}

	return enu_return_state;
}
     914:	0f 90       	pop	r0
     916:	df 91       	pop	r29
     918:	cf 91       	pop	r28
     91a:	1f 91       	pop	r17
     91c:	0f 91       	pop	r16
     91e:	ff 90       	pop	r15
     920:	ef 90       	pop	r14
     922:	df 90       	pop	r13
     924:	cf 90       	pop	r12
     926:	bf 90       	pop	r11
     928:	af 90       	pop	r10
     92a:	08 95       	ret

0000092c <CAR_INIT>:
*         - CAR_NULL_PTR: Car initialization failed due to NULL pointers.
*
* @note The function initializes the motors and PWM and starts the PWM tick.
************************************************************************/
car_enu_return_state_t CAR_INIT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	
	motor_enu_return_state_t enu_motor_error_1 ;
	motor_enu_return_state_t enu_motor_error_2 ;
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     936:	00 97       	sbiw	r24, 0x00	; 0
     938:	b9 f0       	breq	.+46     	; 0x968 <CAR_INIT+0x3c>
     93a:	61 15       	cp	r22, r1
     93c:	71 05       	cpc	r23, r1
     93e:	b1 f0       	breq	.+44     	; 0x96c <CAR_INIT+0x40>
     940:	8a 01       	movw	r16, r20
     942:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_INIT(ptr_str_motor_1);
     944:	0e 94 c7 08 	call	0x118e	; 0x118e <MOTOR_INIT>
     948:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_INIT(ptr_str_motor_2);
     94a:	ce 01       	movw	r24, r28
     94c:	0e 94 c7 08 	call	0x118e	; 0x118e <MOTOR_INIT>
     950:	c8 2f       	mov	r28, r24
		pwm_init(ptr_str_pwm_config);
     952:	c8 01       	movw	r24, r16
     954:	0e 94 37 09 	call	0x126e	; 0x126e <pwm_init>
		pwm_start_tick();
     958:	0e 94 92 09 	call	0x1324	; 0x1324 <pwm_start_tick>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     95c:	f1 10       	cpse	r15, r1
     95e:	08 c0       	rjmp	.+16     	; 0x970 <CAR_INIT+0x44>
     960:	c1 11       	cpse	r28, r1
     962:	08 c0       	rjmp	.+16     	; 0x974 <CAR_INIT+0x48>
*
* @note The function initializes the motors and PWM and starts the PWM tick.
************************************************************************/
car_enu_return_state_t CAR_INIT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     964:	80 e0       	ldi	r24, 0x00	; 0
     966:	07 c0       	rjmp	.+14     	; 0x976 <CAR_INIT+0x4a>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     968:	82 e0       	ldi	r24, 0x02	; 2
     96a:	05 c0       	rjmp	.+10     	; 0x976 <CAR_INIT+0x4a>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	03 c0       	rjmp	.+6      	; 0x976 <CAR_INIT+0x4a>
		enu_motor_error_1 = MOTOR_INIT(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_INIT(ptr_str_motor_2);
		pwm_init(ptr_str_pwm_config);
		pwm_start_tick();
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     970:	81 e0       	ldi	r24, 0x01	; 1
     972:	01 c0       	rjmp	.+2      	; 0x976 <CAR_INIT+0x4a>
     974:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
}
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	1f 91       	pop	r17
     97c:	0f 91       	pop	r16
     97e:	ff 90       	pop	r15
     980:	08 95       	ret

00000982 <CAR_FORWARD>:
*         - CAR_NULL_PTR: Car movement failed due to NULL pointers.
*
* @note The function moves both motors forward and starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_FORWARD(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     982:	ff 92       	push	r15
     984:	0f 93       	push	r16
     986:	1f 93       	push	r17
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	motor_enu_return_state_t enu_motor_error_1;
	motor_enu_return_state_t enu_motor_error_2;
	
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     98c:	00 97       	sbiw	r24, 0x00	; 0
     98e:	c1 f0       	breq	.+48     	; 0x9c0 <CAR_FORWARD+0x3e>
     990:	61 15       	cp	r22, r1
     992:	71 05       	cpc	r23, r1
     994:	b9 f0       	breq	.+46     	; 0x9c4 <CAR_FORWARD+0x42>
     996:	8a 01       	movw	r16, r20
     998:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_FORWARD(ptr_str_motor_1);
     99a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MOTOR_FORWARD>
     99e:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_FORWARD(ptr_str_motor_2);
     9a0:	ce 01       	movw	r24, r28
     9a2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MOTOR_FORWARD>
     9a6:	c8 2f       	mov	r28, r24
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
     9a8:	c8 01       	movw	r24, r16
     9aa:	0e 94 4a 0a 	call	0x1494	; 0x1494 <pwm_change_frequency_or_duty_cycle>
		pwm_start(ptr_str_pwm_config);
     9ae:	c8 01       	movw	r24, r16
     9b0:	0e 94 9b 09 	call	0x1336	; 0x1336 <pwm_start>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     9b4:	f1 10       	cpse	r15, r1
     9b6:	08 c0       	rjmp	.+16     	; 0x9c8 <CAR_FORWARD+0x46>
     9b8:	c1 11       	cpse	r28, r1
     9ba:	08 c0       	rjmp	.+16     	; 0x9cc <CAR_FORWARD+0x4a>
*
* @note The function moves both motors forward and starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_FORWARD(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     9bc:	80 e0       	ldi	r24, 0x00	; 0
     9be:	07 c0       	rjmp	.+14     	; 0x9ce <CAR_FORWARD+0x4c>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	05 c0       	rjmp	.+10     	; 0x9ce <CAR_FORWARD+0x4c>
     9c4:	82 e0       	ldi	r24, 0x02	; 2
     9c6:	03 c0       	rjmp	.+6      	; 0x9ce <CAR_FORWARD+0x4c>
		enu_motor_error_1 = MOTOR_FORWARD(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_FORWARD(ptr_str_motor_2);
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
		pwm_start(ptr_str_pwm_config);
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	01 c0       	rjmp	.+2      	; 0x9ce <CAR_FORWARD+0x4c>
     9cc:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
}
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	1f 91       	pop	r17
     9d4:	0f 91       	pop	r16
     9d6:	ff 90       	pop	r15
     9d8:	08 95       	ret

000009da <CAR_BACKWARD>:
*         - CAR_NULL_PTR: Car movement failed due to NULL pointers.
*
* @note The function moves both motors backward and starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_BACKWARD(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     9da:	ff 92       	push	r15
     9dc:	0f 93       	push	r16
     9de:	1f 93       	push	r17
     9e0:	cf 93       	push	r28
     9e2:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	motor_enu_return_state_t enu_motor_error_1;
	motor_enu_return_state_t enu_motor_error_2;
	
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     9e4:	00 97       	sbiw	r24, 0x00	; 0
     9e6:	c1 f0       	breq	.+48     	; 0xa18 <CAR_BACKWARD+0x3e>
     9e8:	61 15       	cp	r22, r1
     9ea:	71 05       	cpc	r23, r1
     9ec:	b9 f0       	breq	.+46     	; 0xa1c <CAR_BACKWARD+0x42>
     9ee:	8a 01       	movw	r16, r20
     9f0:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_BACKWARD(ptr_str_motor_1);
     9f2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <MOTOR_BACKWARD>
     9f6:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_BACKWARD(ptr_str_motor_2);
     9f8:	ce 01       	movw	r24, r28
     9fa:	0e 94 ff 08 	call	0x11fe	; 0x11fe <MOTOR_BACKWARD>
     9fe:	c8 2f       	mov	r28, r24
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
     a00:	c8 01       	movw	r24, r16
     a02:	0e 94 4a 0a 	call	0x1494	; 0x1494 <pwm_change_frequency_or_duty_cycle>
		pwm_start(ptr_str_pwm_config);
     a06:	c8 01       	movw	r24, r16
     a08:	0e 94 9b 09 	call	0x1336	; 0x1336 <pwm_start>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     a0c:	f1 10       	cpse	r15, r1
     a0e:	08 c0       	rjmp	.+16     	; 0xa20 <CAR_BACKWARD+0x46>
     a10:	c1 11       	cpse	r28, r1
     a12:	08 c0       	rjmp	.+16     	; 0xa24 <CAR_BACKWARD+0x4a>
*
* @note The function moves both motors backward and starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_BACKWARD(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <CAR_BACKWARD+0x4c>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     a18:	82 e0       	ldi	r24, 0x02	; 2
     a1a:	05 c0       	rjmp	.+10     	; 0xa26 <CAR_BACKWARD+0x4c>
     a1c:	82 e0       	ldi	r24, 0x02	; 2
     a1e:	03 c0       	rjmp	.+6      	; 0xa26 <CAR_BACKWARD+0x4c>
		enu_motor_error_1 = MOTOR_BACKWARD(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_BACKWARD(ptr_str_motor_2);
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
		pwm_start(ptr_str_pwm_config);
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	01 c0       	rjmp	.+2      	; 0xa26 <CAR_BACKWARD+0x4c>
     a24:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
}
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	ff 90       	pop	r15
     a30:	08 95       	ret

00000a32 <CAR_REVERSE_RIGHT>:
*         - CAR_NULL_PTR: Car movement failed due to NULL pointers.
*
* @note The function reverses motor 1 forward and motor 2 backward, then starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_REVERSE_RIGHT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     a32:	ff 92       	push	r15
     a34:	0f 93       	push	r16
     a36:	1f 93       	push	r17
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	motor_enu_return_state_t enu_motor_error_1;
	motor_enu_return_state_t enu_motor_error_2;
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     a3c:	00 97       	sbiw	r24, 0x00	; 0
     a3e:	c1 f0       	breq	.+48     	; 0xa70 <CAR_REVERSE_RIGHT+0x3e>
     a40:	61 15       	cp	r22, r1
     a42:	71 05       	cpc	r23, r1
     a44:	b9 f0       	breq	.+46     	; 0xa74 <CAR_REVERSE_RIGHT+0x42>
     a46:	8a 01       	movw	r16, r20
     a48:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_FORWARD(ptr_str_motor_1);
     a4a:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MOTOR_FORWARD>
     a4e:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_BACKWARD(ptr_str_motor_2);
     a50:	ce 01       	movw	r24, r28
     a52:	0e 94 ff 08 	call	0x11fe	; 0x11fe <MOTOR_BACKWARD>
     a56:	c8 2f       	mov	r28, r24
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
     a58:	c8 01       	movw	r24, r16
     a5a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <pwm_change_frequency_or_duty_cycle>
		pwm_start(ptr_str_pwm_config);
     a5e:	c8 01       	movw	r24, r16
     a60:	0e 94 9b 09 	call	0x1336	; 0x1336 <pwm_start>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     a64:	f1 10       	cpse	r15, r1
     a66:	08 c0       	rjmp	.+16     	; 0xa78 <CAR_REVERSE_RIGHT+0x46>
     a68:	c1 11       	cpse	r28, r1
     a6a:	08 c0       	rjmp	.+16     	; 0xa7c <CAR_REVERSE_RIGHT+0x4a>
*
* @note The function reverses motor 1 forward and motor 2 backward, then starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_REVERSE_RIGHT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	07 c0       	rjmp	.+14     	; 0xa7e <CAR_REVERSE_RIGHT+0x4c>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     a70:	82 e0       	ldi	r24, 0x02	; 2
     a72:	05 c0       	rjmp	.+10     	; 0xa7e <CAR_REVERSE_RIGHT+0x4c>
     a74:	82 e0       	ldi	r24, 0x02	; 2
     a76:	03 c0       	rjmp	.+6      	; 0xa7e <CAR_REVERSE_RIGHT+0x4c>
		enu_motor_error_1 = MOTOR_FORWARD(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_BACKWARD(ptr_str_motor_2);
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
		pwm_start(ptr_str_pwm_config);
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     a78:	81 e0       	ldi	r24, 0x01	; 1
     a7a:	01 c0       	rjmp	.+2      	; 0xa7e <CAR_REVERSE_RIGHT+0x4c>
     a7c:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
}
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	08 95       	ret

00000a8a <CAR_REVERSE_LEFT>:
*         - CAR_NULL_PTR: Car movement failed due to NULL pointers.
*
* @note The function reverses motor 1 backward and motor 2 forward, then starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_REVERSE_LEFT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	motor_enu_return_state_t enu_motor_error_1;
	motor_enu_return_state_t enu_motor_error_2;
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     a94:	00 97       	sbiw	r24, 0x00	; 0
     a96:	c1 f0       	breq	.+48     	; 0xac8 <CAR_REVERSE_LEFT+0x3e>
     a98:	61 15       	cp	r22, r1
     a9a:	71 05       	cpc	r23, r1
     a9c:	b9 f0       	breq	.+46     	; 0xacc <CAR_REVERSE_LEFT+0x42>
     a9e:	8a 01       	movw	r16, r20
     aa0:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_BACKWARD(ptr_str_motor_1);
     aa2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <MOTOR_BACKWARD>
     aa6:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_FORWARD(ptr_str_motor_2);
     aa8:	ce 01       	movw	r24, r28
     aaa:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <MOTOR_FORWARD>
     aae:	c8 2f       	mov	r28, r24
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
     ab0:	c8 01       	movw	r24, r16
     ab2:	0e 94 4a 0a 	call	0x1494	; 0x1494 <pwm_change_frequency_or_duty_cycle>
		pwm_start(ptr_str_pwm_config);
     ab6:	c8 01       	movw	r24, r16
     ab8:	0e 94 9b 09 	call	0x1336	; 0x1336 <pwm_start>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     abc:	f1 10       	cpse	r15, r1
     abe:	08 c0       	rjmp	.+16     	; 0xad0 <CAR_REVERSE_LEFT+0x46>
     ac0:	c1 11       	cpse	r28, r1
     ac2:	08 c0       	rjmp	.+16     	; 0xad4 <CAR_REVERSE_LEFT+0x4a>
*
* @note The function reverses motor 1 backward and motor 2 forward, then starts the PWM.
************************************************************************/
car_enu_return_state_t CAR_REVERSE_LEFT(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	07 c0       	rjmp	.+14     	; 0xad6 <CAR_REVERSE_LEFT+0x4c>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     ac8:	82 e0       	ldi	r24, 0x02	; 2
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <CAR_REVERSE_LEFT+0x4c>
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	03 c0       	rjmp	.+6      	; 0xad6 <CAR_REVERSE_LEFT+0x4c>
		enu_motor_error_1 = MOTOR_BACKWARD(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_FORWARD(ptr_str_motor_2);
		pwm_change_frequency_or_duty_cycle(ptr_str_pwm_config);
		pwm_start(ptr_str_pwm_config);
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	01 c0       	rjmp	.+2      	; 0xad6 <CAR_REVERSE_LEFT+0x4c>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	1f 91       	pop	r17
     adc:	0f 91       	pop	r16
     ade:	ff 90       	pop	r15
     ae0:	08 95       	ret

00000ae2 <CAR_STOP>:
*         - CAR_NULL_PTR: Car stop failed due to NULL pointers.
*
* @note The function stops both motors and the PWM.
************************************************************************/
car_enu_return_state_t CAR_STOP(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
     ae2:	ff 92       	push	r15
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
	car_enu_return_state_t enu_return_state=CAR_OK;
	motor_enu_return_state_t enu_motor_error_1;
	motor_enu_return_state_t enu_motor_error_2;
	if((ptr_str_motor_1 !=NULL) && (ptr_str_motor_2 != NULL))
     aec:	00 97       	sbiw	r24, 0x00	; 0
     aee:	a9 f0       	breq	.+42     	; 0xb1a <CAR_STOP+0x38>
     af0:	61 15       	cp	r22, r1
     af2:	71 05       	cpc	r23, r1
     af4:	a1 f0       	breq	.+40     	; 0xb1e <CAR_STOP+0x3c>
     af6:	8a 01       	movw	r16, r20
     af8:	eb 01       	movw	r28, r22
	{
		enu_motor_error_1 = MOTOR_STOP(ptr_str_motor_1);
     afa:	0e 94 1b 09 	call	0x1236	; 0x1236 <MOTOR_STOP>
     afe:	f8 2e       	mov	r15, r24
		enu_motor_error_2 = MOTOR_STOP(ptr_str_motor_2);
     b00:	ce 01       	movw	r24, r28
     b02:	0e 94 1b 09 	call	0x1236	; 0x1236 <MOTOR_STOP>
     b06:	c8 2f       	mov	r28, r24
		pwm_stop(ptr_str_pwm_config);
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 9a 0a 	call	0x1534	; 0x1534 <pwm_stop>
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
     b0e:	f1 10       	cpse	r15, r1
     b10:	08 c0       	rjmp	.+16     	; 0xb22 <CAR_STOP+0x40>
     b12:	c1 11       	cpse	r28, r1
     b14:	08 c0       	rjmp	.+16     	; 0xb26 <CAR_STOP+0x44>
*
* @note The function stops both motors and the PWM.
************************************************************************/
car_enu_return_state_t CAR_STOP(const motor_str_config_t *ptr_str_motor_1,const motor_str_config_t *ptr_str_motor_2, pwm_str_configuration_t *ptr_str_pwm_config)
{
	car_enu_return_state_t enu_return_state=CAR_OK;
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	07 c0       	rjmp	.+14     	; 0xb28 <CAR_STOP+0x46>
			
		}
	}
	else
	{
		enu_return_state=CAR_NULL_PTR;
     b1a:	82 e0       	ldi	r24, 0x02	; 2
     b1c:	05 c0       	rjmp	.+10     	; 0xb28 <CAR_STOP+0x46>
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	03 c0       	rjmp	.+6      	; 0xb28 <CAR_STOP+0x46>
	{
		enu_motor_error_1 = MOTOR_STOP(ptr_str_motor_1);
		enu_motor_error_2 = MOTOR_STOP(ptr_str_motor_2);
		pwm_stop(ptr_str_pwm_config);
		if((enu_motor_error_1 != MOTOR_OK) || (enu_motor_error_2 != MOTOR_OK)){
			enu_return_state=CAR_NOK;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	01 c0       	rjmp	.+2      	; 0xb28 <CAR_STOP+0x46>
     b26:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		enu_return_state=CAR_NULL_PTR;
	}
	return enu_return_state;
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	08 95       	ret

00000b34 <extim_init>:
 * @param ptr_callback_func Pointer to the callback function to be invoked on interrupt.
 * @return The initialization state of the external interrupt.
 *         - EXTIM_E_OK: External interrupt initialized successfully.
 *         - EXTIM_NULL_PTR: External interrupt initialization failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_init(extim_str_config_t *ptr_str_extim_config, ptr_to_v_fun_in_void_t ptr_callback_func){
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29

    extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
	
	if((ptr_str_extim_config != NULL) && (ptr_callback_func != NULL)){
     b38:	00 97       	sbiw	r24, 0x00	; 0
     b3a:	69 f0       	breq	.+26     	; 0xb56 <extim_init+0x22>
     b3c:	61 15       	cp	r22, r1
     b3e:	71 05       	cpc	r23, r1
     b40:	61 f0       	breq	.+24     	; 0xb5a <extim_init+0x26>
     b42:	ec 01       	movw	r28, r24
		ext_interrupt_set_callback_init(ptr_str_extim_config->enu_exti_interrupt_no , ptr_callback_func);
     b44:	88 81       	ld	r24, Y
     b46:	0e 94 d8 0e 	call	0x1db0	; 0x1db0 <ext_interrupt_set_callback_init>
		ext_interrupt_init(ptr_str_extim_config->enu_exti_interrupt_no, ptr_str_extim_config->enu_edge_detection);
     b4a:	69 81       	ldd	r22, Y+1	; 0x01
     b4c:	88 81       	ld	r24, Y
     b4e:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <ext_interrupt_init>
 *         - EXTIM_E_OK: External interrupt initialized successfully.
 *         - EXTIM_NULL_PTR: External interrupt initialization failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_init(extim_str_config_t *ptr_str_extim_config, ptr_to_v_fun_in_void_t ptr_callback_func){

    extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
     b52:	80 e0       	ldi	r24, 0x00	; 0
	
	if((ptr_str_extim_config != NULL) && (ptr_callback_func != NULL)){
		ext_interrupt_set_callback_init(ptr_str_extim_config->enu_exti_interrupt_no , ptr_callback_func);
		ext_interrupt_init(ptr_str_extim_config->enu_exti_interrupt_no, ptr_str_extim_config->enu_edge_detection);
     b54:	03 c0       	rjmp	.+6      	; 0xb5c <extim_init+0x28>
	}else{
		enu_return_state = EXTIM_NULL_PTR;
     b56:	82 e0       	ldi	r24, 0x02	; 2
     b58:	01 c0       	rjmp	.+2      	; 0xb5c <extim_init+0x28>
     b5a:	82 e0       	ldi	r24, 0x02	; 2
	}
    
    return enu_return_state;
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	08 95       	ret

00000b62 <extim_enable>:
 *         - EXTIM_NULL_PTR: External interrupt enabling failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_enable(extim_str_config_t *ptr_str_extim_config){
    
    extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
	if( ptr_str_extim_config != NULL ){
     b62:	00 97       	sbiw	r24, 0x00	; 0
     b64:	31 f0       	breq	.+12     	; 0xb72 <extim_enable+0x10>
     b66:	fc 01       	movw	r30, r24
		ext_interrupt_enable(ptr_str_extim_config->enu_exti_interrupt_no);
     b68:	80 81       	ld	r24, Z
     b6a:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <ext_interrupt_enable>
 *         - EXTIM_E_OK: External interrupt enabled successfully.
 *         - EXTIM_NULL_PTR: External interrupt enabling failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_enable(extim_str_config_t *ptr_str_extim_config){
    
    extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	08 95       	ret
	if( ptr_str_extim_config != NULL ){
		ext_interrupt_enable(ptr_str_extim_config->enu_exti_interrupt_no);
	}else{
		enu_return_state = EXTIM_NULL_PTR;
     b72:	82 e0       	ldi	r24, 0x02	; 2
	}
    return enu_return_state;
}
     b74:	08 95       	ret

00000b76 <extim_disable>:
 *         - EXTIM_NULL_PTR: External interrupt disabling failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_disable(extim_str_config_t *ptr_str_extim_config){

	extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
	if( ptr_str_extim_config != NULL ){
     b76:	00 97       	sbiw	r24, 0x00	; 0
     b78:	31 f0       	breq	.+12     	; 0xb86 <extim_disable+0x10>
     b7a:	fc 01       	movw	r30, r24
		ext_interrupt_disable(ptr_str_extim_config->enu_exti_interrupt_no);
     b7c:	80 81       	ld	r24, Z
     b7e:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <ext_interrupt_disable>
 *         - EXTIM_E_OK: External interrupt disabled successfully.
 *         - EXTIM_NULL_PTR: External interrupt disabling failed due to a NULL pointer.
 */
extim_enu_return_state_t extim_disable(extim_str_config_t *ptr_str_extim_config){

	extim_enu_return_state_t enu_return_state = EXTIM_E_OK;
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	08 95       	ret
	if( ptr_str_extim_config != NULL ){
		ext_interrupt_disable(ptr_str_extim_config->enu_exti_interrupt_no);
	}else{
		enu_return_state = EXTIM_NULL_PTR;
     b86:	82 e0       	ldi	r24, 0x02	; 2
	}
    return enu_return_state;
}
     b88:	08 95       	ret

00000b8a <delay_3_ms>:
 * The loop counter is declared as 'volatile' to prevent compiler optimization.
 *
 * @note The actual delay period may vary based on factors such as the processor clock frequency.
 * This delay method is not accurate and may not be suitable for precise timing requirements.
 */
void delay_3_ms(void){
     b8a:	cf 93       	push	r28
     b8c:	df 93       	push	r29
     b8e:	00 d0       	rcall	.+0      	; 0xb90 <delay_3_ms+0x6>
     b90:	00 d0       	rcall	.+0      	; 0xb92 <delay_3_ms+0x8>
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
	static uint32_t u32_desired_ticks = 5000;
	for(volatile uint32_t u32_counter = 0; u32_counter < u32_desired_ticks; u32_counter++);
     b96:	19 82       	std	Y+1, r1	; 0x01
     b98:	1a 82       	std	Y+2, r1	; 0x02
     b9a:	1b 82       	std	Y+3, r1	; 0x03
     b9c:	1c 82       	std	Y+4, r1	; 0x04
     b9e:	0b c0       	rjmp	.+22     	; 0xbb6 <delay_3_ms+0x2c>
     ba0:	89 81       	ldd	r24, Y+1	; 0x01
     ba2:	9a 81       	ldd	r25, Y+2	; 0x02
     ba4:	ab 81       	ldd	r26, Y+3	; 0x03
     ba6:	bc 81       	ldd	r27, Y+4	; 0x04
     ba8:	01 96       	adiw	r24, 0x01	; 1
     baa:	a1 1d       	adc	r26, r1
     bac:	b1 1d       	adc	r27, r1
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	ab 83       	std	Y+3, r26	; 0x03
     bb4:	bc 83       	std	Y+4, r27	; 0x04
     bb6:	89 81       	ldd	r24, Y+1	; 0x01
     bb8:	9a 81       	ldd	r25, Y+2	; 0x02
     bba:	ab 81       	ldd	r26, Y+3	; 0x03
     bbc:	bc 81       	ldd	r27, Y+4	; 0x04
     bbe:	88 38       	cpi	r24, 0x88	; 136
     bc0:	93 41       	sbci	r25, 0x13	; 19
     bc2:	a1 05       	cpc	r26, r1
     bc4:	b1 05       	cpc	r27, r1
     bc6:	60 f3       	brcs	.-40     	; 0xba0 <delay_3_ms+0x16>
	
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <ENABLE>:
 * @note This function is a part of the mechanism to enable the LCD for data or command transmission.
 * It generates the necessary pulse on the 'E' signal to initiate the read or write operation.
 * A short delay is included after setting 'E' high and before setting it low again to ensure proper timing.
 */
void ENABLE(lcd_str_config_t* ptr_str_config)
{
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	ec 01       	movw	r28, r24
	
	DIO_write_pin(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_HIGH_LEVEL);
     bdc:	41 e0       	ldi	r20, 0x01	; 1
     bde:	6e 89       	ldd	r22, Y+22	; 0x16
     be0:	8d 89       	ldd	r24, Y+21	; 0x15
     be2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	delay_3_ms();
     be6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
	DIO_write_pin(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_LOW_LEVEL);
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	6e 89       	ldd	r22, Y+22	; 0x16
     bee:	8d 89       	ldd	r24, Y+21	; 0x15
     bf0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>


}
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <LCD_cmd>:
 * @note This function handles the transmission of the command to the LCD display.
 * It uses control signals like 'E', 'RS', and 'RW' to manage the data transmission.
 * Depending on the LCD's mode, it uses the appropriate number of data pins to transmit the command.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     bfa:	ff 92       	push	r15
     bfc:	0f 93       	push	r16
     bfe:	1f 93       	push	r17
     c00:	cf 93       	push	r28
     c02:	df 93       	push	r29
     c04:	ec 01       	movw	r28, r24
     c06:	06 2f       	mov	r16, r22
	lcd_enu_return_state_t u8_bit_counter = LCD_MSB_INDEX;
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
     c08:	40 e0       	ldi	r20, 0x00	; 0
     c0a:	6e 89       	ldd	r22, Y+22	; 0x16
     c0c:	8d 89       	ldd	r24, Y+21	; 0x15
     c0e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_LOW_LEVEL);
     c12:	40 e0       	ldi	r20, 0x00	; 0
     c14:	6a 89       	ldd	r22, Y+18	; 0x12
     c16:	89 89       	ldd	r24, Y+17	; 0x11
     c18:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	6c 89       	ldd	r22, Y+20	; 0x14
     c20:	8b 89       	ldd	r24, Y+19	; 0x13
     c22:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     c26:	88 81       	ld	r24, Y
     c28:	88 23       	and	r24, r24
     c2a:	09 f4       	brne	.+2      	; 0xc2e <LCD_cmd+0x34>
     c2c:	41 c0       	rjmp	.+130    	; 0xcb0 <LCD_cmd+0xb6>
     c2e:	9b c0       	rjmp	.+310    	; 0xd66 <LCD_cmd+0x16c>
	{
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4 - U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	01 2e       	mov	r0, r17
     c36:	02 c0       	rjmp	.+4      	; 0xc3c <LCD_cmd+0x42>
     c38:	88 0f       	add	r24, r24
     c3a:	99 1f       	adc	r25, r25
     c3c:	0a 94       	dec	r0
     c3e:	e2 f7       	brpl	.-8      	; 0xc38 <LCD_cmd+0x3e>
     c40:	20 2f       	mov	r18, r16
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	82 23       	and	r24, r18
     c46:	93 23       	and	r25, r19
     c48:	01 2e       	mov	r0, r17
     c4a:	02 c0       	rjmp	.+4      	; 0xc50 <LCD_cmd+0x56>
     c4c:	95 95       	asr	r25
     c4e:	87 95       	ror	r24
     c50:	0a 94       	dec	r0
     c52:	e2 f7       	brpl	.-8      	; 0xc4c <LCD_cmd+0x52>
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	a9 f4       	brne	.+42     	; 0xc82 <LCD_cmd+0x88>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     c58:	8f 2d       	mov	r24, r15
     c5a:	0f 2c       	mov	r0, r15
     c5c:	00 0c       	add	r0, r0
     c5e:	99 0b       	sbc	r25, r25
     c60:	dc 01       	movw	r26, r24
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	aa 0f       	add	r26, r26
     c66:	bb 1f       	adc	r27, r27
     c68:	ac 0f       	add	r26, r28
     c6a:	bd 1f       	adc	r27, r29
     c6c:	88 0f       	add	r24, r24
     c6e:	99 1f       	adc	r25, r25
     c70:	fe 01       	movw	r30, r28
     c72:	e8 0f       	add	r30, r24
     c74:	f9 1f       	adc	r31, r25
     c76:	41 e0       	ldi	r20, 0x01	; 1
     c78:	6c 91       	ld	r22, X
     c7a:	81 81       	ldd	r24, Z+1	; 0x01
     c7c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
     c80:	14 c0       	rjmp	.+40     	; 0xcaa <LCD_cmd+0xb0>
			}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     c82:	8f 2d       	mov	r24, r15
     c84:	0f 2c       	mov	r0, r15
     c86:	00 0c       	add	r0, r0
     c88:	99 0b       	sbc	r25, r25
     c8a:	dc 01       	movw	r26, r24
     c8c:	11 96       	adiw	r26, 0x01	; 1
     c8e:	aa 0f       	add	r26, r26
     c90:	bb 1f       	adc	r27, r27
     c92:	ac 0f       	add	r26, r28
     c94:	bd 1f       	adc	r27, r29
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	fe 01       	movw	r30, r28
     c9c:	e8 0f       	add	r30, r24
     c9e:	f9 1f       	adc	r31, r25
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	6c 91       	ld	r22, X
     ca4:	81 81       	ldd	r24, Z+1	; 0x01
     ca6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
			}
			u8_bit_counter--;
     caa:	11 50       	subi	r17, 0x01	; 1
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_LOW_LEVEL);
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4 - U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     cac:	fa 94       	dec	r15
     cae:	05 c0       	rjmp	.+10     	; 0xcba <LCD_cmd+0xc0>
     cb0:	0f 2e       	mov	r0, r31
     cb2:	f3 e0       	ldi	r31, 0x03	; 3
     cb4:	ff 2e       	mov	r15, r31
     cb6:	f0 2d       	mov	r31, r0
     cb8:	17 e0       	ldi	r17, 0x07	; 7
     cba:	ff 20       	and	r15, r15
     cbc:	0c f0       	brlt	.+2      	; 0xcc0 <LCD_cmd+0xc6>
     cbe:	b8 cf       	rjmp	.-144    	; 0xc30 <LCD_cmd+0x36>
			}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     cc0:	ce 01       	movw	r24, r28
     cc2:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();
     cc6:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
	   for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     cca:	0f 2e       	mov	r0, r31
     ccc:	f3 e0       	ldi	r31, 0x03	; 3
     cce:	ff 2e       	mov	r15, r31
     cd0:	f0 2d       	mov	r31, r0
     cd2:	3f c0       	rjmp	.+126    	; 0xd52 <LCD_cmd+0x158>
		   if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     cd4:	81 e0       	ldi	r24, 0x01	; 1
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	01 2e       	mov	r0, r17
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <LCD_cmd+0xe6>
     cdc:	88 0f       	add	r24, r24
     cde:	99 1f       	adc	r25, r25
     ce0:	0a 94       	dec	r0
     ce2:	e2 f7       	brpl	.-8      	; 0xcdc <LCD_cmd+0xe2>
     ce4:	20 2f       	mov	r18, r16
     ce6:	30 e0       	ldi	r19, 0x00	; 0
     ce8:	82 23       	and	r24, r18
     cea:	93 23       	and	r25, r19
     cec:	01 2e       	mov	r0, r17
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <LCD_cmd+0xfa>
     cf0:	95 95       	asr	r25
     cf2:	87 95       	ror	r24
     cf4:	0a 94       	dec	r0
     cf6:	e2 f7       	brpl	.-8      	; 0xcf0 <LCD_cmd+0xf6>
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	a9 f4       	brne	.+42     	; 0xd26 <LCD_cmd+0x12c>
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     cfc:	8f 2d       	mov	r24, r15
     cfe:	0f 2c       	mov	r0, r15
     d00:	00 0c       	add	r0, r0
     d02:	99 0b       	sbc	r25, r25
     d04:	dc 01       	movw	r26, r24
     d06:	11 96       	adiw	r26, 0x01	; 1
     d08:	aa 0f       	add	r26, r26
     d0a:	bb 1f       	adc	r27, r27
     d0c:	ac 0f       	add	r26, r28
     d0e:	bd 1f       	adc	r27, r29
     d10:	88 0f       	add	r24, r24
     d12:	99 1f       	adc	r25, r25
     d14:	fe 01       	movw	r30, r28
     d16:	e8 0f       	add	r30, r24
     d18:	f9 1f       	adc	r31, r25
     d1a:	41 e0       	ldi	r20, 0x01	; 1
     d1c:	6c 91       	ld	r22, X
     d1e:	81 81       	ldd	r24, Z+1	; 0x01
     d20:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
     d24:	14 c0       	rjmp	.+40     	; 0xd4e <LCD_cmd+0x154>
			}else{
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     d26:	8f 2d       	mov	r24, r15
     d28:	0f 2c       	mov	r0, r15
     d2a:	00 0c       	add	r0, r0
     d2c:	99 0b       	sbc	r25, r25
     d2e:	dc 01       	movw	r26, r24
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	aa 0f       	add	r26, r26
     d34:	bb 1f       	adc	r27, r27
     d36:	ac 0f       	add	r26, r28
     d38:	bd 1f       	adc	r27, r29
     d3a:	88 0f       	add	r24, r24
     d3c:	99 1f       	adc	r25, r25
     d3e:	fe 01       	movw	r30, r28
     d40:	e8 0f       	add	r30, r24
     d42:	f9 1f       	adc	r31, r25
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	6c 91       	ld	r22, X
     d48:	81 81       	ldd	r24, Z+1	; 0x01
     d4a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
		   }
		   u8_bit_counter--;
     d4e:	11 50       	subi	r17, 0x01	; 1
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
		delay_3_ms();
	   for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     d50:	fa 94       	dec	r15
     d52:	ff 20       	and	r15, r15
     d54:	0c f0       	brlt	.+2      	; 0xd58 <LCD_cmd+0x15e>
     d56:	be cf       	rjmp	.-132    	; 0xcd4 <LCD_cmd+0xda>
			}else{
			   DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
		   }
		   u8_bit_counter--;
	   }
		ENABLE(ptr_str_config);
     d58:	ce 01       	movw	r24, r28
     d5a:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();
     d5e:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
 * @note This function handles the transmission of the command to the LCD display.
 * It uses control signals like 'E', 'RS', and 'RW' to manage the data transmission.
 * Depending on the LCD's mode, it uses the appropriate number of data pins to transmit the command.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     d62:	c0 e0       	ldi	r28, 0x00	; 0
     d64:	4e c0       	rjmp	.+156    	; 0xe02 <LCD_cmd+0x208>
		   u8_bit_counter--;
	   }
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
     d66:	81 30       	cpi	r24, 0x01	; 1
     d68:	f1 f1       	breq	.+124    	; 0xde6 <LCD_cmd+0x1ec>
		delay_3_ms();	
	}
	else
	{
		//do nothing
		enu_return_state=LCD_E_NOT_OK;
     d6a:	c1 e0       	ldi	r28, 0x01	; 1
     d6c:	4a c0       	rjmp	.+148    	; 0xe02 <LCD_cmd+0x208>
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0f 2c       	mov	r0, r15
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <LCD_cmd+0x180>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <LCD_cmd+0x17c>
     d7e:	20 2f       	mov	r18, r16
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	82 23       	and	r24, r18
     d84:	93 23       	and	r25, r19
     d86:	0f 2c       	mov	r0, r15
     d88:	02 c0       	rjmp	.+4      	; 0xd8e <LCD_cmd+0x194>
     d8a:	95 95       	asr	r25
     d8c:	87 95       	ror	r24
     d8e:	0a 94       	dec	r0
     d90:	e2 f7       	brpl	.-8      	; 0xd8a <LCD_cmd+0x190>
     d92:	01 97       	sbiw	r24, 0x01	; 1
     d94:	99 f4       	brne	.+38     	; 0xdbc <LCD_cmd+0x1c2>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     d96:	81 2f       	mov	r24, r17
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	dc 01       	movw	r26, r24
     d9c:	11 96       	adiw	r26, 0x01	; 1
     d9e:	aa 0f       	add	r26, r26
     da0:	bb 1f       	adc	r27, r27
     da2:	ac 0f       	add	r26, r28
     da4:	bd 1f       	adc	r27, r29
     da6:	88 0f       	add	r24, r24
     da8:	99 1f       	adc	r25, r25
     daa:	fe 01       	movw	r30, r28
     dac:	e8 0f       	add	r30, r24
     dae:	f9 1f       	adc	r31, r25
     db0:	41 e0       	ldi	r20, 0x01	; 1
     db2:	6c 91       	ld	r22, X
     db4:	81 81       	ldd	r24, Z+1	; 0x01
     db6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
     dba:	12 c0       	rjmp	.+36     	; 0xde0 <LCD_cmd+0x1e6>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     dbc:	81 2f       	mov	r24, r17
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	dc 01       	movw	r26, r24
     dc2:	11 96       	adiw	r26, 0x01	; 1
     dc4:	aa 0f       	add	r26, r26
     dc6:	bb 1f       	adc	r27, r27
     dc8:	ac 0f       	add	r26, r28
     dca:	bd 1f       	adc	r27, r29
     dcc:	88 0f       	add	r24, r24
     dce:	99 1f       	adc	r25, r25
     dd0:	fe 01       	movw	r30, r28
     dd2:	e8 0f       	add	r30, r24
     dd4:	f9 1f       	adc	r31, r25
     dd6:	40 e0       	ldi	r20, 0x00	; 0
     dd8:	6c 91       	ld	r22, X
     dda:	81 81       	ldd	r24, Z+1	; 0x01
     ddc:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
			}
			u8_bit_counter--;
     de0:	fa 94       	dec	r15
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
     de2:	1f 5f       	subi	r17, 0xFF	; 255
     de4:	05 c0       	rjmp	.+10     	; 0xdf0 <LCD_cmd+0x1f6>
     de6:	10 e0       	ldi	r17, 0x00	; 0
     de8:	0f 2e       	mov	r0, r31
     dea:	f7 e0       	ldi	r31, 0x07	; 7
     dec:	ff 2e       	mov	r15, r31
     dee:	f0 2d       	mov	r31, r0
     df0:	18 30       	cpi	r17, 0x08	; 8
     df2:	08 f4       	brcc	.+2      	; 0xdf6 <LCD_cmd+0x1fc>
     df4:	bc cf       	rjmp	.-136    	; 0xd6e <LCD_cmd+0x174>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
     df6:	ce 01       	movw	r24, r28
     df8:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();	
     dfc:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
 * @note This function handles the transmission of the command to the LCD display.
 * It uses control signals like 'E', 'RS', and 'RW' to manage the data transmission.
 * Depending on the LCD's mode, it uses the appropriate number of data pins to transmit the command.
 */
lcd_enu_return_state_t LCD_cmd(lcd_str_config_t *ptr_str_config,uint8_t cmd)
{   lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     e00:	c0 e0       	ldi	r28, 0x00	; 0
	else
	{
		//do nothing
		enu_return_state=LCD_E_NOT_OK;
	}
	delay_3_ms();
     e02:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
	return enu_return_state;
}
     e06:	8c 2f       	mov	r24, r28
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	08 95       	ret

00000e14 <LCD_init>:
 *
 * @note The LCD configuration structure contains pin information for control pins (RS, RW, E) and data pins,
 * as well as the LCD mode (4-bit or 8-bit).
 */
lcd_enu_return_state_t LCD_init(lcd_str_config_t* ptr_str_config)
{
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	ec 01       	movw	r28, r24
	lcd_enu_return_state_t enu_return_state = LCD_E_OK;
	
	enu_return_state |=DIO_init(ptr_str_config->str_RSpin.enu_port, ptr_str_config->str_RSpin.enu_pin, DIO_PIN_OUTPUT);
     e1e:	41 e0       	ldi	r20, 0x01	; 1
     e20:	6a 89       	ldd	r22, Y+18	; 0x12
     e22:	89 89       	ldd	r24, Y+17	; 0x11
     e24:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
     e28:	18 2f       	mov	r17, r24
	enu_return_state |=DIO_init(ptr_str_config->str_RWpin.enu_port, ptr_str_config->str_RWpin.enu_pin, DIO_PIN_OUTPUT);
     e2a:	41 e0       	ldi	r20, 0x01	; 1
     e2c:	6c 89       	ldd	r22, Y+20	; 0x14
     e2e:	8b 89       	ldd	r24, Y+19	; 0x13
     e30:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
     e34:	18 2b       	or	r17, r24
	enu_return_state |=DIO_init(ptr_str_config->str_Epin.enu_port, ptr_str_config->str_Epin.enu_pin, DIO_PIN_OUTPUT);
     e36:	41 e0       	ldi	r20, 0x01	; 1
     e38:	6e 89       	ldd	r22, Y+22	; 0x16
     e3a:	8d 89       	ldd	r24, Y+21	; 0x15
     e3c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
     e40:	18 2b       	or	r17, r24
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     e42:	88 81       	ld	r24, Y
     e44:	88 23       	and	r24, r24
     e46:	b1 f0       	breq	.+44     	; 0xe74 <LCD_init+0x60>
     e48:	2d c0       	rjmp	.+90     	; 0xea4 <LCD_init+0x90>
	{
		
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_4; u8_counter++){
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
     e4a:	20 2f       	mov	r18, r16
     e4c:	30 e0       	ldi	r19, 0x00	; 0
     e4e:	d9 01       	movw	r26, r18
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	aa 0f       	add	r26, r26
     e54:	bb 1f       	adc	r27, r27
     e56:	ac 0f       	add	r26, r28
     e58:	bd 1f       	adc	r27, r29
     e5a:	22 0f       	add	r18, r18
     e5c:	33 1f       	adc	r19, r19
     e5e:	fe 01       	movw	r30, r28
     e60:	e2 0f       	add	r30, r18
     e62:	f3 1f       	adc	r31, r19
     e64:	41 e0       	ldi	r20, 0x01	; 1
     e66:	6c 91       	ld	r22, X
     e68:	81 81       	ldd	r24, Z+1	; 0x01
     e6a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
     e6e:	18 2b       	or	r17, r24
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		
		
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_4; u8_counter++){
     e70:	0f 5f       	subi	r16, 0xFF	; 255
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <LCD_init+0x62>
     e74:	00 e0       	ldi	r16, 0x00	; 0
     e76:	04 30       	cpi	r16, 0x04	; 4
     e78:	40 f3       	brcs	.-48     	; 0xe4a <LCD_init+0x36>
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
		}
		LCD_cmd(ptr_str_config, LCD_CMD_CURSOR_HOME);
     e7a:	62 e0       	ldi	r22, 0x02	; 2
     e7c:	ce 01       	movw	r24, r28
     e7e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_4BITS_2LINES_58DM);
     e82:	68 e2       	ldi	r22, 0x28	; 40
     e84:	ce 01       	movw	r24, r28
     e86:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
     e8a:	6c e0       	ldi	r22, 0x0C	; 12
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
     e92:	66 e0       	ldi	r22, 0x06	; 6
     e94:	ce 01       	movw	r24, r28
     e96:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
     e9a:	61 e0       	ldi	r22, 0x01	; 1
     e9c:	ce 01       	movw	r24, r28
     e9e:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
     ea2:	2c c0       	rjmp	.+88     	; 0xefc <LCD_init+0xe8>
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
     ea4:	81 30       	cpi	r24, 0x01	; 1
     ea6:	b9 f0       	breq	.+46     	; 0xed6 <LCD_init+0xc2>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);
							
	}else{
		enu_return_state=LCD_E_NOT_OK;						
     ea8:	11 e0       	ldi	r17, 0x01	; 1
     eaa:	28 c0       	rjmp	.+80     	; 0xefc <LCD_init+0xe8>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
     eac:	80 2f       	mov	r24, r16
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	dc 01       	movw	r26, r24
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	aa 0f       	add	r26, r26
     eb6:	bb 1f       	adc	r27, r27
     eb8:	ac 0f       	add	r26, r28
     eba:	bd 1f       	adc	r27, r29
     ebc:	88 0f       	add	r24, r24
     ebe:	99 1f       	adc	r25, r25
     ec0:	fe 01       	movw	r30, r28
     ec2:	e8 0f       	add	r30, r24
     ec4:	f9 1f       	adc	r31, r25
     ec6:	41 e0       	ldi	r20, 0x01	; 1
     ec8:	6c 91       	ld	r22, X
     eca:	81 81       	ldd	r24, Z+1	; 0x01
     ecc:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
     ed0:	18 2b       	or	r17, r24
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);						
								
	}else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE){
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
     ed2:	0f 5f       	subi	r16, 0xFF	; 255
     ed4:	01 c0       	rjmp	.+2      	; 0xed8 <LCD_init+0xc4>
     ed6:	00 e0       	ldi	r16, 0x00	; 0
     ed8:	08 30       	cpi	r16, 0x08	; 8
     eda:	40 f3       	brcs	.-48     	; 0xeac <LCD_init+0x98>
			enu_return_state |=DIO_init(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin, DIO_PIN_OUTPUT);
		}
		LCD_cmd(ptr_str_config, LCD_8BITS_2LINES_58DM);
     edc:	68 e3       	ldi	r22, 0x38	; 56
     ede:	ce 01       	movw	r24, r28
     ee0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_DISPLAY_ON_CUR_OFF_BLOCK_OFF);
     ee4:	6c e0       	ldi	r22, 0x0C	; 12
     ee6:	ce 01       	movw	r24, r28
     ee8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_ENTRY_MODE_INCREMENT_ON_SHIFT_OFF);
     eec:	66 e0       	ldi	r22, 0x06	; 6
     eee:	ce 01       	movw	r24, r28
     ef0:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
		LCD_cmd(ptr_str_config, LCD_CMD_CLEAR);
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	ce 01       	movw	r24, r28
     ef8:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
							
	}else{
		enu_return_state=LCD_E_NOT_OK;						
	}
	return enu_return_state;
}
     efc:	81 2f       	mov	r24, r17
     efe:	df 91       	pop	r29
     f00:	cf 91       	pop	r28
     f02:	1f 91       	pop	r17
     f04:	0f 91       	pop	r16
     f06:	08 95       	ret

00000f08 <LCD_clear>:
 *
 * @note This function sends the clear command and then introduces a delay of approximately 3 milliseconds
 * to ensure the clear operation completes before returning.
 */
lcd_enu_return_state_t LCD_clear (lcd_str_config_t* ptr_str_config)
{
     f08:	cf 93       	push	r28

	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	enu_return_state |= LCD_cmd(ptr_str_config,LCD_CMD_CLEAR);
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
     f10:	c8 2f       	mov	r28, r24
	delay_3_ms();
     f12:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
	return enu_return_state;

}
     f16:	8c 2f       	mov	r24, r28
     f18:	cf 91       	pop	r28
     f1a:	08 95       	ret

00000f1c <LCD_setCursor>:
 * and sends the command to set the cursor position to that address on the LCD.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	if(copy_enu_row == LCD_ROW_1)
     f1c:	61 11       	cpse	r22, r1
     f1e:	06 c0       	rjmp	.+12     	; 0xf2c <LCD_setCursor+0x10>
	{
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_1 + copy_enu_col);
     f20:	60 e8       	ldi	r22, 0x80	; 128
     f22:	64 0f       	add	r22, r20
     f24:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
 * @note The function calculates the appropriate DDRAM address for the specified row and column indices,
 * and sends the command to set the cursor position to that address on the LCD.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	08 95       	ret
	if(copy_enu_row == LCD_ROW_1)
	{
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_1 + copy_enu_col);
		
	}else if(copy_enu_row == LCD_ROW_2){
     f2c:	61 30       	cpi	r22, 0x01	; 1
     f2e:	31 f4       	brne	.+12     	; 0xf3c <LCD_setCursor+0x20>
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_2 + copy_enu_col);	
     f30:	60 ec       	ldi	r22, 0xC0	; 192
     f32:	64 0f       	add	r22, r20
     f34:	0e 94 fd 05 	call	0xbfa	; 0xbfa <LCD_cmd>
 * @note The function calculates the appropriate DDRAM address for the specified row and column indices,
 * and sends the command to set the cursor position to that address on the LCD.
 */
lcd_enu_return_state_t LCD_setCursor (lcd_str_config_t* ptr_str_config, lcd_enu_row_select_t copy_enu_row, lcd_enu_col_select_t copy_enu_col)
{
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	08 95       	ret
	}else if(copy_enu_row == LCD_ROW_2){
		LCD_cmd(ptr_str_config, LCD_DDRAM_START_ADD_LINE_2 + copy_enu_col);	

	}else{
		
		enu_return_state=LCD_E_NOT_OK;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
	}

	return enu_return_state;

}
     f3e:	08 95       	ret

00000f40 <LCD_char>:
 * It uses control signals 'E', 'RS', and 'RW' to manage the data transmission. Depending on
 * the LCD's mode, it uses the appropriate number of data pins to transmit the character's ASCII code.
 */

  void LCD_char(lcd_str_config_t *ptr_str_config, uint8_t cmd)
{
     f40:	ff 92       	push	r15
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	ec 01       	movw	r28, r24
     f4c:	06 2f       	mov	r16, r22
	lcd_enu_return_state_t u8_bit_counter = LCD_MSB_INDEX;
	DIO_write_pin(ptr_str_config->str_Epin.enu_port,ptr_str_config->str_Epin.enu_pin,DIO_PIN_LOW_LEVEL);
     f4e:	40 e0       	ldi	r20, 0x00	; 0
     f50:	6e 89       	ldd	r22, Y+22	; 0x16
     f52:	8d 89       	ldd	r24, Y+21	; 0x15
     f54:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RSpin.enu_port,ptr_str_config->str_RSpin.enu_pin,DIO_PIN_HIGH_LEVEL);
     f58:	41 e0       	ldi	r20, 0x01	; 1
     f5a:	6a 89       	ldd	r22, Y+18	; 0x12
     f5c:	89 89       	ldd	r24, Y+17	; 0x11
     f5e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	DIO_write_pin(ptr_str_config->str_RWpin.enu_port,ptr_str_config->str_RWpin.enu_pin,DIO_PIN_LOW_LEVEL);
     f62:	40 e0       	ldi	r20, 0x00	; 0
     f64:	6c 89       	ldd	r22, Y+20	; 0x14
     f66:	8b 89       	ldd	r24, Y+19	; 0x13
     f68:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
     f6c:	88 81       	ld	r24, Y
     f6e:	88 23       	and	r24, r24
     f70:	09 f4       	brne	.+2      	; 0xf74 <LCD_char+0x34>
     f72:	41 c0       	rjmp	.+130    	; 0xff6 <LCD_char+0xb6>
     f74:	9a c0       	rjmp	.+308    	; 0x10aa <LCD_char+0x16a>
	{
		
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	01 2e       	mov	r0, r17
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <LCD_char+0x42>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <LCD_char+0x3e>
     f86:	20 2f       	mov	r18, r16
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	82 23       	and	r24, r18
     f8c:	93 23       	and	r25, r19
     f8e:	01 2e       	mov	r0, r17
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <LCD_char+0x56>
     f92:	95 95       	asr	r25
     f94:	87 95       	ror	r24
     f96:	0a 94       	dec	r0
     f98:	e2 f7       	brpl	.-8      	; 0xf92 <LCD_char+0x52>
     f9a:	01 97       	sbiw	r24, 0x01	; 1
     f9c:	a9 f4       	brne	.+42     	; 0xfc8 <LCD_char+0x88>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
     f9e:	8f 2d       	mov	r24, r15
     fa0:	0f 2c       	mov	r0, r15
     fa2:	00 0c       	add	r0, r0
     fa4:	99 0b       	sbc	r25, r25
     fa6:	dc 01       	movw	r26, r24
     fa8:	11 96       	adiw	r26, 0x01	; 1
     faa:	aa 0f       	add	r26, r26
     fac:	bb 1f       	adc	r27, r27
     fae:	ac 0f       	add	r26, r28
     fb0:	bd 1f       	adc	r27, r29
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	fe 01       	movw	r30, r28
     fb8:	e8 0f       	add	r30, r24
     fba:	f9 1f       	adc	r31, r25
     fbc:	41 e0       	ldi	r20, 0x01	; 1
     fbe:	6c 91       	ld	r22, X
     fc0:	81 81       	ldd	r24, Z+1	; 0x01
     fc2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <LCD_char+0xb0>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
     fc8:	8f 2d       	mov	r24, r15
     fca:	0f 2c       	mov	r0, r15
     fcc:	00 0c       	add	r0, r0
     fce:	99 0b       	sbc	r25, r25
     fd0:	dc 01       	movw	r26, r24
     fd2:	11 96       	adiw	r26, 0x01	; 1
     fd4:	aa 0f       	add	r26, r26
     fd6:	bb 1f       	adc	r27, r27
     fd8:	ac 0f       	add	r26, r28
     fda:	bd 1f       	adc	r27, r29
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	fe 01       	movw	r30, r28
     fe2:	e8 0f       	add	r30, r24
     fe4:	f9 1f       	adc	r31, r25
     fe6:	40 e0       	ldi	r20, 0x00	; 0
     fe8:	6c 91       	ld	r22, X
     fea:	81 81       	ldd	r24, Z+1	; 0x01
     fec:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
			}
			u8_bit_counter--;
     ff0:	11 50       	subi	r17, 0x01	; 1
	
	
	if(ptr_str_config->enu_mode == LCD_4_BIT_MODE)
	{
		
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
     ff2:	fa 94       	dec	r15
     ff4:	05 c0       	rjmp	.+10     	; 0x1000 <LCD_char+0xc0>
     ff6:	0f 2e       	mov	r0, r31
     ff8:	f3 e0       	ldi	r31, 0x03	; 3
     ffa:	ff 2e       	mov	r15, r31
     ffc:	f0 2d       	mov	r31, r0
     ffe:	17 e0       	ldi	r17, 0x07	; 7
    1000:	ff 20       	and	r15, r15
    1002:	0c f0       	brlt	.+2      	; 0x1006 <LCD_char+0xc6>
    1004:	b8 cf       	rjmp	.-144    	; 0xf76 <LCD_char+0x36>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
    1006:	ce 01       	movw	r24, r28
    1008:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();
    100c:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
    1010:	0f 2e       	mov	r0, r31
    1012:	f3 e0       	ldi	r31, 0x03	; 3
    1014:	ff 2e       	mov	r15, r31
    1016:	f0 2d       	mov	r31, r0
    1018:	3f c0       	rjmp	.+126    	; 0x1098 <LCD_char+0x158>
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
    101a:	81 e0       	ldi	r24, 0x01	; 1
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	01 2e       	mov	r0, r17
    1020:	02 c0       	rjmp	.+4      	; 0x1026 <LCD_char+0xe6>
    1022:	88 0f       	add	r24, r24
    1024:	99 1f       	adc	r25, r25
    1026:	0a 94       	dec	r0
    1028:	e2 f7       	brpl	.-8      	; 0x1022 <LCD_char+0xe2>
    102a:	20 2f       	mov	r18, r16
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	82 23       	and	r24, r18
    1030:	93 23       	and	r25, r19
    1032:	01 2e       	mov	r0, r17
    1034:	02 c0       	rjmp	.+4      	; 0x103a <LCD_char+0xfa>
    1036:	95 95       	asr	r25
    1038:	87 95       	ror	r24
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <LCD_char+0xf6>
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	a9 f4       	brne	.+42     	; 0x106c <LCD_char+0x12c>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
    1042:	8f 2d       	mov	r24, r15
    1044:	0f 2c       	mov	r0, r15
    1046:	00 0c       	add	r0, r0
    1048:	99 0b       	sbc	r25, r25
    104a:	dc 01       	movw	r26, r24
    104c:	11 96       	adiw	r26, 0x01	; 1
    104e:	aa 0f       	add	r26, r26
    1050:	bb 1f       	adc	r27, r27
    1052:	ac 0f       	add	r26, r28
    1054:	bd 1f       	adc	r27, r29
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	fe 01       	movw	r30, r28
    105c:	e8 0f       	add	r30, r24
    105e:	f9 1f       	adc	r31, r25
    1060:	41 e0       	ldi	r20, 0x01	; 1
    1062:	6c 91       	ld	r22, X
    1064:	81 81       	ldd	r24, Z+1	; 0x01
    1066:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <LCD_char+0x154>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
    106c:	8f 2d       	mov	r24, r15
    106e:	0f 2c       	mov	r0, r15
    1070:	00 0c       	add	r0, r0
    1072:	99 0b       	sbc	r25, r25
    1074:	dc 01       	movw	r26, r24
    1076:	11 96       	adiw	r26, 0x01	; 1
    1078:	aa 0f       	add	r26, r26
    107a:	bb 1f       	adc	r27, r27
    107c:	ac 0f       	add	r26, r28
    107e:	bd 1f       	adc	r27, r29
    1080:	88 0f       	add	r24, r24
    1082:	99 1f       	adc	r25, r25
    1084:	fe 01       	movw	r30, r28
    1086:	e8 0f       	add	r30, r24
    1088:	f9 1f       	adc	r31, r25
    108a:	40 e0       	ldi	r20, 0x00	; 0
    108c:	6c 91       	ld	r22, X
    108e:	81 81       	ldd	r24, Z+1	; 0x01
    1090:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
			}
			u8_bit_counter--;
    1094:	11 50       	subi	r17, 0x01	; 1
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
		delay_3_ms();
		for(sint8_t u8_counter = LCD_MAX_DATA_PINS_MOD_4-U8_ONE_VALUE; u8_counter >= U8_ZERO_VALUE; u8_counter--){
    1096:	fa 94       	dec	r15
    1098:	ff 20       	and	r15, r15
    109a:	0c f0       	brlt	.+2      	; 0x109e <LCD_char+0x15e>
    109c:	be cf       	rjmp	.-132    	; 0x101a <LCD_char+0xda>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
    109e:	ce 01       	movw	r24, r28
    10a0:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();
    10a4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
    10a8:	4d c0       	rjmp	.+154    	; 0x1144 <LCD_char+0x204>
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <LCD_char+0x170>
    10ae:	4a c0       	rjmp	.+148    	; 0x1144 <LCD_char+0x204>
    10b0:	3c c0       	rjmp	.+120    	; 0x112a <LCD_char+0x1ea>
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
			if(READ_BIT(cmd,u8_bit_counter) == U8_ONE_VALUE){
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	0f 2c       	mov	r0, r15
    10b8:	02 c0       	rjmp	.+4      	; 0x10be <LCD_char+0x17e>
    10ba:	88 0f       	add	r24, r24
    10bc:	99 1f       	adc	r25, r25
    10be:	0a 94       	dec	r0
    10c0:	e2 f7       	brpl	.-8      	; 0x10ba <LCD_char+0x17a>
    10c2:	20 2f       	mov	r18, r16
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	82 23       	and	r24, r18
    10c8:	93 23       	and	r25, r19
    10ca:	0f 2c       	mov	r0, r15
    10cc:	02 c0       	rjmp	.+4      	; 0x10d2 <LCD_char+0x192>
    10ce:	95 95       	asr	r25
    10d0:	87 95       	ror	r24
    10d2:	0a 94       	dec	r0
    10d4:	e2 f7       	brpl	.-8      	; 0x10ce <LCD_char+0x18e>
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	99 f4       	brne	.+38     	; 0x1100 <LCD_char+0x1c0>
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_HIGH_LEVEL);
    10da:	81 2f       	mov	r24, r17
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	dc 01       	movw	r26, r24
    10e0:	11 96       	adiw	r26, 0x01	; 1
    10e2:	aa 0f       	add	r26, r26
    10e4:	bb 1f       	adc	r27, r27
    10e6:	ac 0f       	add	r26, r28
    10e8:	bd 1f       	adc	r27, r29
    10ea:	88 0f       	add	r24, r24
    10ec:	99 1f       	adc	r25, r25
    10ee:	fe 01       	movw	r30, r28
    10f0:	e8 0f       	add	r30, r24
    10f2:	f9 1f       	adc	r31, r25
    10f4:	41 e0       	ldi	r20, 0x01	; 1
    10f6:	6c 91       	ld	r22, X
    10f8:	81 81       	ldd	r24, Z+1	; 0x01
    10fa:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    10fe:	12 c0       	rjmp	.+36     	; 0x1124 <LCD_char+0x1e4>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
    1100:	81 2f       	mov	r24, r17
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	dc 01       	movw	r26, r24
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	aa 0f       	add	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	ac 0f       	add	r26, r28
    110e:	bd 1f       	adc	r27, r29
    1110:	88 0f       	add	r24, r24
    1112:	99 1f       	adc	r25, r25
    1114:	fe 01       	movw	r30, r28
    1116:	e8 0f       	add	r30, r24
    1118:	f9 1f       	adc	r31, r25
    111a:	40 e0       	ldi	r20, 0x00	; 0
    111c:	6c 91       	ld	r22, X
    111e:	81 81       	ldd	r24, Z+1	; 0x01
    1120:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
			}
			u8_bit_counter--;
    1124:	fa 94       	dec	r15
		ENABLE(ptr_str_config);
		delay_3_ms();
	}
	else if(ptr_str_config->enu_mode == LCD_8_BIT_MODE)
	{
		for(uint8_t u8_counter = U8_ZERO_VALUE; u8_counter < LCD_MAX_DATA_PINS_MOD_8; u8_counter++){
    1126:	1f 5f       	subi	r17, 0xFF	; 255
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <LCD_char+0x1f4>
    112a:	10 e0       	ldi	r17, 0x00	; 0
    112c:	0f 2e       	mov	r0, r31
    112e:	f7 e0       	ldi	r31, 0x07	; 7
    1130:	ff 2e       	mov	r15, r31
    1132:	f0 2d       	mov	r31, r0
    1134:	18 30       	cpi	r17, 0x08	; 8
    1136:	08 f4       	brcc	.+2      	; 0x113a <LCD_char+0x1fa>
    1138:	bc cf       	rjmp	.-136    	; 0x10b2 <LCD_char+0x172>
				}else{
				DIO_write_pin(ptr_str_config->str_data_pins[u8_counter].enu_port, ptr_str_config->str_data_pins[u8_counter].enu_pin,DIO_PIN_LOW_LEVEL);
			}
			u8_bit_counter--;
		}
		ENABLE(ptr_str_config);
    113a:	ce 01       	movw	r24, r28
    113c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <ENABLE>
		delay_3_ms();
    1140:	0e 94 c5 05 	call	0xb8a	; 0xb8a <delay_3_ms>
	}
	else
	{
		//do nothing
	}
}
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	ff 90       	pop	r15
    114e:	08 95       	ret

00001150 <LCD_writeString>:
 *
 * @note The function iterates through the input string and sends each character to the LCD using
 * the LCD_char function until the null-terminator ('\0') is encountered.
 */
lcd_enu_return_state_t LCD_writeString (lcd_str_config_t *ptr_str_config, uint8_t *ptr_u8_data)
{
    1150:	ef 92       	push	r14
    1152:	ff 92       	push	r15
    1154:	0f 93       	push	r16
    1156:	1f 93       	push	r17
    1158:	cf 93       	push	r28
	uint8_t u8_char_counter = 0;
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
	if(ptr_u8_data == NULL)
    115a:	61 15       	cp	r22, r1
    115c:	71 05       	cpc	r23, r1
    115e:	81 f0       	breq	.+32     	; 0x1180 <LCD_writeString+0x30>
    1160:	8b 01       	movw	r16, r22
    1162:	7c 01       	movw	r14, r24
    1164:	c0 e0       	ldi	r28, 0x00	; 0
    1166:	04 c0       	rjmp	.+8      	; 0x1170 <LCD_writeString+0x20>

	else
	{
		while(ptr_u8_data[u8_char_counter] !='\0')
		{
			LCD_char(ptr_str_config,ptr_u8_data[u8_char_counter]);
    1168:	c7 01       	movw	r24, r14
    116a:	0e 94 a0 07 	call	0xf40	; 0xf40 <LCD_char>
			u8_char_counter++;
    116e:	cf 5f       	subi	r28, 0xFF	; 255
		enu_return_state = LCD_NULL_PTR;
	}

	else
	{
		while(ptr_u8_data[u8_char_counter] !='\0')
    1170:	f8 01       	movw	r30, r16
    1172:	ec 0f       	add	r30, r28
    1174:	f1 1d       	adc	r31, r1
    1176:	60 81       	ld	r22, Z
    1178:	61 11       	cpse	r22, r1
    117a:	f6 cf       	rjmp	.-20     	; 0x1168 <LCD_writeString+0x18>
 * the LCD_char function until the null-terminator ('\0') is encountered.
 */
lcd_enu_return_state_t LCD_writeString (lcd_str_config_t *ptr_str_config, uint8_t *ptr_u8_data)
{
	uint8_t u8_char_counter = 0;
	lcd_enu_return_state_t enu_return_state=LCD_E_OK;
    117c:	80 e0       	ldi	r24, 0x00	; 0
    117e:	01 c0       	rjmp	.+2      	; 0x1182 <LCD_writeString+0x32>
	if(ptr_u8_data == NULL)
	{
		enu_return_state = LCD_NULL_PTR;
    1180:	82 e0       	ldi	r24, 0x02	; 2
		}
	}
	return enu_return_state;
	

}
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	08 95       	ret

0000118e <MOTOR_INIT>:
 *         - MOTOR_NOK: Motor initialization failed due to pin initialization errors.
 *
 * @note The motor configuration structure contains the port and pin information for controlling the motor.
 */
motor_enu_return_state_t MOTOR_INIT(const motor_str_config_t *ptr_str_motor_config)
{
    118e:	1f 93       	push	r17
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	ec 01       	movw	r28, r24
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_init(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_OUTPUT);
    1196:	69 81       	ldd	r22, Y+1	; 0x01
    1198:	41 e0       	ldi	r20, 0x01	; 1
    119a:	88 81       	ld	r24, Y
    119c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
    11a0:	18 2f       	mov	r17, r24
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_init(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_OUTPUT);
    11a2:	6a 81       	ldd	r22, Y+2	; 0x02
    11a4:	41 e0       	ldi	r20, 0x01	; 1
    11a6:	88 81       	ld	r24, Y
    11a8:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
    11ac:	11 11       	cpse	r17, r1
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <MOTOR_INIT+0x2a>
    11b0:	88 23       	and	r24, r24
    11b2:	21 f0       	breq	.+8      	; 0x11bc <MOTOR_INIT+0x2e>
	{
		enu_return_state = MOTOR_OK;
	}
	else
	{
		enu_return_state = MOTOR_NOK;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <MOTOR_INIT+0x30>
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	01 c0       	rjmp	.+2      	; 0x11be <MOTOR_INIT+0x30>
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_init(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_OUTPUT);
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_init(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_OUTPUT);
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
	{
		enu_return_state = MOTOR_OK;
    11bc:	80 e0       	ldi	r24, 0x00	; 0
	{
		enu_return_state = MOTOR_NOK;
	}
	
	return enu_return_state;
}
    11be:	df 91       	pop	r29
    11c0:	cf 91       	pop	r28
    11c2:	1f 91       	pop	r17
    11c4:	08 95       	ret

000011c6 <MOTOR_FORWARD>:
 *         - MOTOR_NOK: Motor forward operation failed due to pin write errors.
 *
 * @note The motor configuration structure contains the port and pin information for controlling the motor.
 */
motor_enu_return_state_t MOTOR_FORWARD(const motor_str_config_t *ptr_str_motor_config)
{
    11c6:	1f 93       	push	r17
    11c8:	cf 93       	push	r28
    11ca:	df 93       	push	r29
    11cc:	ec 01       	movw	r28, r24
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_HIGH_LEVEL);
    11ce:	69 81       	ldd	r22, Y+1	; 0x01
    11d0:	41 e0       	ldi	r20, 0x01	; 1
    11d2:	88 81       	ld	r24, Y
    11d4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    11d8:	18 2f       	mov	r17, r24
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_LOW_LEVEL);
    11da:	6a 81       	ldd	r22, Y+2	; 0x02
    11dc:	40 e0       	ldi	r20, 0x00	; 0
    11de:	88 81       	ld	r24, Y
    11e0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
    11e4:	11 11       	cpse	r17, r1
    11e6:	04 c0       	rjmp	.+8      	; 0x11f0 <MOTOR_FORWARD+0x2a>
    11e8:	88 23       	and	r24, r24
    11ea:	21 f0       	breq	.+8      	; 0x11f4 <MOTOR_FORWARD+0x2e>
	{
		enu_return_state = MOTOR_OK;
	}
	else
	{
		enu_return_state = MOTOR_NOK;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	03 c0       	rjmp	.+6      	; 0x11f6 <MOTOR_FORWARD+0x30>
    11f0:	81 e0       	ldi	r24, 0x01	; 1
    11f2:	01 c0       	rjmp	.+2      	; 0x11f6 <MOTOR_FORWARD+0x30>
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_HIGH_LEVEL);
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_LOW_LEVEL);
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
	{
		enu_return_state = MOTOR_OK;
    11f4:	80 e0       	ldi	r24, 0x00	; 0
	{
		enu_return_state = MOTOR_NOK;
	}
	
	return enu_return_state;
}
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	1f 91       	pop	r17
    11fc:	08 95       	ret

000011fe <MOTOR_BACKWARD>:
 *         - MOTOR_NOK: Motor backward operation failed due to pin write errors.
 *
 * @note The motor configuration structure contains the port and pin information for controlling the motor.
 */
motor_enu_return_state_t MOTOR_BACKWARD(const motor_str_config_t *ptr_str_motor_config)
{
    11fe:	1f 93       	push	r17
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ec 01       	movw	r28, r24
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_LOW_LEVEL);
    1206:	69 81       	ldd	r22, Y+1	; 0x01
    1208:	40 e0       	ldi	r20, 0x00	; 0
    120a:	88 81       	ld	r24, Y
    120c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    1210:	18 2f       	mov	r17, r24
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_HIGH_LEVEL);
    1212:	6a 81       	ldd	r22, Y+2	; 0x02
    1214:	41 e0       	ldi	r20, 0x01	; 1
    1216:	88 81       	ld	r24, Y
    1218:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
    121c:	11 11       	cpse	r17, r1
    121e:	04 c0       	rjmp	.+8      	; 0x1228 <MOTOR_BACKWARD+0x2a>
    1220:	88 23       	and	r24, r24
    1222:	21 f0       	breq	.+8      	; 0x122c <MOTOR_BACKWARD+0x2e>
	{
		enu_return_state = MOTOR_OK;
	}
	else
	{
		enu_return_state = MOTOR_NOK;
    1224:	81 e0       	ldi	r24, 0x01	; 1
    1226:	03 c0       	rjmp	.+6      	; 0x122e <MOTOR_BACKWARD+0x30>
    1228:	81 e0       	ldi	r24, 0x01	; 1
    122a:	01 c0       	rjmp	.+2      	; 0x122e <MOTOR_BACKWARD+0x30>
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_LOW_LEVEL);
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_HIGH_LEVEL);
	
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
	{
		enu_return_state = MOTOR_OK;
    122c:	80 e0       	ldi	r24, 0x00	; 0
	{
		enu_return_state = MOTOR_NOK;
	}
	
	return enu_return_state;
}
    122e:	df 91       	pop	r29
    1230:	cf 91       	pop	r28
    1232:	1f 91       	pop	r17
    1234:	08 95       	ret

00001236 <MOTOR_STOP>:
 *         - MOTOR_NOK: Motor stop operation failed due to pin write errors.
 *
 * @note The motor configuration structure contains the port and pin information for controlling the motor.
 */
motor_enu_return_state_t MOTOR_STOP(const motor_str_config_t *ptr_str_motor_config)
{
    1236:	1f 93       	push	r17
    1238:	cf 93       	push	r28
    123a:	df 93       	push	r29
    123c:	ec 01       	movw	r28, r24
	motor_enu_return_state_t enu_return_state = MOTOR_OK; 
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_LOW_LEVEL);
    123e:	69 81       	ldd	r22, Y+1	; 0x01
    1240:	40 e0       	ldi	r20, 0x00	; 0
    1242:	88 81       	ld	r24, Y
    1244:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    1248:	18 2f       	mov	r17, r24
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_LOW_LEVEL);
    124a:	6a 81       	ldd	r22, Y+2	; 0x02
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	88 81       	ld	r24, Y
    1250:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
    1254:	11 11       	cpse	r17, r1
    1256:	04 c0       	rjmp	.+8      	; 0x1260 <MOTOR_STOP+0x2a>
    1258:	88 23       	and	r24, r24
    125a:	21 f0       	breq	.+8      	; 0x1264 <MOTOR_STOP+0x2e>
	{   
		enu_return_state = MOTOR_OK; 
	}
	else
	{
		enu_return_state = MOTOR_NOK;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	03 c0       	rjmp	.+6      	; 0x1266 <MOTOR_STOP+0x30>
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	01 c0       	rjmp	.+2      	; 0x1266 <MOTOR_STOP+0x30>
	dio_enu_return_state_t enu_return_state_pin_1 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num1,DIO_PIN_LOW_LEVEL);
	dio_enu_return_state_t enu_return_state_pin_2 = DIO_write_pin(ptr_str_motor_config->port,ptr_str_motor_config->pin_num2,DIO_PIN_LOW_LEVEL);
	
	if( (enu_return_state_pin_1 == DIO_OK) && (enu_return_state_pin_2 == DIO_OK))
	{   
		enu_return_state = MOTOR_OK; 
    1264:	80 e0       	ldi	r24, 0x00	; 0
	{
		enu_return_state = MOTOR_NOK;
	}
	
	return enu_return_state;
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	08 95       	ret

0000126e <pwm_init>:
 *         - PWM_NOK: PWM channel initialization failed due to a NULL configuration pointer.
 *
 * @note The PWM configuration structure contains the port, pin, frequency, and duty cycle information.
 */

pwm_enu_return_state_t pwm_init(pwm_str_configuration_t *ptr_str_pwm_configuration){
    126e:	8f 92       	push	r8
    1270:	9f 92       	push	r9
    1272:	af 92       	push	r10
    1274:	bf 92       	push	r11
    1276:	cf 92       	push	r12
    1278:	df 92       	push	r13
    127a:	ef 92       	push	r14
    127c:	ff 92       	push	r15
    127e:	cf 93       	push	r28
    1280:	df 93       	push	r29
	
	pwm_enu_return_state_t ret = PWM_OK;
	if(ptr_str_pwm_configuration == NULL ){
    1282:	00 97       	sbiw	r24, 0x00	; 0
    1284:	09 f4       	brne	.+2      	; 0x1288 <pwm_init+0x1a>
    1286:	42 c0       	rjmp	.+132    	; 0x130c <pwm_init+0x9e>
    1288:	ec 01       	movw	r28, r24
		ret =PWM_NOK;
	}
	else{
				
		DIO_init (ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_OUTPUT);
    128a:	41 e0       	ldi	r20, 0x01	; 1
    128c:	69 81       	ldd	r22, Y+1	; 0x01
    128e:	88 81       	ld	r24, Y
    1290:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
		ptr_str_pwm_configuration->cycle_duration = 1/(double)ptr_str_pwm_configuration->frequency*PWMM_TO_CONVERT_TO_US; 
    1294:	6b 81       	ldd	r22, Y+3	; 0x03
    1296:	7c 81       	ldd	r23, Y+4	; 0x04
    1298:	8d 81       	ldd	r24, Y+5	; 0x05
    129a:	9e 81       	ldd	r25, Y+6	; 0x06
    129c:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	80 e8       	ldi	r24, 0x80	; 128
    12aa:	9f e3       	ldi	r25, 0x3F	; 63
    12ac:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a e7       	ldi	r20, 0x7A	; 122
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    12bc:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    12c0:	6b 01       	movw	r12, r22
    12c2:	7c 01       	movw	r14, r24
    12c4:	7a 87       	std	Y+10, r23	; 0x0a
    12c6:	69 87       	std	Y+9, r22	; 0x09
		ptr_str_pwm_configuration->t_on = (((double)ptr_str_pwm_configuration->duty_cycle)/PWMM_TO_CONVERT_FROM_PRESENTAGE)*(ptr_str_pwm_configuration->cycle_duration);
    12c8:	6a 81       	ldd	r22, Y+2	; 0x02
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    12d4:	20 e0       	ldi	r18, 0x00	; 0
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	48 ec       	ldi	r20, 0xC8	; 200
    12da:	52 e4       	ldi	r21, 0x42	; 66
    12dc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    12e0:	4b 01       	movw	r8, r22
    12e2:	5c 01       	movw	r10, r24
    12e4:	b6 01       	movw	r22, r12
    12e6:	80 e0       	ldi	r24, 0x00	; 0
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    12ee:	a5 01       	movw	r20, r10
    12f0:	94 01       	movw	r18, r8
    12f2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    12f6:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    12fa:	78 87       	std	Y+8, r23	; 0x08
    12fc:	6f 83       	std	Y+7, r22	; 0x07
		ptr_str_pwm_configuration->pwm_state = PWM_OFF;
    12fe:	1b 86       	std	Y+11, r1	; 0x0b
		gs_arr_str_pwm_configuration[gs_u8_pwm_channel_counter] = ptr_str_pwm_configuration;
    1300:	d0 93 25 01 	sts	0x0125, r29	; 0x800125 <gs_arr_str_pwm_configuration+0x1>
    1304:	c0 93 24 01 	sts	0x0124, r28	; 0x800124 <gs_arr_str_pwm_configuration>
 * @note The PWM configuration structure contains the port, pin, frequency, and duty cycle information.
 */

pwm_enu_return_state_t pwm_init(pwm_str_configuration_t *ptr_str_pwm_configuration){
	
	pwm_enu_return_state_t ret = PWM_OK;
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	01 c0       	rjmp	.+2      	; 0x130e <pwm_init+0xa0>
	if(ptr_str_pwm_configuration == NULL ){
		ret =PWM_NOK;
    130c:	81 e0       	ldi	r24, 0x01	; 1
		ptr_str_pwm_configuration->pwm_state = PWM_OFF;
		gs_arr_str_pwm_configuration[gs_u8_pwm_channel_counter] = ptr_str_pwm_configuration;
		
	}
	return ret;
}
    130e:	df 91       	pop	r29
    1310:	cf 91       	pop	r28
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	df 90       	pop	r13
    1318:	cf 90       	pop	r12
    131a:	bf 90       	pop	r11
    131c:	af 90       	pop	r10
    131e:	9f 90       	pop	r9
    1320:	8f 90       	pop	r8
    1322:	08 95       	ret

00001324 <pwm_start_tick>:
 *
 * @note This function assumes that the "timing_init" and "timing_start" functions are part of the timing module.
 *       It also assumes that the "pwm_tick_counter" function is defined and will be called on each tick.
 */
void pwm_start_tick(void){
	timing_init(PWM_1000_US, pwm_tick_counter);
    1324:	65 e2       	ldi	r22, 0x25	; 37
    1326:	7a e0       	ldi	r23, 0x0A	; 10
    1328:	88 ee       	ldi	r24, 0xE8	; 232
    132a:	93 e0       	ldi	r25, 0x03	; 3
    132c:	0e 94 c7 0a 	call	0x158e	; 0x158e <timing_init>
	timing_start();
    1330:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <timing_start>
    1334:	08 95       	ret

00001336 <pwm_start>:
 * and records the current value of the "pwm_tick" variable as the start of the PWM tick count.
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_start(pwm_str_configuration_t *ptr_str_pwm_configuration){
    1336:	cf 93       	push	r28
    1338:	df 93       	push	r29
	pwm_enu_return_state_t ret = PWM_OK;
	if(ptr_str_pwm_configuration == NULL ){
    133a:	00 97       	sbiw	r24, 0x00	; 0
    133c:	b1 f0       	breq	.+44     	; 0x136a <pwm_start+0x34>
    133e:	ec 01       	movw	r28, r24
		ret =PWM_NOK;
	}
	else{
		ptr_str_pwm_configuration->pwm_state = PWM_ON;
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	8b 87       	std	Y+11, r24	; 0x0b
		DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_HIGH_LEVEL);
    1344:	41 e0       	ldi	r20, 0x01	; 1
    1346:	69 81       	ldd	r22, Y+1	; 0x01
    1348:	88 81       	ld	r24, Y
    134a:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
		ptr_str_pwm_configuration->pwm_tick_ss = pwm_tick;
    134e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <pwm_tick>
    1352:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <pwm_tick+0x1>
    1356:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <pwm_tick+0x2>
    135a:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <pwm_tick+0x3>
    135e:	8c 87       	std	Y+12, r24	; 0x0c
    1360:	9d 87       	std	Y+13, r25	; 0x0d
    1362:	ae 87       	std	Y+14, r26	; 0x0e
    1364:	bf 87       	std	Y+15, r27	; 0x0f
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_start(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	01 c0       	rjmp	.+2      	; 0x136c <pwm_start+0x36>
	if(ptr_str_pwm_configuration == NULL ){
		ret =PWM_NOK;
    136a:	81 e0       	ldi	r24, 0x01	; 1
		ptr_str_pwm_configuration->pwm_state = PWM_ON;
		DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_HIGH_LEVEL);
		ptr_str_pwm_configuration->pwm_tick_ss = pwm_tick;
	}
	return ret;
}
    136c:	df 91       	pop	r29
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <pwm_checking>:
 * and writes appropriate signal levels to the specified port and pin.
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_checking(pwm_str_configuration_t *ptr_str_pwm_configuration){
    1372:	cf 92       	push	r12
    1374:	df 92       	push	r13
    1376:	ef 92       	push	r14
    1378:	ff 92       	push	r15
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
	pwm_enu_return_state_t ret = PWM_OK;
	if(ptr_str_pwm_configuration == NULL ){
    137e:	00 97       	sbiw	r24, 0x00	; 0
    1380:	09 f4       	brne	.+2      	; 0x1384 <pwm_checking+0x12>
    1382:	57 c0       	rjmp	.+174    	; 0x1432 <pwm_checking+0xc0>
		ret =PWM_NOK;
	}
	else{
		uint32_t pwm_tick_temp = pwm_tick, actual_time =0;
    1384:	00 91 20 01 	lds	r16, 0x0120	; 0x800120 <pwm_tick>
    1388:	10 91 21 01 	lds	r17, 0x0121	; 0x800121 <pwm_tick+0x1>
    138c:	20 91 22 01 	lds	r18, 0x0122	; 0x800122 <pwm_tick+0x2>
    1390:	30 91 23 01 	lds	r19, 0x0123	; 0x800123 <pwm_tick+0x3>
		if(ptr_str_pwm_configuration->pwm_tick_ss > pwm_tick_temp){
    1394:	fc 01       	movw	r30, r24
    1396:	44 85       	ldd	r20, Z+12	; 0x0c
    1398:	55 85       	ldd	r21, Z+13	; 0x0d
    139a:	66 85       	ldd	r22, Z+14	; 0x0e
    139c:	77 85       	ldd	r23, Z+15	; 0x0f
    139e:	04 17       	cp	r16, r20
    13a0:	15 07       	cpc	r17, r21
    13a2:	26 07       	cpc	r18, r22
    13a4:	37 07       	cpc	r19, r23
    13a6:	68 f4       	brcc	.+26     	; 0x13c2 <pwm_checking+0x50>
			actual_time = MAX_VALUE_UINT32-ptr_str_pwm_configuration->pwm_tick_ss+pwm_tick_temp;
    13a8:	68 01       	movw	r12, r16
    13aa:	79 01       	movw	r14, r18
    13ac:	c4 1a       	sub	r12, r20
    13ae:	d5 0a       	sbc	r13, r21
    13b0:	e6 0a       	sbc	r14, r22
    13b2:	f7 0a       	sbc	r15, r23
    13b4:	b7 01       	movw	r22, r14
    13b6:	a6 01       	movw	r20, r12
    13b8:	41 50       	subi	r20, 0x01	; 1
    13ba:	51 09       	sbc	r21, r1
    13bc:	61 09       	sbc	r22, r1
    13be:	71 09       	sbc	r23, r1
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <pwm_checking+0x60>
		}else{
			actual_time = pwm_tick_temp - ptr_str_pwm_configuration->pwm_tick_ss;
    13c2:	68 01       	movw	r12, r16
    13c4:	79 01       	movw	r14, r18
    13c6:	c4 1a       	sub	r12, r20
    13c8:	d5 0a       	sbc	r13, r21
    13ca:	e6 0a       	sbc	r14, r22
    13cc:	f7 0a       	sbc	r15, r23
    13ce:	b7 01       	movw	r22, r14
    13d0:	a6 01       	movw	r20, r12
    13d2:	fc 01       	movw	r30, r24
		}
		
		if(ptr_str_pwm_configuration->t_on > actual_time){
    13d4:	87 81       	ldd	r24, Z+7	; 0x07
    13d6:	90 85       	ldd	r25, Z+8	; 0x08
    13d8:	a0 e0       	ldi	r26, 0x00	; 0
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	48 17       	cp	r20, r24
    13de:	59 07       	cpc	r21, r25
    13e0:	6a 07       	cpc	r22, r26
    13e2:	7b 07       	cpc	r23, r27
    13e4:	60 f4       	brcc	.+24     	; 0x13fe <pwm_checking+0x8c>
			if(ptr_str_pwm_configuration->pwm_state != PWM_ON){
    13e6:	83 85       	ldd	r24, Z+11	; 0x0b
    13e8:	81 30       	cpi	r24, 0x01	; 1
    13ea:	29 f1       	breq	.+74     	; 0x1436 <pwm_checking+0xc4>
				ptr_str_pwm_configuration->pwm_state = PWM_ON;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	83 87       	std	Z+11, r24	; 0x0b
				DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_HIGH_LEVEL);
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	61 81       	ldd	r22, Z+1	; 0x01
    13f4:	80 81       	ld	r24, Z
    13f6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_checking(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	1f c0       	rjmp	.+62     	; 0x143c <pwm_checking+0xca>
		if(ptr_str_pwm_configuration->t_on > actual_time){
			if(ptr_str_pwm_configuration->pwm_state != PWM_ON){
				ptr_str_pwm_configuration->pwm_state = PWM_ON;
				DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_HIGH_LEVEL);
			}	
		}else if(ptr_str_pwm_configuration->cycle_duration > actual_time){
    13fe:	81 85       	ldd	r24, Z+9	; 0x09
    1400:	92 85       	ldd	r25, Z+10	; 0x0a
    1402:	a0 e0       	ldi	r26, 0x00	; 0
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	48 17       	cp	r20, r24
    1408:	59 07       	cpc	r21, r25
    140a:	6a 07       	cpc	r22, r26
    140c:	7b 07       	cpc	r23, r27
    140e:	58 f4       	brcc	.+22     	; 0x1426 <pwm_checking+0xb4>
			if(ptr_str_pwm_configuration->pwm_state != PWM_OFF){
    1410:	83 85       	ldd	r24, Z+11	; 0x0b
    1412:	88 23       	and	r24, r24
    1414:	91 f0       	breq	.+36     	; 0x143a <pwm_checking+0xc8>
				ptr_str_pwm_configuration->pwm_state = PWM_OFF;
    1416:	13 86       	std	Z+11, r1	; 0x0b
				DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_LOW_LEVEL);
    1418:	40 e0       	ldi	r20, 0x00	; 0
    141a:	61 81       	ldd	r22, Z+1	; 0x01
    141c:	80 81       	ld	r24, Z
    141e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_checking(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	0b c0       	rjmp	.+22     	; 0x143c <pwm_checking+0xca>
			if(ptr_str_pwm_configuration->pwm_state != PWM_OFF){
				ptr_str_pwm_configuration->pwm_state = PWM_OFF;
				DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_LOW_LEVEL);
			}
		}else{
			ptr_str_pwm_configuration->pwm_tick_ss =  pwm_tick_temp;
    1426:	04 87       	std	Z+12, r16	; 0x0c
    1428:	15 87       	std	Z+13, r17	; 0x0d
    142a:	26 87       	std	Z+14, r18	; 0x0e
    142c:	37 87       	std	Z+15, r19	; 0x0f
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_checking(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    142e:	80 e0       	ldi	r24, 0x00	; 0
    1430:	05 c0       	rjmp	.+10     	; 0x143c <pwm_checking+0xca>
	if(ptr_str_pwm_configuration == NULL ){
		ret =PWM_NOK;
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	03 c0       	rjmp	.+6      	; 0x143c <pwm_checking+0xca>
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_checking(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	01 c0       	rjmp	.+2      	; 0x143c <pwm_checking+0xca>
    143a:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	return ret;
	
}
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	08 95       	ret

0000144a <pwm_tick_counter>:
#include "PWM_config.h"
static uint8_t gs_u8_pwm_channel_counter = U8_ZERO_VALUE;
static pwm_str_configuration_t *gs_arr_str_pwm_configuration[PWM_CHANNEL_MAX] = {NULL};
static volatile uint32_t pwm_tick = 0;

void pwm_tick_counter(void){
    144a:	cf 93       	push	r28
	pwm_tick++;
    144c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <pwm_tick>
    1450:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <pwm_tick+0x1>
    1454:	a0 91 22 01 	lds	r26, 0x0122	; 0x800122 <pwm_tick+0x2>
    1458:	b0 91 23 01 	lds	r27, 0x0123	; 0x800123 <pwm_tick+0x3>
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	a1 1d       	adc	r26, r1
    1460:	b1 1d       	adc	r27, r1
    1462:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <pwm_tick>
    1466:	90 93 21 01 	sts	0x0121, r25	; 0x800121 <pwm_tick+0x1>
    146a:	a0 93 22 01 	sts	0x0122, r26	; 0x800122 <pwm_tick+0x2>
    146e:	b0 93 23 01 	sts	0x0123, r27	; 0x800123 <pwm_tick+0x3>
	for(uint8_t u8_counter=U8_ZERO_VALUE; (u8_counter <= gs_u8_pwm_channel_counter) && (gs_u8_pwm_channel_counter < PWM_CHANNEL_MAX); u8_counter++){
    1472:	c0 e0       	ldi	r28, 0x00	; 0
    1474:	0b c0       	rjmp	.+22     	; 0x148c <pwm_tick_counter+0x42>
		
		pwm_checking(gs_arr_str_pwm_configuration[u8_counter]);
    1476:	ec 2f       	mov	r30, r28
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	ee 0f       	add	r30, r30
    147c:	ff 1f       	adc	r31, r31
    147e:	ec 5d       	subi	r30, 0xDC	; 220
    1480:	fe 4f       	sbci	r31, 0xFE	; 254
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	0e 94 b9 09 	call	0x1372	; 0x1372 <pwm_checking>
static pwm_str_configuration_t *gs_arr_str_pwm_configuration[PWM_CHANNEL_MAX] = {NULL};
static volatile uint32_t pwm_tick = 0;

void pwm_tick_counter(void){
	pwm_tick++;
	for(uint8_t u8_counter=U8_ZERO_VALUE; (u8_counter <= gs_u8_pwm_channel_counter) && (gs_u8_pwm_channel_counter < PWM_CHANNEL_MAX); u8_counter++){
    148a:	cf 5f       	subi	r28, 0xFF	; 255
    148c:	cc 23       	and	r28, r28
    148e:	99 f3       	breq	.-26     	; 0x1476 <pwm_tick_counter+0x2c>
		
		pwm_checking(gs_arr_str_pwm_configuration[u8_counter]);
	}
	
	
};
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <pwm_change_frequency_or_duty_cycle>:
 * It recalculates the "cycle_duration" and "t_on" values based on the new frequency or duty cycle.
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_change_frequency_or_duty_cycle(pwm_str_configuration_t *ptr_str_pwm_configuration){
    1494:	8f 92       	push	r8
    1496:	9f 92       	push	r9
    1498:	af 92       	push	r10
    149a:	bf 92       	push	r11
    149c:	cf 92       	push	r12
    149e:	df 92       	push	r13
    14a0:	ef 92       	push	r14
    14a2:	ff 92       	push	r15
    14a4:	cf 93       	push	r28
    14a6:	df 93       	push	r29
	pwm_enu_return_state_t ret = PWM_OK;
	if(ptr_str_pwm_configuration == NULL ){
    14a8:	00 97       	sbiw	r24, 0x00	; 0
    14aa:	c1 f1       	breq	.+112    	; 0x151c <pwm_change_frequency_or_duty_cycle+0x88>
    14ac:	ec 01       	movw	r28, r24
		ret =PWM_NOK;
	}
	else{
		ptr_str_pwm_configuration->cycle_duration = U8_ONE_VALUE/(double)ptr_str_pwm_configuration->frequency*PWMM_TO_CONVERT_TO_US;
    14ae:	6b 81       	ldd	r22, Y+3	; 0x03
    14b0:	7c 81       	ldd	r23, Y+4	; 0x04
    14b2:	8d 81       	ldd	r24, Y+5	; 0x05
    14b4:	9e 81       	ldd	r25, Y+6	; 0x06
    14b6:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    14ba:	9b 01       	movw	r18, r22
    14bc:	ac 01       	movw	r20, r24
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	80 e8       	ldi	r24, 0x80	; 128
    14c4:	9f e3       	ldi	r25, 0x3F	; 63
    14c6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	4a e7       	ldi	r20, 0x7A	; 122
    14d0:	54 e4       	ldi	r21, 0x44	; 68
    14d2:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    14d6:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    14da:	6b 01       	movw	r12, r22
    14dc:	7c 01       	movw	r14, r24
    14de:	7a 87       	std	Y+10, r23	; 0x0a
    14e0:	69 87       	std	Y+9, r22	; 0x09
		ptr_str_pwm_configuration->t_on = (((double)ptr_str_pwm_configuration->duty_cycle)/100)*(ptr_str_pwm_configuration->cycle_duration);
    14e2:	6a 81       	ldd	r22, Y+2	; 0x02
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	48 ec       	ldi	r20, 0xC8	; 200
    14f4:	52 e4       	ldi	r21, 0x42	; 66
    14f6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    14fa:	4b 01       	movw	r8, r22
    14fc:	5c 01       	movw	r10, r24
    14fe:	b6 01       	movw	r22, r12
    1500:	80 e0       	ldi	r24, 0x00	; 0
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    1508:	a5 01       	movw	r20, r10
    150a:	94 01       	movw	r18, r8
    150c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    1510:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    1514:	78 87       	std	Y+8, r23	; 0x08
    1516:	6f 83       	std	Y+7, r22	; 0x07
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_change_frequency_or_duty_cycle(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	01 c0       	rjmp	.+2      	; 0x151e <pwm_change_frequency_or_duty_cycle+0x8a>
	if(ptr_str_pwm_configuration == NULL ){
		ret =PWM_NOK;
    151c:	81 e0       	ldi	r24, 0x01	; 1
		ptr_str_pwm_configuration->cycle_duration = U8_ONE_VALUE/(double)ptr_str_pwm_configuration->frequency*PWMM_TO_CONVERT_TO_US;
		ptr_str_pwm_configuration->t_on = (((double)ptr_str_pwm_configuration->duty_cycle)/100)*(ptr_str_pwm_configuration->cycle_duration);
		
	}
	return ret;
}
    151e:	df 91       	pop	r29
    1520:	cf 91       	pop	r28
    1522:	ff 90       	pop	r15
    1524:	ef 90       	pop	r14
    1526:	df 90       	pop	r13
    1528:	cf 90       	pop	r12
    152a:	bf 90       	pop	r11
    152c:	af 90       	pop	r10
    152e:	9f 90       	pop	r9
    1530:	8f 90       	pop	r8
    1532:	08 95       	ret

00001534 <pwm_stop>:
 * and resetting the PWM tick snapshot. It updates the specified PWM configuration accordingly.
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_stop(pwm_str_configuration_t *ptr_str_pwm_configuration){
    1534:	cf 93       	push	r28
    1536:	df 93       	push	r29
	pwm_enu_return_state_t ret = PWM_OK;
	if(ptr_str_pwm_configuration == NULL ){
    1538:	00 97       	sbiw	r24, 0x00	; 0
    153a:	69 f0       	breq	.+26     	; 0x1556 <pwm_stop+0x22>
    153c:	ec 01       	movw	r28, r24
		ret =PWM_NOK;
	}else{
		ptr_str_pwm_configuration->pwm_state = PWM_OFF;
    153e:	1b 86       	std	Y+11, r1	; 0x0b
		DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_LOW_LEVEL);
    1540:	40 e0       	ldi	r20, 0x00	; 0
    1542:	69 81       	ldd	r22, Y+1	; 0x01
    1544:	88 81       	ld	r24, Y
    1546:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
		ptr_str_pwm_configuration->pwm_tick_ss = U8_ZERO_VALUE;
    154a:	1c 86       	std	Y+12, r1	; 0x0c
    154c:	1d 86       	std	Y+13, r1	; 0x0d
    154e:	1e 86       	std	Y+14, r1	; 0x0e
    1550:	1f 86       	std	Y+15, r1	; 0x0f
 *
 * @param[in] ptr_str_pwm_configuration A pointer to the PWM configuration structure.
 * @return The return state of the PWM operation, which is either "PWM_OK" or "PWM_NOK".
 */
pwm_enu_return_state_t pwm_stop(pwm_str_configuration_t *ptr_str_pwm_configuration){
	pwm_enu_return_state_t ret = PWM_OK;
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	01 c0       	rjmp	.+2      	; 0x1558 <pwm_stop+0x24>
	if(ptr_str_pwm_configuration == NULL ){
		ret =PWM_NOK;
    1556:	81 e0       	ldi	r24, 0x01	; 1
		ptr_str_pwm_configuration->pwm_state = PWM_OFF;
		DIO_write_pin(ptr_str_pwm_configuration->enu_port_index, ptr_str_pwm_configuration->enu_pin_index, DIO_PIN_LOW_LEVEL);
		ptr_str_pwm_configuration->pwm_tick_ss = U8_ZERO_VALUE;
	}
	return ret;
}
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	08 95       	ret

0000155e <function_callback>:
 * @brief Stops the timer for timing module 1.
 *
 * This function stops the timer associated with timing module 1.
 */
void timing_stop_1(void){
	timer1_stop(&timer_configuration_1);
    155e:	e0 91 57 01 	lds	r30, 0x0157	; 0x800157 <tmp_callBack>
    1562:	f0 91 58 01 	lds	r31, 0x0158	; 0x800158 <tmp_callBack+0x1>
    1566:	09 95       	icall
    1568:	89 e5       	ldi	r24, 0x59	; 89
    156a:	91 e0       	ldi	r25, 0x01	; 1
    156c:	0e 94 8a 0f 	call	0x1f14	; 0x1f14 <timer_set_tcnt>
    1570:	08 95       	ret

00001572 <function_callback_1>:
    1572:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <gs_u16_sys_tick>
    1576:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <gs_u16_sys_tick+0x1>
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <gs_u16_sys_tick+0x1>
    1580:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <gs_u16_sys_tick>
    1584:	8d e4       	ldi	r24, 0x4D	; 77
    1586:	91 e0       	ldi	r25, 0x01	; 1
    1588:	0e 94 3c 10 	call	0x2078	; 0x2078 <timer1_set_tcnt>
    158c:	08 95       	ret

0000158e <timing_init>:
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	ef 92       	push	r14
    15a0:	ff 92       	push	r15
    15a2:	0f 93       	push	r16
    15a4:	1f 93       	push	r17
    15a6:	cf 93       	push	r28
    15a8:	df 93       	push	r29
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	62 97       	sbiw	r28, 0x12	; 18
    15b0:	0f b6       	in	r0, 0x3f	; 63
    15b2:	f8 94       	cli
    15b4:	de bf       	out	0x3e, r29	; 62
    15b6:	0f be       	out	0x3f, r0	; 63
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	8c 01       	movw	r16, r24
    15bc:	7b 01       	movw	r14, r22
    15be:	1a 82       	std	Y+2, r1	; 0x02
    15c0:	19 82       	std	Y+1, r1	; 0x01
    15c2:	1b 82       	std	Y+3, r1	; 0x03
    15c4:	1c 82       	std	Y+4, r1	; 0x04
    15c6:	1d 82       	std	Y+5, r1	; 0x05
    15c8:	1e 82       	std	Y+6, r1	; 0x06
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	91 e0       	ldi	r25, 0x01	; 1
    15ce:	a0 e0       	ldi	r26, 0x00	; 0
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	8f 83       	std	Y+7, r24	; 0x07
    15d4:	98 87       	std	Y+8, r25	; 0x08
    15d6:	a9 87       	std	Y+9, r26	; 0x09
    15d8:	ba 87       	std	Y+10, r27	; 0x0a
    15da:	1b 86       	std	Y+11, r1	; 0x0b
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	8c 87       	std	Y+12, r24	; 0x0c
    15e0:	1d 86       	std	Y+13, r1	; 0x0d
    15e2:	1e 86       	std	Y+14, r1	; 0x0e
    15e4:	1f 86       	std	Y+15, r1	; 0x0f
    15e6:	18 8a       	std	Y+16, r1	; 0x10
    15e8:	19 8a       	std	Y+17, r1	; 0x11
    15ea:	1a 8a       	std	Y+18, r1	; 0x12
    15ec:	6f 81       	ldd	r22, Y+7	; 0x07
    15ee:	78 85       	ldd	r23, Y+8	; 0x08
    15f0:	89 85       	ldd	r24, Y+9	; 0x09
    15f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f4:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    15f8:	20 e0       	ldi	r18, 0x00	; 0
    15fa:	34 e2       	ldi	r19, 0x24	; 36
    15fc:	44 e7       	ldi	r20, 0x74	; 116
    15fe:	5b e4       	ldi	r21, 0x4B	; 75
    1600:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	34 e2       	ldi	r19, 0x24	; 36
    1608:	44 e7       	ldi	r20, 0x74	; 116
    160a:	59 e4       	ldi	r21, 0x49	; 73
    160c:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    1610:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    1614:	6b 83       	std	Y+3, r22	; 0x03
    1616:	7c 83       	std	Y+4, r23	; 0x04
    1618:	8d 83       	std	Y+5, r24	; 0x05
    161a:	9e 83       	std	Y+6, r25	; 0x06
    161c:	2b 85       	ldd	r18, Y+11	; 0x0b
    161e:	3c 85       	ldd	r19, Y+12	; 0x0c
    1620:	4d 85       	ldd	r20, Y+13	; 0x0d
    1622:	5e 85       	ldd	r21, Y+14	; 0x0e
    1624:	6f 85       	ldd	r22, Y+15	; 0x0f
    1626:	78 89       	ldd	r23, Y+16	; 0x10
    1628:	89 89       	ldd	r24, Y+17	; 0x11
    162a:	9a 89       	ldd	r25, Y+18	; 0x12
    162c:	0e 94 c1 12 	call	0x2582	; 0x2582 <__floatundisf>
    1630:	4b 01       	movw	r8, r22
    1632:	5c 01       	movw	r10, r24
    1634:	b8 01       	movw	r22, r16
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    163e:	2b 01       	movw	r4, r22
    1640:	3c 01       	movw	r6, r24
    1642:	6b 81       	ldd	r22, Y+3	; 0x03
    1644:	7c 81       	ldd	r23, Y+4	; 0x04
    1646:	8d 81       	ldd	r24, Y+5	; 0x05
    1648:	9e 81       	ldd	r25, Y+6	; 0x06
    164a:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    164e:	9b 01       	movw	r18, r22
    1650:	ac 01       	movw	r20, r24
    1652:	c3 01       	movw	r24, r6
    1654:	b2 01       	movw	r22, r4
    1656:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    165a:	9b 01       	movw	r18, r22
    165c:	ac 01       	movw	r20, r24
    165e:	c5 01       	movw	r24, r10
    1660:	b4 01       	movw	r22, r8
    1662:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    1666:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    166a:	7a 83       	std	Y+2, r23	; 0x02
    166c:	69 83       	std	Y+1, r22	; 0x01
    166e:	08 3e       	cpi	r16, 0xE8	; 232
    1670:	13 40       	sbci	r17, 0x03	; 3
    1672:	e0 f0       	brcs	.+56     	; 0x16ac <timing_init+0x11e>
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	9a 81       	ldd	r25, Y+2	; 0x02
    1678:	e9 e5       	ldi	r30, 0x59	; 89
    167a:	f1 e0       	ldi	r31, 0x01	; 1
    167c:	93 83       	std	Z+3, r25	; 0x03
    167e:	82 83       	std	Z+2, r24	; 0x02
    1680:	10 82       	st	Z, r1
    1682:	84 e0       	ldi	r24, 0x04	; 4
    1684:	81 83       	std	Z+1, r24	; 0x01
    1686:	ed e5       	ldi	r30, 0x5D	; 93
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	80 81       	ld	r24, Z
    168c:	82 60       	ori	r24, 0x02	; 2
    168e:	80 83       	st	Z, r24
    1690:	f0 92 58 01 	sts	0x0158, r15	; 0x800158 <tmp_callBack+0x1>
    1694:	e0 92 57 01 	sts	0x0157, r14	; 0x800157 <tmp_callBack>
    1698:	8f ea       	ldi	r24, 0xAF	; 175
    169a:	9a e0       	ldi	r25, 0x0A	; 10
    169c:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <timer_initialize_callback_OVF>
    16a0:	89 e5       	ldi	r24, 0x59	; 89
    16a2:	91 e0       	ldi	r25, 0x01	; 1
    16a4:	0e 94 3c 0f 	call	0x1e78	; 0x1e78 <timer0_initialization>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	01 c0       	rjmp	.+2      	; 0x16ae <timing_init+0x120>
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	62 96       	adiw	r28, 0x12	; 18
    16b0:	0f b6       	in	r0, 0x3f	; 63
    16b2:	f8 94       	cli
    16b4:	de bf       	out	0x3e, r29	; 62
    16b6:	0f be       	out	0x3f, r0	; 63
    16b8:	cd bf       	out	0x3d, r28	; 61
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	ef 90       	pop	r14
    16c6:	bf 90       	pop	r11
    16c8:	af 90       	pop	r10
    16ca:	9f 90       	pop	r9
    16cc:	8f 90       	pop	r8
    16ce:	7f 90       	pop	r7
    16d0:	6f 90       	pop	r6
    16d2:	5f 90       	pop	r5
    16d4:	4f 90       	pop	r4
    16d6:	08 95       	ret

000016d8 <timing_start>:
    16d8:	89 e5       	ldi	r24, 0x59	; 89
    16da:	91 e0       	ldi	r25, 0x01	; 1
    16dc:	0e 94 78 0f 	call	0x1ef0	; 0x1ef0 <timer_start>
    16e0:	08 95       	ret

000016e2 <timing_init_1>:
    16e2:	cf 92       	push	r12
    16e4:	df 92       	push	r13
    16e6:	ef 92       	push	r14
    16e8:	ff 92       	push	r15
    16ea:	0f 93       	push	r16
    16ec:	1f 93       	push	r17
    16ee:	cf 93       	push	r28
    16f0:	df 93       	push	r29
    16f2:	cd b7       	in	r28, 0x3d	; 61
    16f4:	de b7       	in	r29, 0x3e	; 62
    16f6:	62 97       	sbiw	r28, 0x12	; 18
    16f8:	0f b6       	in	r0, 0x3f	; 63
    16fa:	f8 94       	cli
    16fc:	de bf       	out	0x3e, r29	; 62
    16fe:	0f be       	out	0x3f, r0	; 63
    1700:	cd bf       	out	0x3d, r28	; 61
    1702:	8c 01       	movw	r16, r24
    1704:	1a 82       	std	Y+2, r1	; 0x02
    1706:	19 82       	std	Y+1, r1	; 0x01
    1708:	1b 82       	std	Y+3, r1	; 0x03
    170a:	1c 82       	std	Y+4, r1	; 0x04
    170c:	1d 82       	std	Y+5, r1	; 0x05
    170e:	1e 82       	std	Y+6, r1	; 0x06
    1710:	80 e0       	ldi	r24, 0x00	; 0
    1712:	94 e0       	ldi	r25, 0x04	; 4
    1714:	a0 e0       	ldi	r26, 0x00	; 0
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	8f 83       	std	Y+7, r24	; 0x07
    171a:	98 87       	std	Y+8, r25	; 0x08
    171c:	a9 87       	std	Y+9, r26	; 0x09
    171e:	ba 87       	std	Y+10, r27	; 0x0a
    1720:	1b 86       	std	Y+11, r1	; 0x0b
    1722:	1c 86       	std	Y+12, r1	; 0x0c
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	8d 87       	std	Y+13, r24	; 0x0d
    1728:	1e 86       	std	Y+14, r1	; 0x0e
    172a:	1f 86       	std	Y+15, r1	; 0x0f
    172c:	18 8a       	std	Y+16, r1	; 0x10
    172e:	19 8a       	std	Y+17, r1	; 0x11
    1730:	1a 8a       	std	Y+18, r1	; 0x12
    1732:	6f 81       	ldd	r22, Y+7	; 0x07
    1734:	78 85       	ldd	r23, Y+8	; 0x08
    1736:	89 85       	ldd	r24, Y+9	; 0x09
    1738:	9a 85       	ldd	r25, Y+10	; 0x0a
    173a:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	4a e7       	ldi	r20, 0x7A	; 122
    1744:	56 e4       	ldi	r21, 0x46	; 70
    1746:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    174a:	6b 83       	std	Y+3, r22	; 0x03
    174c:	7c 83       	std	Y+4, r23	; 0x04
    174e:	8d 83       	std	Y+5, r24	; 0x05
    1750:	9e 83       	std	Y+6, r25	; 0x06
    1752:	2b 85       	ldd	r18, Y+11	; 0x0b
    1754:	3c 85       	ldd	r19, Y+12	; 0x0c
    1756:	4d 85       	ldd	r20, Y+13	; 0x0d
    1758:	5e 85       	ldd	r21, Y+14	; 0x0e
    175a:	6f 85       	ldd	r22, Y+15	; 0x0f
    175c:	78 89       	ldd	r23, Y+16	; 0x10
    175e:	89 89       	ldd	r24, Y+17	; 0x11
    1760:	9a 89       	ldd	r25, Y+18	; 0x12
    1762:	0e 94 c1 12 	call	0x2582	; 0x2582 <__floatundisf>
    1766:	6b 01       	movw	r12, r22
    1768:	7c 01       	movw	r14, r24
    176a:	b8 01       	movw	r22, r16
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    1774:	2b 81       	ldd	r18, Y+3	; 0x03
    1776:	3c 81       	ldd	r19, Y+4	; 0x04
    1778:	4d 81       	ldd	r20, Y+5	; 0x05
    177a:	5e 81       	ldd	r21, Y+6	; 0x06
    177c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__divsf3>
    1780:	9b 01       	movw	r18, r22
    1782:	ac 01       	movw	r20, r24
    1784:	c7 01       	movw	r24, r14
    1786:	b6 01       	movw	r22, r12
    1788:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__subsf3>
    178c:	0e 94 55 12 	call	0x24aa	; 0x24aa <__fixunssfsi>
    1790:	7a 83       	std	Y+2, r23	; 0x02
    1792:	69 83       	std	Y+1, r22	; 0x01
    1794:	08 3e       	cpi	r16, 0xE8	; 232
    1796:	13 40       	sbci	r17, 0x03	; 3
    1798:	c0 f0       	brcs	.+48     	; 0x17ca <timing_init_1+0xe8>
    179a:	89 81       	ldd	r24, Y+1	; 0x01
    179c:	9a 81       	ldd	r25, Y+2	; 0x02
    179e:	ed e4       	ldi	r30, 0x4D	; 77
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	93 83       	std	Z+3, r25	; 0x03
    17a4:	82 83       	std	Z+2, r24	; 0x02
    17a6:	10 82       	st	Z, r1
    17a8:	85 e0       	ldi	r24, 0x05	; 5
    17aa:	81 83       	std	Z+1, r24	; 0x01
    17ac:	e1 e5       	ldi	r30, 0x51	; 81
    17ae:	f1 e0       	ldi	r31, 0x01	; 1
    17b0:	80 81       	ld	r24, Z
    17b2:	82 60       	ori	r24, 0x02	; 2
    17b4:	80 83       	st	Z, r24
    17b6:	89 eb       	ldi	r24, 0xB9	; 185
    17b8:	9a e0       	ldi	r25, 0x0A	; 10
    17ba:	0e 94 4c 10 	call	0x2098	; 0x2098 <timer1_initialize_callback_OVF>
    17be:	8d e4       	ldi	r24, 0x4D	; 77
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <timer1_initialization>
    17c6:	80 e0       	ldi	r24, 0x00	; 0
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <timing_init_1+0xea>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	62 96       	adiw	r28, 0x12	; 18
    17ce:	0f b6       	in	r0, 0x3f	; 63
    17d0:	f8 94       	cli
    17d2:	de bf       	out	0x3e, r29	; 62
    17d4:	0f be       	out	0x3f, r0	; 63
    17d6:	cd bf       	out	0x3d, r28	; 61
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	1f 91       	pop	r17
    17de:	0f 91       	pop	r16
    17e0:	ff 90       	pop	r15
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	08 95       	ret

000017ea <timing_start_1>:
    17ea:	8d e4       	ldi	r24, 0x4D	; 77
    17ec:	91 e0       	ldi	r25, 0x01	; 1
    17ee:	0e 94 28 10 	call	0x2050	; 0x2050 <timer1_start>
    17f2:	08 95       	ret

000017f4 <timing_time_out>:
 */
timing_enu_timeout_state_t timing_time_out(uint16_t copy_u16_time_out_sec){
	timing_enu_timeout_state_t enu_time_state = TIMING_NOT_TIME_OUT;
	uint16_t u16_systick_copy  = U8_ZERO_VALUE;
	uint16_t u16_actual_time  = U8_ZERO_VALUE;
	if(gs_enu_catch_state == TIMING_CATCH){
    17f4:	20 91 30 01 	lds	r18, 0x0130	; 0x800130 <gs_enu_catch_state>
    17f8:	21 11       	cpse	r18, r1
    17fa:	10 c0       	rjmp	.+32     	; 0x181c <timing_time_out+0x28>
		gs_u16_timestamp = gs_u16_sys_tick;
    17fc:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <gs_u16_sys_tick>
    1800:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <gs_u16_sys_tick+0x1>
    1804:	30 93 2f 01 	sts	0x012F, r19	; 0x80012f <gs_u16_timestamp+0x1>
    1808:	20 93 2e 01 	sts	0x012E, r18	; 0x80012e <gs_u16_timestamp>
		u16_systick_copy = gs_u16_sys_tick;
    180c:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <gs_u16_sys_tick>
    1810:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <gs_u16_sys_tick+0x1>
		gs_enu_catch_state =TIMING_NOT_CATCH;
    1814:	41 e0       	ldi	r20, 0x01	; 1
    1816:	40 93 30 01 	sts	0x0130, r20	; 0x800130 <gs_enu_catch_state>
    181a:	04 c0       	rjmp	.+8      	; 0x1824 <timing_time_out+0x30>
		}else{
		u16_systick_copy = gs_u16_sys_tick;
    181c:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <gs_u16_sys_tick>
    1820:	30 91 32 01 	lds	r19, 0x0132	; 0x800132 <gs_u16_sys_tick+0x1>
	}
	
	if(gs_u16_timestamp > u16_systick_copy){
    1824:	40 91 2e 01 	lds	r20, 0x012E	; 0x80012e <gs_u16_timestamp>
    1828:	50 91 2f 01 	lds	r21, 0x012F	; 0x80012f <gs_u16_timestamp+0x1>
    182c:	24 17       	cp	r18, r20
    182e:	35 07       	cpc	r19, r21
    1830:	28 f4       	brcc	.+10     	; 0x183c <timing_time_out+0x48>
		u16_actual_time = (TIMING_MAX_SYS_TICK-gs_u16_timestamp)+ u16_systick_copy;
    1832:	24 1b       	sub	r18, r20
    1834:	35 0b       	sbc	r19, r21
    1836:	21 50       	subi	r18, 0x01	; 1
    1838:	31 09       	sbc	r19, r1
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <timing_time_out+0x4c>
		}else{
		u16_actual_time = u16_systick_copy - gs_u16_timestamp;
    183c:	24 1b       	sub	r18, r20
    183e:	35 0b       	sbc	r19, r21
	}
	
	if(u16_actual_time >= copy_u16_time_out_sec){
    1840:	28 17       	cp	r18, r24
    1842:	39 07       	cpc	r19, r25
    1844:	40 f0       	brcs	.+16     	; 0x1856 <timing_time_out+0x62>
		gs_enu_catch_state = TIMING_CATCH;
    1846:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <gs_enu_catch_state>
		enu_time_state = TIMING_TIME_OUT;
		gs_u16_timestamp = (uint16_t)U8_ZERO_VALUE;
    184a:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <gs_u16_timestamp+0x1>
    184e:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <gs_u16_timestamp>
		u16_actual_time = u16_systick_copy - gs_u16_timestamp;
	}
	
	if(u16_actual_time >= copy_u16_time_out_sec){
		gs_enu_catch_state = TIMING_CATCH;
		enu_time_state = TIMING_TIME_OUT;
    1852:	80 e0       	ldi	r24, 0x00	; 0
    1854:	08 95       	ret
		gs_u16_timestamp = (uint16_t)U8_ZERO_VALUE;
		}else{
		enu_time_state = TIMING_NOT_TIME_OUT;
    1856:	81 e0       	ldi	r24, 0x01	; 1
	}
	return  enu_time_state;
	
}
    1858:	08 95       	ret

0000185a <timing_break_time_out>:
 *
 * This function resets the catch state and the timestamp used for time-out calculations.
 * It can be used to prematurely exit a time-out condition.
 */
void timing_break_time_out(void){
	gs_enu_catch_state = TIMING_CATCH;
    185a:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <gs_enu_catch_state>
	gs_u16_timestamp = (uint16_t)U8_ZERO_VALUE;
    185e:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <gs_u16_timestamp+0x1>
    1862:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <gs_u16_timestamp>
    1866:	08 95       	ret

00001868 <delay_s>:
 *
 * This function blocks the program execution for the specified duration in seconds.
 *
 * @param copy_u16_delay The delay duration in seconds.
 */
void delay_s(uint16_t copy_u16_delay) {
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
    186c:	ec 01       	movw	r28, r24
    // Loop until the specified delay time has passed
    while (timing_time_out(copy_u16_delay) != TIMING_TIME_OUT) {
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <timing_time_out>
    1874:	81 11       	cpse	r24, r1
    1876:	fb cf       	rjmp	.-10     	; 0x186e <delay_s+0x6>
        // Do nothing, waiting for the delay to complete
    }
}
    1878:	df 91       	pop	r29
    187a:	cf 91       	pop	r28
    187c:	08 95       	ret

0000187e <timing_init_2>:
 *         - TIMING_OK if initialization was successful.
 *         - TIMING_NOK if the provided callback is NULL.
 */
timing_enu_return_state_t timing_init_2(void (*callback)(void)){
	timing_enu_return_state_t enu_return_state = TIMING_OK;
	if(callback == NULL ){
    187e:	00 97       	sbiw	r24, 0x00	; 0
    1880:	a1 f0       	breq	.+40     	; 0x18aa <timing_init_2+0x2c>
		enu_return_state =TIMING_NOK;
	}else{
		timer_configuration_2.OCR= U8_ZERO_VALUE;
    1882:	e2 e5       	ldi	r30, 0x52	; 82
    1884:	f1 e0       	ldi	r31, 0x01	; 1
    1886:	13 82       	std	Z+3, r1	; 0x03
    1888:	12 82       	std	Z+2, r1	; 0x02
		timer_configuration_2.timer_mode = TIMER_MODE_NORMAL;
    188a:	10 82       	st	Z, r1
		timer_configuration_2.timer_prescaller=TIMER_PRESCALLER_0;
    188c:	21 e0       	ldi	r18, 0x01	; 1
    188e:	21 83       	std	Z+1, r18	; 0x01
		timer_configuration_2.timer_of_interrupt =TIMER_OVERFLOW_INTERRUPT_ENABLE;
    1890:	e6 e5       	ldi	r30, 0x56	; 86
    1892:	f1 e0       	ldi	r31, 0x01	; 1
    1894:	20 81       	ld	r18, Z
    1896:	22 60       	ori	r18, 0x02	; 2
    1898:	20 83       	st	Z, r18
		timer2_initialize_callback_OVF(callback);
    189a:	0e 94 19 11 	call	0x2232	; 0x2232 <timer2_initialize_callback_OVF>
		timer2_initialization(&timer_configuration_2);
    189e:	82 e5       	ldi	r24, 0x52	; 82
    18a0:	91 e0       	ldi	r25, 0x01	; 1
    18a2:	0e 94 a4 10 	call	0x2148	; 0x2148 <timer2_initialization>
 * @return The status of the timing initialization:
 *         - TIMING_OK if initialization was successful.
 *         - TIMING_NOK if the provided callback is NULL.
 */
timing_enu_return_state_t timing_init_2(void (*callback)(void)){
	timing_enu_return_state_t enu_return_state = TIMING_OK;
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	08 95       	ret
	if(callback == NULL ){
		enu_return_state =TIMING_NOK;
    18aa:	81 e0       	ldi	r24, 0x01	; 1
		timer2_initialize_callback_OVF(callback);
		timer2_initialization(&timer_configuration_2);
	}

	return enu_return_state;
}
    18ac:	08 95       	ret

000018ae <timing_start_2>:
 *
 * This function resets the catch state and the timestamp used for time-out calculations.
 * It can be used to prematurely exit a time-out condition.
 */
void timing_start_2(void){
	timer2_start(&timer_configuration_2);
    18ae:	82 e5       	ldi	r24, 0x52	; 82
    18b0:	91 e0       	ldi	r25, 0x01	; 1
    18b2:	0e 94 ef 10 	call	0x21de	; 0x21de <timer2_start>
    18b6:	08 95       	ret

000018b8 <timing_stop_2>:
 * @brief Stops timer 2.
 *
 * This function stops timer 2, halting its counting operation.
 */
void timing_stop_2(void){
	timer2_stop(&timer_configuration_2);
    18b8:	82 e5       	ldi	r24, 0x52	; 82
    18ba:	91 e0       	ldi	r25, 0x01	; 1
    18bc:	0e 94 01 11 	call	0x2202	; 0x2202 <timer2_stop>
    18c0:	08 95       	ret

000018c2 <timing_get_ticks_2>:
 *
 * @param[inout] ptr_u8_ticks Pointer to a variable where the tick count will be stored.
 */
void timing_get_ticks_2(uint8_t *ptr_u8_ticks){
	
	timer2_get_tcnt(&timer_configuration_2,ptr_u8_ticks);
    18c2:	bc 01       	movw	r22, r24
    18c4:	82 e5       	ldi	r24, 0x52	; 82
    18c6:	91 e0       	ldi	r25, 0x01	; 1
    18c8:	0e 94 10 11 	call	0x2220	; 0x2220 <timer2_get_tcnt>
    18cc:	08 95       	ret

000018ce <HULTRASONIC_vidTimerCBF>:
 * This function is a callback that is executed when the timer overflows.
 * It increments the overflow count for timing purposes in the ultrasonic sensor module.
 */
static void HULTRASONIC_vidTimerCBF(void)
{
	g_v_u16_ovfCounts++;
    18ce:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <g_v_u16_ovfCounts>
    18d2:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <g_v_u16_ovfCounts+0x1>
    18d6:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <g_v_u16_ovfCounts+0x2>
    18da:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <g_v_u16_ovfCounts+0x3>
    18de:	01 96       	adiw	r24, 0x01	; 1
    18e0:	a1 1d       	adc	r26, r1
    18e2:	b1 1d       	adc	r27, r1
    18e4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <g_v_u16_ovfCounts>
    18e8:	90 93 3a 01 	sts	0x013A, r25	; 0x80013a <g_v_u16_ovfCounts+0x1>
    18ec:	a0 93 3b 01 	sts	0x013B, r26	; 0x80013b <g_v_u16_ovfCounts+0x2>
    18f0:	b0 93 3c 01 	sts	0x013C, r27	; 0x80013c <g_v_u16_ovfCounts+0x3>
    18f4:	08 95       	ret

000018f6 <delay_10u>:
	HULTRASONIC_vidTrigger();
	
	return global_f64distance;
}

void delay_10u(void){
    18f6:	cf 93       	push	r28
    18f8:	df 93       	push	r29
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <delay_10u+0x6>
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
	volatile uint16_t u16_counter;
	for(u16_counter= U8_ZERO_VALUE; u16_counter < DELAY_10_U; u16_counter++);
    1900:	1a 82       	std	Y+2, r1	; 0x02
    1902:	19 82       	std	Y+1, r1	; 0x01
    1904:	05 c0       	rjmp	.+10     	; 0x1910 <delay_10u+0x1a>
    1906:	89 81       	ldd	r24, Y+1	; 0x01
    1908:	9a 81       	ldd	r25, Y+2	; 0x02
    190a:	01 96       	adiw	r24, 0x01	; 1
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	0a 97       	sbiw	r24, 0x0a	; 10
    1916:	b8 f3       	brcs	.-18     	; 0x1906 <delay_10u+0x10>
}
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	df 91       	pop	r29
    191e:	cf 91       	pop	r28
    1920:	08 95       	ret

00001922 <HULTRASONIC_vidTrigger>:
 * stops the associated timing.
 */
static void HULTRASONIC_vidTrigger(void)
{
	
	(void) DIO_write_pin(TRIG_PIN, DIO_PIN_HIGH_LEVEL);
    1922:	41 e0       	ldi	r20, 0x01	; 1
    1924:	63 e0       	ldi	r22, 0x03	; 3
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	delay_10u();
    192c:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <delay_10u>
	(void) DIO_write_pin(TRIG_PIN, DIO_PIN_LOW_LEVEL);
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	63 e0       	ldi	r22, 0x03	; 3
    1934:	81 e0       	ldi	r24, 0x01	; 1
    1936:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
    193a:	08 95       	ret

0000193c <HULTRASONIC_vidSigCalc>:
 * to travel to an object and back, based on the captured ticks. It uses external interrupt
 * to capture the signal changes and calculates the distance using the sound velocity and
 * tick time.
 */
void HULTRASONIC_vidSigCalc(void)
{
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	00 d0       	rcall	.+0      	; 0x1942 <HULTRASONIC_vidSigCalc+0x6>
    1942:	cd b7       	in	r28, 0x3d	; 61
    1944:	de b7       	in	r29, 0x3e	; 62
	extim_str_config_t ptr_str_extim_config;
	ptr_str_extim_config.enu_exti_interrupt_no= EXTI_1;
    1946:	81 e0       	ldi	r24, 0x01	; 1
    1948:	89 83       	std	Y+1, r24	; 0x01
	
	if (g_v_u8_flag == 0)
    194a:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_v_u8_flag>
    194e:	81 11       	cpse	r24, r1
    1950:	1a c0       	rjmp	.+52     	; 0x1986 <HULTRASONIC_vidSigCalc+0x4a>
	{
		g_v_u8_flag = 1;
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <g_v_u8_flag>
		g_v_u16_ovfCounts = 0;
    1958:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_v_u16_ovfCounts>
    195c:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <g_v_u16_ovfCounts+0x1>
    1960:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <g_v_u16_ovfCounts+0x2>
    1964:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <g_v_u16_ovfCounts+0x3>
		timing_start_2();	
    1968:	0e 94 57 0c 	call	0x18ae	; 0x18ae <timing_start_2>
		ptr_str_extim_config.enu_edge_detection = EXTI_FALLING_EDGE;
    196c:	82 e0       	ldi	r24, 0x02	; 2
    196e:	8a 83       	std	Y+2, r24	; 0x02
		extim_init(&ptr_str_extim_config, HULTRASONIC_vidSigCalc);
    1970:	6e e9       	ldi	r22, 0x9E	; 158
    1972:	7c e0       	ldi	r23, 0x0C	; 12
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	0e 94 9a 05 	call	0xb34	; 0xb34 <extim_init>
		extim_enable(&ptr_str_extim_config);
    197c:	ce 01       	movw	r24, r28
    197e:	01 96       	adiw	r24, 0x01	; 1
    1980:	0e 94 b1 05 	call	0xb62	; 0xb62 <extim_enable>
    1984:	5c c0       	rjmp	.+184    	; 0x1a3e <HULTRASONIC_vidSigCalc+0x102>
	}
	else if (g_v_u8_flag == 1)
    1986:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <g_v_u8_flag>
    198a:	81 30       	cpi	r24, 0x01	; 1
    198c:	09 f0       	breq	.+2      	; 0x1990 <HULTRASONIC_vidSigCalc+0x54>
    198e:	57 c0       	rjmp	.+174    	; 0x1a3e <HULTRASONIC_vidSigCalc+0x102>
	{
		timing_stop_2();
    1990:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <timing_stop_2>
		timing_get_ticks_2(&g_v_u8_cap);
    1994:	87 e3       	ldi	r24, 0x37	; 55
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <timing_get_ticks_2>
		g_v_u16_ovf = g_v_u16_ovfCounts;
    199c:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <g_v_u16_ovfCounts>
    19a0:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <g_v_u16_ovfCounts+0x1>
    19a4:	a0 91 3b 01 	lds	r26, 0x013B	; 0x80013b <g_v_u16_ovfCounts+0x2>
    19a8:	b0 91 3c 01 	lds	r27, 0x013C	; 0x80013c <g_v_u16_ovfCounts+0x3>
    19ac:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <g_v_u16_ovf+0x1>
    19b0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <g_v_u16_ovf>
	
		/*********************  Calculate total ticks   *******************************************/
		global_u32Ticks = g_v_u8_cap + (256*((uint32_t)g_v_u16_ovf));
    19b4:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <g_v_u16_ovf>
    19b8:	70 91 63 01 	lds	r23, 0x0163	; 0x800163 <g_v_u16_ovf+0x1>
    19bc:	cb 01       	movw	r24, r22
    19be:	a0 e0       	ldi	r26, 0x00	; 0
    19c0:	b0 e0       	ldi	r27, 0x00	; 0
    19c2:	ba 2f       	mov	r27, r26
    19c4:	a9 2f       	mov	r26, r25
    19c6:	98 2f       	mov	r25, r24
    19c8:	88 27       	eor	r24, r24
    19ca:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <g_v_u8_cap>
    19ce:	bc 01       	movw	r22, r24
    19d0:	cd 01       	movw	r24, r26
    19d2:	62 0f       	add	r22, r18
    19d4:	71 1d       	adc	r23, r1
    19d6:	81 1d       	adc	r24, r1
    19d8:	91 1d       	adc	r25, r1
    19da:	60 93 5e 01 	sts	0x015E, r22	; 0x80015e <global_u32Ticks>
    19de:	70 93 5f 01 	sts	0x015F, r23	; 0x80015f <global_u32Ticks+0x1>
    19e2:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <global_u32Ticks+0x2>
    19e6:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <global_u32Ticks+0x3>
		/* sound velocity = 34300 cm/sec
			 tick time = 1/(F_CPU) as 1 is prescalar -> tick_time = 0.0625us -> 6.25*e-8 sec
			 total_time = t_ticks * 6.25e-8 sec
			 distance = (sound_velocity * total_time)/2 -> (343000 * total_time)/2 -> (17150 * t_ticks * 6.25*e-8) -> (t_ticks * 0.0010718)
		 */		
		global_f64distance = (double)global_u32Ticks * CONSTANT_TO_DISTANCE;
    19ea:	0e 94 84 12 	call	0x2508	; 0x2508 <__floatunsisf>
    19ee:	24 ea       	ldi	r18, 0xA4	; 164
    19f0:	3b e7       	ldi	r19, 0x7B	; 123
    19f2:	4c e8       	ldi	r20, 0x8C	; 140
    19f4:	5a e3       	ldi	r21, 0x3A	; 58
    19f6:	0e 94 79 13 	call	0x26f2	; 0x26f2 <__mulsf3>
    19fa:	60 93 33 01 	sts	0x0133, r22	; 0x800133 <global_f64distance>
    19fe:	70 93 34 01 	sts	0x0134, r23	; 0x800134 <global_f64distance+0x1>
    1a02:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <global_f64distance+0x2>
    1a06:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <global_f64distance+0x3>

		/*********************  reset global ovf counts and flag    *******************************************/
		g_v_u16_ovf = 0; g_v_u16_ovfCounts = 0;  g_v_u8_flag = 0;
    1a0a:	10 92 63 01 	sts	0x0163, r1	; 0x800163 <g_v_u16_ovf+0x1>
    1a0e:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <g_v_u16_ovf>
    1a12:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <g_v_u16_ovfCounts>
    1a16:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <g_v_u16_ovfCounts+0x1>
    1a1a:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <g_v_u16_ovfCounts+0x2>
    1a1e:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <g_v_u16_ovfCounts+0x3>
    1a22:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <g_v_u8_flag>

		/*********************  Set EXTINT sense Rising Edge    *******************************************/
		
		ptr_str_extim_config.enu_edge_detection= EXTI_RISING_EDGE;
    1a26:	83 e0       	ldi	r24, 0x03	; 3
    1a28:	8a 83       	std	Y+2, r24	; 0x02
		extim_init(&ptr_str_extim_config, HULTRASONIC_vidSigCalc);
    1a2a:	6e e9       	ldi	r22, 0x9E	; 158
    1a2c:	7c e0       	ldi	r23, 0x0C	; 12
    1a2e:	ce 01       	movw	r24, r28
    1a30:	01 96       	adiw	r24, 0x01	; 1
    1a32:	0e 94 9a 05 	call	0xb34	; 0xb34 <extim_init>
		extim_enable(&ptr_str_extim_config);
    1a36:	ce 01       	movw	r24, r28
    1a38:	01 96       	adiw	r24, 0x01	; 1
    1a3a:	0e 94 b1 05 	call	0xb62	; 0xb62 <extim_enable>

	}
}
    1a3e:	0f 90       	pop	r0
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <HULTRASONIC_vidInit>:
 *
 * This function initializes the ultrasonic sensor by configuring the necessary pins
 * and setting up external interrupt and timing for signal detection and measurement.
 */
void HULTRASONIC_vidInit(void)
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	00 d0       	rcall	.+0      	; 0x1a4e <HULTRASONIC_vidInit+0x6>
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
	extim_str_config_t ptr_str_extim_config={.enu_exti_interrupt_no= EXTI_1, .enu_edge_detection = EXTI_RISING_EDGE};
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
    1a56:	83 e0       	ldi	r24, 0x03	; 3
    1a58:	8a 83       	std	Y+2, r24	; 0x02
	
	DIO_init(TRIG_PIN, DIO_PIN_OUTPUT);
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	63 e0       	ldi	r22, 0x03	; 3
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
	DIO_init(SIG_PIN, DIO_PIN_INPUT);
    1a64:	40 e0       	ldi	r20, 0x00	; 0
    1a66:	63 e0       	ldi	r22, 0x03	; 3
    1a68:	83 e0       	ldi	r24, 0x03	; 3
    1a6a:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <DIO_init>
	DIO_write_pin(TRIG_PIN, DIO_PIN_LOW_LEVEL);
    1a6e:	40 e0       	ldi	r20, 0x00	; 0
    1a70:	63 e0       	ldi	r22, 0x03	; 3
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <DIO_write_pin>
	extim_init(&ptr_str_extim_config, HULTRASONIC_vidSigCalc);
    1a78:	6e e9       	ldi	r22, 0x9E	; 158
    1a7a:	7c e0       	ldi	r23, 0x0C	; 12
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	0e 94 9a 05 	call	0xb34	; 0xb34 <extim_init>
	timing_init_2(HULTRASONIC_vidTimerCBF);
    1a84:	87 e6       	ldi	r24, 0x67	; 103
    1a86:	9c e0       	ldi	r25, 0x0C	; 12
    1a88:	0e 94 3f 0c 	call	0x187e	; 0x187e <timing_init_2>
	

}
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	df 91       	pop	r29
    1a92:	cf 91       	pop	r28
    1a94:	08 95       	ret

00001a96 <HULTRASONIC_vidInterruptEnable>:
 *
 * This function enables the external interrupt for the ultrasonic sensor with
 * the specified configuration.
 */
void HULTRASONIC_vidInterruptEnable(void)
{
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	00 d0       	rcall	.+0      	; 0x1a9c <HULTRASONIC_vidInterruptEnable+0x6>
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
	extim_str_config_t ptr_str_extim_config={.enu_exti_interrupt_no= EXTI_1, .enu_edge_detection= EXTI_RISING_EDGE};
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	89 83       	std	Y+1, r24	; 0x01
    1aa4:	83 e0       	ldi	r24, 0x03	; 3
    1aa6:	8a 83       	std	Y+2, r24	; 0x02
	extim_enable(&ptr_str_extim_config);
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	0e 94 b1 05 	call	0xb62	; 0xb62 <extim_enable>

}
    1ab0:	0f 90       	pop	r0
    1ab2:	0f 90       	pop	r0
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	08 95       	ret

00001aba <HULTRASONIC_vidInterruptDisable>:
 *
 * This function disables the external interrupt for the ultrasonic sensor and
 * stops the associated timing.
 */
void HULTRASONIC_vidInterruptDisable(void)
{
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <HULTRASONIC_vidInterruptDisable+0x6>
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	extim_str_config_t ptr_str_extim_config = {.enu_exti_interrupt_no= EXTI_1, .enu_edge_detection= EXTI_RISING_EDGE};
    1ac4:	81 e0       	ldi	r24, 0x01	; 1
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    1ac8:	83 e0       	ldi	r24, 0x03	; 3
    1aca:	8a 83       	std	Y+2, r24	; 0x02
	timing_stop_2();
    1acc:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <timing_stop_2>
	extim_disable(&ptr_str_extim_config);
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	01 96       	adiw	r24, 0x01	; 1
    1ad4:	0e 94 bb 05 	call	0xb76	; 0xb76 <extim_disable>
}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	08 95       	ret

00001ae2 <HULTRASONIC_u8Read>:
 *
 * @return The calculated distance in centimeters.
 */
float64_t HULTRASONIC_u8Read(void)
{
	HULTRASONIC_vidTrigger();
    1ae2:	0e 94 91 0c 	call	0x1922	; 0x1922 <HULTRASONIC_vidTrigger>
	
	return global_f64distance;
    1ae6:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <global_f64distance>
    1aea:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <global_f64distance+0x1>
    1aee:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <global_f64distance+0x2>
    1af2:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <global_f64distance+0x3>
}
    1af6:	08 95       	ret

00001af8 <main>:

#include "APP/APP_interface.h"

int main(void)
{
	APP_vidInit();
    1af8:	0e 94 6e 01 	call	0x2dc	; 0x2dc <APP_vidInit>
	/* Replace with your application code */
	while (1)
	{
		APP_vidStart();
    1afc:	0e 94 c9 01 	call	0x392	; 0x392 <APP_vidStart>
    1b00:	fd cf       	rjmp	.-6      	; 0x1afc <main+0x4>

00001b02 <DIO_init>:

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    1b02:	68 30       	cpi	r22, 0x08	; 8
    1b04:	a0 f5       	brcc	.+104    	; 0x1b6e <DIO_init+0x6c>
	{
		if (copy_enu_port == PORTA)
    1b06:	81 11       	cpse	r24, r1
    1b08:	0b c0       	rjmp	.+22     	; 0x1b20 <DIO_init+0x1e>
		{
			DATA_DIRECTION_PORTA |= copy_enu_direction << copy_enu_pin;
    1b0a:	8a b3       	in	r24, 0x1a	; 26
    1b0c:	50 e0       	ldi	r21, 0x00	; 0
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <DIO_init+0x12>
    1b10:	44 0f       	add	r20, r20
    1b12:	55 1f       	adc	r21, r21
    1b14:	6a 95       	dec	r22
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <DIO_init+0xe>
    1b18:	48 2b       	or	r20, r24
    1b1a:	4a bb       	out	0x1a, r20	; 26
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	08 95       	ret
		if (copy_enu_port == PORTA)
		{
			DATA_DIRECTION_PORTA |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTB)
    1b20:	81 30       	cpi	r24, 0x01	; 1
    1b22:	59 f4       	brne	.+22     	; 0x1b3a <DIO_init+0x38>
		{
			DATA_DIRECTION_PORTB |= copy_enu_direction << copy_enu_pin;
    1b24:	87 b3       	in	r24, 0x17	; 23
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_init+0x2c>
    1b2a:	44 0f       	add	r20, r20
    1b2c:	55 1f       	adc	r21, r21
    1b2e:	6a 95       	dec	r22
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_init+0x28>
    1b32:	48 2b       	or	r20, r24
    1b34:	47 bb       	out	0x17, r20	; 23
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	08 95       	ret
		else if (copy_enu_port == PORTB)
		{
			DATA_DIRECTION_PORTB |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTC)
    1b3a:	82 30       	cpi	r24, 0x02	; 2
    1b3c:	59 f4       	brne	.+22     	; 0x1b54 <DIO_init+0x52>
		{
			DATA_DIRECTION_PORTC |= copy_enu_direction << copy_enu_pin;
    1b3e:	84 b3       	in	r24, 0x14	; 20
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <DIO_init+0x46>
    1b44:	44 0f       	add	r20, r20
    1b46:	55 1f       	adc	r21, r21
    1b48:	6a 95       	dec	r22
    1b4a:	e2 f7       	brpl	.-8      	; 0x1b44 <DIO_init+0x42>
    1b4c:	48 2b       	or	r20, r24
    1b4e:	44 bb       	out	0x14, r20	; 20
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	08 95       	ret
		else if (copy_enu_port == PORTC)
		{
			DATA_DIRECTION_PORTC |= copy_enu_direction << copy_enu_pin;
			
		}
		else if (copy_enu_port == PORTD)
    1b54:	83 30       	cpi	r24, 0x03	; 3
    1b56:	69 f4       	brne	.+26     	; 0x1b72 <DIO_init+0x70>
		{
			DATA_DIRECTION_PORTD |= copy_enu_direction << copy_enu_pin;
    1b58:	81 b3       	in	r24, 0x11	; 17
    1b5a:	50 e0       	ldi	r21, 0x00	; 0
    1b5c:	02 c0       	rjmp	.+4      	; 0x1b62 <DIO_init+0x60>
    1b5e:	44 0f       	add	r20, r20
    1b60:	55 1f       	adc	r21, r21
    1b62:	6a 95       	dec	r22
    1b64:	e2 f7       	brpl	.-8      	; 0x1b5e <DIO_init+0x5c>
    1b66:	48 2b       	or	r20, r24
    1b68:	41 bb       	out	0x11, r20	; 17
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */

dio_enu_return_state_t DIO_init (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_u8_enu_direction_t copy_enu_direction)
{
	dio_enu_return_state_t enu_return_state = DIO_OK;
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	08 95       	ret
			DATA_DIRECTION_PORTD |= copy_enu_direction << copy_enu_pin;
			
		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    1b72:	82 e0       	ldi	r24, 0x02	; 2
	else{
		enu_return_state = DIO_INVALID_PIN;
	}

	return enu_return_state;
}
    1b74:	08 95       	ret

00001b76 <DIO_write_pin>:
dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    1b76:	68 30       	cpi	r22, 0x08	; 8
    1b78:	08 f0       	brcs	.+2      	; 0x1b7c <DIO_write_pin+0x6>
    1b7a:	74 c0       	rjmp	.+232    	; 0x1c64 <DIO_write_pin+0xee>
	{
		if (copy_enu_port == PORTA)
    1b7c:	81 11       	cpse	r24, r1
    1b7e:	1b c0       	rjmp	.+54     	; 0x1bb6 <DIO_write_pin+0x40>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1b80:	41 30       	cpi	r20, 0x01	; 1
    1b82:	61 f4       	brne	.+24     	; 0x1b9c <DIO_write_pin+0x26>
			{
				WR_PORT_A |= (U8_ONE_VALUE << copy_enu_pin);
    1b84:	2b b3       	in	r18, 0x1b	; 27
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_write_pin+0x1a>
    1b8c:	88 0f       	add	r24, r24
    1b8e:	99 1f       	adc	r25, r25
    1b90:	6a 95       	dec	r22
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_write_pin+0x16>
    1b94:	82 2b       	or	r24, r18
    1b96:	8b bb       	out	0x1b, r24	; 27
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1b98:	80 e0       	ldi	r24, 0x00	; 0
    1b9a:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_A |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_A &= ~(U8_ONE_VALUE << copy_enu_pin);
    1b9c:	2b b3       	in	r18, 0x1b	; 27
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_write_pin+0x32>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	6a 95       	dec	r22
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_write_pin+0x2e>
    1bac:	80 95       	com	r24
    1bae:	82 23       	and	r24, r18
    1bb0:	8b bb       	out	0x1b, r24	; 27
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1bb2:	80 e0       	ldi	r24, 0x00	; 0
    1bb4:	08 95       	ret
			else{
				WR_PORT_A &= ~(U8_ONE_VALUE << copy_enu_pin);
			}

		}
		else if (copy_enu_port == PORTB)
    1bb6:	81 30       	cpi	r24, 0x01	; 1
    1bb8:	d9 f4       	brne	.+54     	; 0x1bf0 <DIO_write_pin+0x7a>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1bba:	41 30       	cpi	r20, 0x01	; 1
    1bbc:	61 f4       	brne	.+24     	; 0x1bd6 <DIO_write_pin+0x60>
			{
				WR_PORT_B |= (U8_ONE_VALUE << copy_enu_pin);
    1bbe:	28 b3       	in	r18, 0x18	; 24
    1bc0:	81 e0       	ldi	r24, 0x01	; 1
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	02 c0       	rjmp	.+4      	; 0x1bca <DIO_write_pin+0x54>
    1bc6:	88 0f       	add	r24, r24
    1bc8:	99 1f       	adc	r25, r25
    1bca:	6a 95       	dec	r22
    1bcc:	e2 f7       	brpl	.-8      	; 0x1bc6 <DIO_write_pin+0x50>
    1bce:	82 2b       	or	r24, r18
    1bd0:	88 bb       	out	0x18, r24	; 24
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_B |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_B &= ~(U8_ONE_VALUE << copy_enu_pin);
    1bd6:	28 b3       	in	r18, 0x18	; 24
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_write_pin+0x6c>
    1bde:	88 0f       	add	r24, r24
    1be0:	99 1f       	adc	r25, r25
    1be2:	6a 95       	dec	r22
    1be4:	e2 f7       	brpl	.-8      	; 0x1bde <DIO_write_pin+0x68>
    1be6:	80 95       	com	r24
    1be8:	82 23       	and	r24, r18
    1bea:	88 bb       	out	0x18, r24	; 24
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1bec:	80 e0       	ldi	r24, 0x00	; 0
    1bee:	08 95       	ret
			else{
				WR_PORT_B &= ~(U8_ONE_VALUE << copy_enu_pin);
			}

		}
		else if (copy_enu_port == PORTC)
    1bf0:	82 30       	cpi	r24, 0x02	; 2
    1bf2:	d9 f4       	brne	.+54     	; 0x1c2a <DIO_write_pin+0xb4>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1bf4:	41 30       	cpi	r20, 0x01	; 1
    1bf6:	61 f4       	brne	.+24     	; 0x1c10 <DIO_write_pin+0x9a>
			{
				WR_PORT_C |= (U8_ONE_VALUE << copy_enu_pin);
    1bf8:	25 b3       	in	r18, 0x15	; 21
    1bfa:	81 e0       	ldi	r24, 0x01	; 1
    1bfc:	90 e0       	ldi	r25, 0x00	; 0
    1bfe:	02 c0       	rjmp	.+4      	; 0x1c04 <DIO_write_pin+0x8e>
    1c00:	88 0f       	add	r24, r24
    1c02:	99 1f       	adc	r25, r25
    1c04:	6a 95       	dec	r22
    1c06:	e2 f7       	brpl	.-8      	; 0x1c00 <DIO_write_pin+0x8a>
    1c08:	82 2b       	or	r24, r18
    1c0a:	85 bb       	out	0x15, r24	; 21
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1c0c:	80 e0       	ldi	r24, 0x00	; 0
    1c0e:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_C |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_C &= ~(U8_ONE_VALUE << copy_enu_pin);
    1c10:	25 b3       	in	r18, 0x15	; 21
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	90 e0       	ldi	r25, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <DIO_write_pin+0xa6>
    1c18:	88 0f       	add	r24, r24
    1c1a:	99 1f       	adc	r25, r25
    1c1c:	6a 95       	dec	r22
    1c1e:	e2 f7       	brpl	.-8      	; 0x1c18 <DIO_write_pin+0xa2>
    1c20:	80 95       	com	r24
    1c22:	82 23       	and	r24, r18
    1c24:	85 bb       	out	0x15, r24	; 21
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	08 95       	ret
			else{
				WR_PORT_C &= ~(U8_ONE_VALUE << copy_enu_pin);
			}

		}
		else if (copy_enu_port == PORTD)
    1c2a:	83 30       	cpi	r24, 0x03	; 3
    1c2c:	e9 f4       	brne	.+58     	; 0x1c68 <DIO_write_pin+0xf2>
		{
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
    1c2e:	41 30       	cpi	r20, 0x01	; 1
    1c30:	61 f4       	brne	.+24     	; 0x1c4a <DIO_write_pin+0xd4>
			{
				WR_PORT_D |= (U8_ONE_VALUE << copy_enu_pin);
    1c32:	22 b3       	in	r18, 0x12	; 18
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_write_pin+0xc8>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	6a 95       	dec	r22
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_write_pin+0xc4>
    1c42:	82 2b       	or	r24, r18
    1c44:	82 bb       	out	0x12, r24	; 18
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1c46:	80 e0       	ldi	r24, 0x00	; 0
    1c48:	08 95       	ret
			if (copy_enu_state == DIO_PIN_HIGH_LEVEL)
			{
				WR_PORT_D |= (U8_ONE_VALUE << copy_enu_pin);
			}
			else{
				WR_PORT_D &= ~(U8_ONE_VALUE << copy_enu_pin);
    1c4a:	22 b3       	in	r18, 0x12	; 18
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_write_pin+0xe0>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	6a 95       	dec	r22
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_write_pin+0xdc>
    1c5a:	80 95       	com	r24
    1c5c:	82 23       	and	r24, r18
    1c5e:	82 bb       	out	0x12, r24	; 18
 */

dio_enu_return_state_t DIO_write_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t copy_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	08 95       	ret
			}

		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    1c68:	82 e0       	ldi	r24, 0x02	; 2
	}



	return enu_return_state;
}
    1c6a:	08 95       	ret

00001c6c <DIO_read_pin>:
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;

	if (copy_enu_pin < DIO_MAX_PINS)
    1c6c:	68 30       	cpi	r22, 0x08	; 8
    1c6e:	08 f0       	brcs	.+2      	; 0x1c72 <DIO_read_pin+0x6>
    1c70:	64 c0       	rjmp	.+200    	; 0x1d3a <DIO_read_pin+0xce>
	{
		if (copy_enu_port == PORTA)
    1c72:	81 11       	cpse	r24, r1
    1c74:	17 c0       	rjmp	.+46     	; 0x1ca4 <DIO_read_pin+0x38>
		{
			*ptr_enu_state = ((RE_PORT_A & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    1c76:	79 b3       	in	r23, 0x19	; 25
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	9c 01       	movw	r18, r24
    1c7e:	06 2e       	mov	r0, r22
    1c80:	02 c0       	rjmp	.+4      	; 0x1c86 <DIO_read_pin+0x1a>
    1c82:	22 0f       	add	r18, r18
    1c84:	33 1f       	adc	r19, r19
    1c86:	0a 94       	dec	r0
    1c88:	e2 f7       	brpl	.-8      	; 0x1c82 <DIO_read_pin+0x16>
    1c8a:	87 2f       	mov	r24, r23
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	82 23       	and	r24, r18
    1c90:	93 23       	and	r25, r19
    1c92:	02 c0       	rjmp	.+4      	; 0x1c98 <DIO_read_pin+0x2c>
    1c94:	95 95       	asr	r25
    1c96:	87 95       	ror	r24
    1c98:	6a 95       	dec	r22
    1c9a:	e2 f7       	brpl	.-8      	; 0x1c94 <DIO_read_pin+0x28>
    1c9c:	fa 01       	movw	r30, r20
    1c9e:	80 83       	st	Z, r24
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
    1ca2:	08 95       	ret
		if (copy_enu_port == PORTA)
		{
			*ptr_enu_state = ((RE_PORT_A & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTB)
    1ca4:	81 30       	cpi	r24, 0x01	; 1
    1ca6:	b9 f4       	brne	.+46     	; 0x1cd6 <DIO_read_pin+0x6a>
		{
			*ptr_enu_state = ((RE_PORT_B & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    1ca8:	76 b3       	in	r23, 0x16	; 22
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	9c 01       	movw	r18, r24
    1cb0:	06 2e       	mov	r0, r22
    1cb2:	02 c0       	rjmp	.+4      	; 0x1cb8 <DIO_read_pin+0x4c>
    1cb4:	22 0f       	add	r18, r18
    1cb6:	33 1f       	adc	r19, r19
    1cb8:	0a 94       	dec	r0
    1cba:	e2 f7       	brpl	.-8      	; 0x1cb4 <DIO_read_pin+0x48>
    1cbc:	87 2f       	mov	r24, r23
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	82 23       	and	r24, r18
    1cc2:	93 23       	and	r25, r19
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <DIO_read_pin+0x5e>
    1cc6:	95 95       	asr	r25
    1cc8:	87 95       	ror	r24
    1cca:	6a 95       	dec	r22
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <DIO_read_pin+0x5a>
    1cce:	fa 01       	movw	r30, r20
    1cd0:	80 83       	st	Z, r24
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	08 95       	ret
		else if (copy_enu_port == PORTB)
		{
			*ptr_enu_state = ((RE_PORT_B & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTC)
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	b9 f4       	brne	.+46     	; 0x1d08 <DIO_read_pin+0x9c>
		{
			*ptr_enu_state = ((RE_PORT_C & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    1cda:	73 b3       	in	r23, 0x13	; 19
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	90 e0       	ldi	r25, 0x00	; 0
    1ce0:	9c 01       	movw	r18, r24
    1ce2:	06 2e       	mov	r0, r22
    1ce4:	02 c0       	rjmp	.+4      	; 0x1cea <DIO_read_pin+0x7e>
    1ce6:	22 0f       	add	r18, r18
    1ce8:	33 1f       	adc	r19, r19
    1cea:	0a 94       	dec	r0
    1cec:	e2 f7       	brpl	.-8      	; 0x1ce6 <DIO_read_pin+0x7a>
    1cee:	87 2f       	mov	r24, r23
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	82 23       	and	r24, r18
    1cf4:	93 23       	and	r25, r19
    1cf6:	02 c0       	rjmp	.+4      	; 0x1cfc <DIO_read_pin+0x90>
    1cf8:	95 95       	asr	r25
    1cfa:	87 95       	ror	r24
    1cfc:	6a 95       	dec	r22
    1cfe:	e2 f7       	brpl	.-8      	; 0x1cf8 <DIO_read_pin+0x8c>
    1d00:	fa 01       	movw	r30, r20
    1d02:	80 83       	st	Z, r24
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1d04:	80 e0       	ldi	r24, 0x00	; 0
    1d06:	08 95       	ret
		else if (copy_enu_port == PORTC)
		{
			*ptr_enu_state = ((RE_PORT_C & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else if (copy_enu_port == PORTD)
    1d08:	83 30       	cpi	r24, 0x03	; 3
    1d0a:	c9 f4       	brne	.+50     	; 0x1d3e <DIO_read_pin+0xd2>
		{
			*ptr_enu_state = ((RE_PORT_D & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
    1d0c:	70 b3       	in	r23, 0x10	; 16
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 01       	movw	r18, r24
    1d14:	06 2e       	mov	r0, r22
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <DIO_read_pin+0xb0>
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <DIO_read_pin+0xac>
    1d20:	87 2f       	mov	r24, r23
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	82 23       	and	r24, r18
    1d26:	93 23       	and	r25, r19
    1d28:	02 c0       	rjmp	.+4      	; 0x1d2e <DIO_read_pin+0xc2>
    1d2a:	95 95       	asr	r25
    1d2c:	87 95       	ror	r24
    1d2e:	6a 95       	dec	r22
    1d30:	e2 f7       	brpl	.-8      	; 0x1d2a <DIO_read_pin+0xbe>
    1d32:	fa 01       	movw	r30, r20
    1d34:	80 83       	st	Z, r24
 *                                - DIO_INVALID_PIN: The specified pin number is not valid.
 */
dio_enu_return_state_t DIO_read_pin (dio_enu_port_t copy_enu_port, dio_enu_pin_t copy_enu_pin, dio_enu_level_t	*ptr_enu_state)
{

	dio_enu_return_state_t enu_return_state = DIO_OK;
    1d36:	80 e0       	ldi	r24, 0x00	; 0
    1d38:	08 95       	ret
			enu_return_state = DIO_INVALID_PORT;
		}
		
	}
	else{
		enu_return_state = DIO_INVALID_PIN;
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	08 95       	ret
			*ptr_enu_state = ((RE_PORT_D & (U8_ONE_VALUE<<copy_enu_pin))>>copy_enu_pin);
			
		}
		else
		{
			enu_return_state = DIO_INVALID_PORT;
    1d3e:	82 e0       	ldi	r24, 0x02	; 2
	else{
		enu_return_state = DIO_INVALID_PIN;
	}

	return enu_return_state;
    1d40:	08 95       	ret

00001d42 <ext_interrupt_init>:
 *       It updates the corresponding control registers and enables the global interrupt flag if needed.
 *       The return value indicates the success or failure of the initialization.
 */
exti_enu_return_state_t ext_interrupt_init(exti_interrupt_no_t copy_enu_exti_interrupt_no, exti_edge_detection_t copy_enu_edge_detection){
    exti_enu_return_state_t ret_val=EXTI_E_OK;
    switch (copy_enu_exti_interrupt_no)
    1d42:	88 23       	and	r24, r24
    1d44:	19 f0       	breq	.+6      	; 0x1d4c <ext_interrupt_init+0xa>
    1d46:	81 30       	cpi	r24, 0x01	; 1
    1d48:	49 f0       	breq	.+18     	; 0x1d5c <ext_interrupt_init+0x1a>
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <ext_interrupt_init+0x32>
    {
    case EXTI_0:
        MCUCR_ADD = (MCUCR_ADD & (~0x3)) | copy_enu_edge_detection;	
    1d4c:	85 b7       	in	r24, 0x35	; 53
    1d4e:	8c 7f       	andi	r24, 0xFC	; 252
    1d50:	68 2b       	or	r22, r24
    1d52:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= (1<<Globle_INT);
    1d54:	8f b7       	in	r24, 0x3f	; 63
    1d56:	80 68       	ori	r24, 0x80	; 128
    1d58:	8f bf       	out	0x3f, r24	; 63
        break;
    1d5a:	0c c0       	rjmp	.+24     	; 0x1d74 <ext_interrupt_init+0x32>

    case EXTI_1:
        MCUCR_ADD = (MCUCR_ADD & (~(0x3<<INT1_MODE_INDEX))) | (copy_enu_edge_detection<<INT1_MODE_INDEX);	
    1d5c:	85 b7       	in	r24, 0x35	; 53
    1d5e:	70 e0       	ldi	r23, 0x00	; 0
    1d60:	66 0f       	add	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	66 0f       	add	r22, r22
    1d66:	77 1f       	adc	r23, r23
    1d68:	83 7f       	andi	r24, 0xF3	; 243
    1d6a:	68 2b       	or	r22, r24
    1d6c:	65 bf       	out	0x35, r22	; 53
		SREG_ADD |= (1<<Globle_INT);
    1d6e:	8f b7       	in	r24, 0x3f	; 63
    1d70:	80 68       	ori	r24, 0x80	; 128
    1d72:	8f bf       	out	0x3f, r24	; 63
    default:
        break;
    }

    return ret_val;
}
    1d74:	80 e0       	ldi	r24, 0x00	; 0
    1d76:	08 95       	ret

00001d78 <ext_interrupt_enable>:
 *       It also invokes the "sei()" assembly instruction to globally enable interrupts.
 *       The return value indicates the success or failure of the enable operation.
 */
exti_enu_return_state_t ext_interrupt_enable(exti_interrupt_no_t copy_enu_exti_interrupt_no){
    exti_enu_return_state_t ret_val=EXTI_E_OK;
    switch (copy_enu_exti_interrupt_no)
    1d78:	88 23       	and	r24, r24
    1d7a:	19 f0       	breq	.+6      	; 0x1d82 <ext_interrupt_enable+0xa>
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	29 f0       	breq	.+10     	; 0x1d8a <ext_interrupt_enable+0x12>
    1d80:	07 c0       	rjmp	.+14     	; 0x1d90 <ext_interrupt_enable+0x18>
    {
		sei();
    case EXTI_0:
        GICR_ADD |= (1<<INT0_Globle);
    1d82:	8b b7       	in	r24, 0x3b	; 59
    1d84:	80 64       	ori	r24, 0x40	; 64
    1d86:	8b bf       	out	0x3b, r24	; 59
        break;
    1d88:	03 c0       	rjmp	.+6      	; 0x1d90 <ext_interrupt_enable+0x18>

    case EXTI_1:
        GICR_ADD |= (1<<INT1_Globle);
    1d8a:	8b b7       	in	r24, 0x3b	; 59
    1d8c:	80 68       	ori	r24, 0x80	; 128
    1d8e:	8b bf       	out	0x3b, r24	; 59
    
    default:
        break;
    }
    return ret_val;
}
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	08 95       	ret

00001d94 <ext_interrupt_disable>:
 * @note This function disables the specified external interrupt by clearing the corresponding global interrupt enable bit.
 *       The return value indicates the success or failure of the disable operation.
 */
exti_enu_return_state_t ext_interrupt_disable(exti_interrupt_no_t copy_enu_exti_interrupt_no){
    exti_enu_return_state_t ret_val=EXTI_E_OK;
    switch (copy_enu_exti_interrupt_no)
    1d94:	88 23       	and	r24, r24
    1d96:	19 f0       	breq	.+6      	; 0x1d9e <ext_interrupt_disable+0xa>
    1d98:	81 30       	cpi	r24, 0x01	; 1
    1d9a:	29 f0       	breq	.+10     	; 0x1da6 <ext_interrupt_disable+0x12>
    1d9c:	07 c0       	rjmp	.+14     	; 0x1dac <ext_interrupt_disable+0x18>
    {
    case EXTI_0:
       GICR_ADD &= ~(1<<INT0_Globle);
    1d9e:	8b b7       	in	r24, 0x3b	; 59
    1da0:	8f 7b       	andi	r24, 0xBF	; 191
    1da2:	8b bf       	out	0x3b, r24	; 59

        break;
    1da4:	03 c0       	rjmp	.+6      	; 0x1dac <ext_interrupt_disable+0x18>

    case EXTI_1:
        GICR_ADD &= ~(1<<INT1_Globle);
    1da6:	8b b7       	in	r24, 0x3b	; 59
    1da8:	8f 77       	andi	r24, 0x7F	; 127
    1daa:	8b bf       	out	0x3b, r24	; 59
    default:
        break;
    }
    return ret_val;

}
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	08 95       	ret

00001db0 <ext_interrupt_set_callback_init>:
 *       and also initializes the interrupt by disabling its global interrupt enable bit.
 *       The return value indicates the success or failure of the operation.
 */
exti_enu_return_state_t ext_interrupt_set_callback_init(exti_interrupt_no_t copy_enu_exti_interrupt_no ,void(*callback)(void)){
    exti_enu_return_state_t ret_val=EXTI_E_OK;
    switch (copy_enu_exti_interrupt_no)
    1db0:	88 23       	and	r24, r24
    1db2:	19 f0       	breq	.+6      	; 0x1dba <ext_interrupt_set_callback_init+0xa>
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	49 f0       	breq	.+18     	; 0x1dca <ext_interrupt_set_callback_init+0x1a>
    1db8:	0f c0       	rjmp	.+30     	; 0x1dd8 <ext_interrupt_set_callback_init+0x28>
    {
    case EXTI_0:
        GICR_ADD &= ~(1<<INT0_Globle);
    1dba:	8b b7       	in	r24, 0x3b	; 59
    1dbc:	8f 7b       	andi	r24, 0xBF	; 191
    1dbe:	8b bf       	out	0x3b, r24	; 59
        callback_EXT_0 = callback;
    1dc0:	70 93 40 01 	sts	0x0140, r23	; 0x800140 <callback_EXT_0+0x1>
    1dc4:	60 93 3f 01 	sts	0x013F, r22	; 0x80013f <callback_EXT_0>
		
        break;
    1dc8:	07 c0       	rjmp	.+14     	; 0x1dd8 <ext_interrupt_set_callback_init+0x28>

    case EXTI_1:
        GICR_ADD &= ~(1<<INT1_Globle);
    1dca:	8b b7       	in	r24, 0x3b	; 59
    1dcc:	8f 77       	andi	r24, 0x7F	; 127
    1dce:	8b bf       	out	0x3b, r24	; 59
        callback_EXT_1 = callback;
    1dd0:	70 93 3e 01 	sts	0x013E, r23	; 0x80013e <callback_EXT_1+0x1>
    1dd4:	60 93 3d 01 	sts	0x013D, r22	; 0x80013d <callback_EXT_1>
    
    default:
        break;
    }
    return ret_val;
}
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	08 95       	ret

00001ddc <__vector_1>:
*   -Description-
*-interrupt service routine for  external interrupt 0
*
*/
ISR(EXT_INT0)
{
    1ddc:	1f 92       	push	r1
    1dde:	0f 92       	push	r0
    1de0:	0f b6       	in	r0, 0x3f	; 63
    1de2:	0f 92       	push	r0
    1de4:	11 24       	eor	r1, r1
    1de6:	2f 93       	push	r18
    1de8:	3f 93       	push	r19
    1dea:	4f 93       	push	r20
    1dec:	5f 93       	push	r21
    1dee:	6f 93       	push	r22
    1df0:	7f 93       	push	r23
    1df2:	8f 93       	push	r24
    1df4:	9f 93       	push	r25
    1df6:	af 93       	push	r26
    1df8:	bf 93       	push	r27
    1dfa:	ef 93       	push	r30
    1dfc:	ff 93       	push	r31
	callback_EXT_0();
    1dfe:	e0 91 3f 01 	lds	r30, 0x013F	; 0x80013f <callback_EXT_0>
    1e02:	f0 91 40 01 	lds	r31, 0x0140	; 0x800140 <callback_EXT_0+0x1>
    1e06:	09 95       	icall
}
    1e08:	ff 91       	pop	r31
    1e0a:	ef 91       	pop	r30
    1e0c:	bf 91       	pop	r27
    1e0e:	af 91       	pop	r26
    1e10:	9f 91       	pop	r25
    1e12:	8f 91       	pop	r24
    1e14:	7f 91       	pop	r23
    1e16:	6f 91       	pop	r22
    1e18:	5f 91       	pop	r21
    1e1a:	4f 91       	pop	r20
    1e1c:	3f 91       	pop	r19
    1e1e:	2f 91       	pop	r18
    1e20:	0f 90       	pop	r0
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	0f 90       	pop	r0
    1e26:	1f 90       	pop	r1
    1e28:	18 95       	reti

00001e2a <__vector_2>:
*   -Description-
*-interrupt service routine for  external interrupt10
*
*/
ISR(EXT_INT1)
{
    1e2a:	1f 92       	push	r1
    1e2c:	0f 92       	push	r0
    1e2e:	0f b6       	in	r0, 0x3f	; 63
    1e30:	0f 92       	push	r0
    1e32:	11 24       	eor	r1, r1
    1e34:	2f 93       	push	r18
    1e36:	3f 93       	push	r19
    1e38:	4f 93       	push	r20
    1e3a:	5f 93       	push	r21
    1e3c:	6f 93       	push	r22
    1e3e:	7f 93       	push	r23
    1e40:	8f 93       	push	r24
    1e42:	9f 93       	push	r25
    1e44:	af 93       	push	r26
    1e46:	bf 93       	push	r27
    1e48:	ef 93       	push	r30
    1e4a:	ff 93       	push	r31
	callback_EXT_1();
    1e4c:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <callback_EXT_1>
    1e50:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <callback_EXT_1+0x1>
    1e54:	09 95       	icall
}
    1e56:	ff 91       	pop	r31
    1e58:	ef 91       	pop	r30
    1e5a:	bf 91       	pop	r27
    1e5c:	af 91       	pop	r26
    1e5e:	9f 91       	pop	r25
    1e60:	8f 91       	pop	r24
    1e62:	7f 91       	pop	r23
    1e64:	6f 91       	pop	r22
    1e66:	5f 91       	pop	r21
    1e68:	4f 91       	pop	r20
    1e6a:	3f 91       	pop	r19
    1e6c:	2f 91       	pop	r18
    1e6e:	0f 90       	pop	r0
    1e70:	0f be       	out	0x3f, r0	; 63
    1e72:	0f 90       	pop	r0
    1e74:	1f 90       	pop	r1
    1e76:	18 95       	reti

00001e78 <timer0_initialization>:
		timer2_callback_COMP = ptr_func;
	}

	return enu_return_state;
	
}
    1e78:	fc 01       	movw	r30, r24
    1e7a:	89 2b       	or	r24, r25
    1e7c:	99 f1       	breq	.+102    	; 0x1ee4 <timer0_initialization+0x6c>
    1e7e:	12 be       	out	0x32, r1	; 50
    1e80:	83 b7       	in	r24, 0x33	; 51
    1e82:	90 81       	ld	r25, Z
    1e84:	29 2f       	mov	r18, r25
    1e86:	21 70       	andi	r18, 0x01	; 1
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	00 24       	eor	r0, r0
    1e8c:	36 95       	lsr	r19
    1e8e:	27 95       	ror	r18
    1e90:	07 94       	ror	r0
    1e92:	36 95       	lsr	r19
    1e94:	27 95       	ror	r18
    1e96:	07 94       	ror	r0
    1e98:	32 2f       	mov	r19, r18
    1e9a:	20 2d       	mov	r18, r0
    1e9c:	28 2b       	or	r18, r24
    1e9e:	23 bf       	out	0x33, r18	; 51
    1ea0:	83 b7       	in	r24, 0x33	; 51
    1ea2:	90 81       	ld	r25, Z
    1ea4:	96 95       	lsr	r25
    1ea6:	29 2f       	mov	r18, r25
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	22 0f       	add	r18, r18
    1eb0:	33 1f       	adc	r19, r19
    1eb2:	22 0f       	add	r18, r18
    1eb4:	33 1f       	adc	r19, r19
    1eb6:	28 2b       	or	r18, r24
    1eb8:	23 bf       	out	0x33, r18	; 51
    1eba:	80 81       	ld	r24, Z
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	14 c0       	rjmp	.+40     	; 0x1ee8 <timer0_initialization+0x70>
    1ec0:	99 b7       	in	r25, 0x39	; 57
    1ec2:	84 81       	ldd	r24, Z+4	; 0x04
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	41 70       	andi	r20, 0x01	; 1
    1ec8:	50 e0       	ldi	r21, 0x00	; 0
    1eca:	44 0f       	add	r20, r20
    1ecc:	55 1f       	adc	r21, r21
    1ece:	86 95       	lsr	r24
    1ed0:	81 70       	andi	r24, 0x01	; 1
    1ed2:	48 2b       	or	r20, r24
    1ed4:	49 2b       	or	r20, r25
    1ed6:	49 bf       	out	0x39, r20	; 57
    1ed8:	84 81       	ldd	r24, Z+4	; 0x04
    1eda:	83 70       	andi	r24, 0x03	; 3
    1edc:	39 f0       	breq	.+14     	; 0x1eec <timer0_initialization+0x74>
    1ede:	78 94       	sei
    1ee0:	80 e0       	ldi	r24, 0x00	; 0
    1ee2:	08 95       	ret
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	08 95       	ret
    1ee8:	80 e0       	ldi	r24, 0x00	; 0
    1eea:	08 95       	ret
    1eec:	80 e0       	ldi	r24, 0x00	; 0
    1eee:	08 95       	ret

00001ef0 <timer_start>:
    1ef0:	00 97       	sbiw	r24, 0x00	; 0
    1ef2:	61 f0       	breq	.+24     	; 0x1f0c <timer_start+0x1c>
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 81       	ld	r18, Z
    1ef8:	21 11       	cpse	r18, r1
    1efa:	0a c0       	rjmp	.+20     	; 0x1f10 <timer_start+0x20>
    1efc:	22 81       	ldd	r18, Z+2	; 0x02
    1efe:	22 bf       	out	0x32, r18	; 50
    1f00:	23 b7       	in	r18, 0x33	; 51
    1f02:	81 81       	ldd	r24, Z+1	; 0x01
    1f04:	82 2b       	or	r24, r18
    1f06:	83 bf       	out	0x33, r24	; 51
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	08 95       	ret
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	08 95       	ret
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	08 95       	ret

00001f14 <timer_set_tcnt>:
    1f14:	00 97       	sbiw	r24, 0x00	; 0
    1f16:	41 f0       	breq	.+16     	; 0x1f28 <timer_set_tcnt+0x14>
    1f18:	fc 01       	movw	r30, r24
    1f1a:	20 81       	ld	r18, Z
    1f1c:	21 11       	cpse	r18, r1
    1f1e:	06 c0       	rjmp	.+12     	; 0x1f2c <timer_set_tcnt+0x18>
    1f20:	82 81       	ldd	r24, Z+2	; 0x02
    1f22:	82 bf       	out	0x32, r24	; 50
    1f24:	80 e0       	ldi	r24, 0x00	; 0
    1f26:	08 95       	ret
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	08 95       	ret
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	08 95       	ret

00001f30 <timer_initialize_callback_OVF>:
    1f30:	00 97       	sbiw	r24, 0x00	; 0
    1f32:	31 f0       	breq	.+12     	; 0x1f40 <timer_initialize_callback_OVF+0x10>
    1f34:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <timer_callback_OVF+0x1>
    1f38:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <timer_callback_OVF>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	08 95       	ret
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	08 95       	ret

00001f44 <__vector_11>:
    1f44:	1f 92       	push	r1
    1f46:	0f 92       	push	r0
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	0f 92       	push	r0
    1f4c:	11 24       	eor	r1, r1
    1f4e:	2f 93       	push	r18
    1f50:	3f 93       	push	r19
    1f52:	4f 93       	push	r20
    1f54:	5f 93       	push	r21
    1f56:	6f 93       	push	r22
    1f58:	7f 93       	push	r23
    1f5a:	8f 93       	push	r24
    1f5c:	9f 93       	push	r25
    1f5e:	af 93       	push	r26
    1f60:	bf 93       	push	r27
    1f62:	ef 93       	push	r30
    1f64:	ff 93       	push	r31
    1f66:	e0 91 4b 01 	lds	r30, 0x014B	; 0x80014b <timer_callback_OVF>
    1f6a:	f0 91 4c 01 	lds	r31, 0x014C	; 0x80014c <timer_callback_OVF+0x1>
    1f6e:	09 95       	icall
    1f70:	ff 91       	pop	r31
    1f72:	ef 91       	pop	r30
    1f74:	bf 91       	pop	r27
    1f76:	af 91       	pop	r26
    1f78:	9f 91       	pop	r25
    1f7a:	8f 91       	pop	r24
    1f7c:	7f 91       	pop	r23
    1f7e:	6f 91       	pop	r22
    1f80:	5f 91       	pop	r21
    1f82:	4f 91       	pop	r20
    1f84:	3f 91       	pop	r19
    1f86:	2f 91       	pop	r18
    1f88:	0f 90       	pop	r0
    1f8a:	0f be       	out	0x3f, r0	; 63
    1f8c:	0f 90       	pop	r0
    1f8e:	1f 90       	pop	r1
    1f90:	18 95       	reti

00001f92 <__vector_10>:
    1f92:	1f 92       	push	r1
    1f94:	0f 92       	push	r0
    1f96:	0f b6       	in	r0, 0x3f	; 63
    1f98:	0f 92       	push	r0
    1f9a:	11 24       	eor	r1, r1
    1f9c:	2f 93       	push	r18
    1f9e:	3f 93       	push	r19
    1fa0:	4f 93       	push	r20
    1fa2:	5f 93       	push	r21
    1fa4:	6f 93       	push	r22
    1fa6:	7f 93       	push	r23
    1fa8:	8f 93       	push	r24
    1faa:	9f 93       	push	r25
    1fac:	af 93       	push	r26
    1fae:	bf 93       	push	r27
    1fb0:	ef 93       	push	r30
    1fb2:	ff 93       	push	r31
    1fb4:	e0 91 49 01 	lds	r30, 0x0149	; 0x800149 <timer_callback_COMP>
    1fb8:	f0 91 4a 01 	lds	r31, 0x014A	; 0x80014a <timer_callback_COMP+0x1>
    1fbc:	09 95       	icall
    1fbe:	ff 91       	pop	r31
    1fc0:	ef 91       	pop	r30
    1fc2:	bf 91       	pop	r27
    1fc4:	af 91       	pop	r26
    1fc6:	9f 91       	pop	r25
    1fc8:	8f 91       	pop	r24
    1fca:	7f 91       	pop	r23
    1fcc:	6f 91       	pop	r22
    1fce:	5f 91       	pop	r21
    1fd0:	4f 91       	pop	r20
    1fd2:	3f 91       	pop	r19
    1fd4:	2f 91       	pop	r18
    1fd6:	0f 90       	pop	r0
    1fd8:	0f be       	out	0x3f, r0	; 63
    1fda:	0f 90       	pop	r0
    1fdc:	1f 90       	pop	r1
    1fde:	18 95       	reti

00001fe0 <timer1_initialization>:
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	89 2b       	or	r24, r25
    1fe4:	79 f1       	breq	.+94     	; 0x2044 <timer1_initialization+0x64>
    1fe6:	1d bc       	out	0x2d, r1	; 45
    1fe8:	1c bc       	out	0x2c, r1	; 44
    1fea:	9f b5       	in	r25, 0x2f	; 47
    1fec:	80 81       	ld	r24, Z
    1fee:	81 70       	andi	r24, 0x01	; 1
    1ff0:	89 2b       	or	r24, r25
    1ff2:	8f bd       	out	0x2f, r24	; 47
    1ff4:	8f b5       	in	r24, 0x2f	; 47
    1ff6:	90 81       	ld	r25, Z
    1ff8:	96 95       	lsr	r25
    1ffa:	29 2f       	mov	r18, r25
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	22 0f       	add	r18, r18
    2000:	33 1f       	adc	r19, r19
    2002:	28 2b       	or	r18, r24
    2004:	2f bd       	out	0x2f, r18	; 47
    2006:	80 81       	ld	r24, Z
    2008:	81 11       	cpse	r24, r1
    200a:	1e c0       	rjmp	.+60     	; 0x2048 <timer1_initialization+0x68>
    200c:	89 b7       	in	r24, 0x39	; 57
    200e:	94 81       	ldd	r25, Z+4	; 0x04
    2010:	69 2f       	mov	r22, r25
    2012:	61 70       	andi	r22, 0x01	; 1
    2014:	70 e0       	ldi	r23, 0x00	; 0
    2016:	62 95       	swap	r22
    2018:	72 95       	swap	r23
    201a:	70 7f       	andi	r23, 0xF0	; 240
    201c:	76 27       	eor	r23, r22
    201e:	60 7f       	andi	r22, 0xF0	; 240
    2020:	76 27       	eor	r23, r22
    2022:	91 fb       	bst	r25, 1
    2024:	44 27       	eor	r20, r20
    2026:	40 f9       	bld	r20, 0
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	44 0f       	add	r20, r20
    202c:	55 1f       	adc	r21, r21
    202e:	44 0f       	add	r20, r20
    2030:	55 1f       	adc	r21, r21
    2032:	46 2b       	or	r20, r22
    2034:	48 2b       	or	r20, r24
    2036:	49 bf       	out	0x39, r20	; 57
    2038:	84 81       	ldd	r24, Z+4	; 0x04
    203a:	83 70       	andi	r24, 0x03	; 3
    203c:	39 f0       	breq	.+14     	; 0x204c <timer1_initialization+0x6c>
    203e:	78 94       	sei
    2040:	80 e0       	ldi	r24, 0x00	; 0
    2042:	08 95       	ret
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	08 95       	ret
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	08 95       	ret
    204c:	80 e0       	ldi	r24, 0x00	; 0
    204e:	08 95       	ret

00002050 <timer1_start>:
    2050:	00 97       	sbiw	r24, 0x00	; 0
    2052:	71 f0       	breq	.+28     	; 0x2070 <timer1_start+0x20>
    2054:	fc 01       	movw	r30, r24
    2056:	20 81       	ld	r18, Z
    2058:	21 11       	cpse	r18, r1
    205a:	0c c0       	rjmp	.+24     	; 0x2074 <timer1_start+0x24>
    205c:	22 81       	ldd	r18, Z+2	; 0x02
    205e:	33 81       	ldd	r19, Z+3	; 0x03
    2060:	3d bd       	out	0x2d, r19	; 45
    2062:	2c bd       	out	0x2c, r18	; 44
    2064:	2e b5       	in	r18, 0x2e	; 46
    2066:	81 81       	ldd	r24, Z+1	; 0x01
    2068:	82 2b       	or	r24, r18
    206a:	8e bd       	out	0x2e, r24	; 46
    206c:	80 e0       	ldi	r24, 0x00	; 0
    206e:	08 95       	ret
    2070:	81 e0       	ldi	r24, 0x01	; 1
    2072:	08 95       	ret
    2074:	80 e0       	ldi	r24, 0x00	; 0
    2076:	08 95       	ret

00002078 <timer1_set_tcnt>:
    2078:	00 97       	sbiw	r24, 0x00	; 0
    207a:	51 f0       	breq	.+20     	; 0x2090 <timer1_set_tcnt+0x18>
    207c:	fc 01       	movw	r30, r24
    207e:	20 81       	ld	r18, Z
    2080:	21 11       	cpse	r18, r1
    2082:	08 c0       	rjmp	.+16     	; 0x2094 <timer1_set_tcnt+0x1c>
    2084:	82 81       	ldd	r24, Z+2	; 0x02
    2086:	93 81       	ldd	r25, Z+3	; 0x03
    2088:	9d bd       	out	0x2d, r25	; 45
    208a:	8c bd       	out	0x2c, r24	; 44
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	08 95       	ret
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	08 95       	ret
    2094:	80 e0       	ldi	r24, 0x00	; 0
    2096:	08 95       	ret

00002098 <timer1_initialize_callback_OVF>:
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	31 f0       	breq	.+12     	; 0x20a8 <timer1_initialize_callback_OVF+0x10>
    209c:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <timer1_callback_OVF+0x1>
    20a0:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <timer1_callback_OVF>
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	08 95       	ret
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	08 95       	ret

000020ac <__vector_9>:
    20ac:	1f 92       	push	r1
    20ae:	0f 92       	push	r0
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	0f 92       	push	r0
    20b4:	11 24       	eor	r1, r1
    20b6:	2f 93       	push	r18
    20b8:	3f 93       	push	r19
    20ba:	4f 93       	push	r20
    20bc:	5f 93       	push	r21
    20be:	6f 93       	push	r22
    20c0:	7f 93       	push	r23
    20c2:	8f 93       	push	r24
    20c4:	9f 93       	push	r25
    20c6:	af 93       	push	r26
    20c8:	bf 93       	push	r27
    20ca:	ef 93       	push	r30
    20cc:	ff 93       	push	r31
    20ce:	e0 91 47 01 	lds	r30, 0x0147	; 0x800147 <timer1_callback_OVF>
    20d2:	f0 91 48 01 	lds	r31, 0x0148	; 0x800148 <timer1_callback_OVF+0x1>
    20d6:	09 95       	icall
    20d8:	ff 91       	pop	r31
    20da:	ef 91       	pop	r30
    20dc:	bf 91       	pop	r27
    20de:	af 91       	pop	r26
    20e0:	9f 91       	pop	r25
    20e2:	8f 91       	pop	r24
    20e4:	7f 91       	pop	r23
    20e6:	6f 91       	pop	r22
    20e8:	5f 91       	pop	r21
    20ea:	4f 91       	pop	r20
    20ec:	3f 91       	pop	r19
    20ee:	2f 91       	pop	r18
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	0f 90       	pop	r0
    20f6:	1f 90       	pop	r1
    20f8:	18 95       	reti

000020fa <__vector_7>:
    20fa:	1f 92       	push	r1
    20fc:	0f 92       	push	r0
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	0f 92       	push	r0
    2102:	11 24       	eor	r1, r1
    2104:	2f 93       	push	r18
    2106:	3f 93       	push	r19
    2108:	4f 93       	push	r20
    210a:	5f 93       	push	r21
    210c:	6f 93       	push	r22
    210e:	7f 93       	push	r23
    2110:	8f 93       	push	r24
    2112:	9f 93       	push	r25
    2114:	af 93       	push	r26
    2116:	bf 93       	push	r27
    2118:	ef 93       	push	r30
    211a:	ff 93       	push	r31
    211c:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <timer1_callback_COMP>
    2120:	f0 91 46 01 	lds	r31, 0x0146	; 0x800146 <timer1_callback_COMP+0x1>
    2124:	09 95       	icall
    2126:	ff 91       	pop	r31
    2128:	ef 91       	pop	r30
    212a:	bf 91       	pop	r27
    212c:	af 91       	pop	r26
    212e:	9f 91       	pop	r25
    2130:	8f 91       	pop	r24
    2132:	7f 91       	pop	r23
    2134:	6f 91       	pop	r22
    2136:	5f 91       	pop	r21
    2138:	4f 91       	pop	r20
    213a:	3f 91       	pop	r19
    213c:	2f 91       	pop	r18
    213e:	0f 90       	pop	r0
    2140:	0f be       	out	0x3f, r0	; 63
    2142:	0f 90       	pop	r0
    2144:	1f 90       	pop	r1
    2146:	18 95       	reti

00002148 <timer2_initialization>:
    2148:	fc 01       	movw	r30, r24
    214a:	89 2b       	or	r24, r25
    214c:	09 f4       	brne	.+2      	; 0x2150 <timer2_initialization+0x8>
    214e:	41 c0       	rjmp	.+130    	; 0x21d2 <timer2_initialization+0x8a>
    2150:	14 bc       	out	0x24, r1	; 36
    2152:	85 b5       	in	r24, 0x25	; 37
    2154:	90 81       	ld	r25, Z
    2156:	29 2f       	mov	r18, r25
    2158:	21 70       	andi	r18, 0x01	; 1
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	00 24       	eor	r0, r0
    215e:	36 95       	lsr	r19
    2160:	27 95       	ror	r18
    2162:	07 94       	ror	r0
    2164:	36 95       	lsr	r19
    2166:	27 95       	ror	r18
    2168:	07 94       	ror	r0
    216a:	32 2f       	mov	r19, r18
    216c:	20 2d       	mov	r18, r0
    216e:	28 2b       	or	r18, r24
    2170:	25 bd       	out	0x25, r18	; 37
    2172:	85 b5       	in	r24, 0x25	; 37
    2174:	90 81       	ld	r25, Z
    2176:	96 95       	lsr	r25
    2178:	29 2f       	mov	r18, r25
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	22 0f       	add	r18, r18
    217e:	33 1f       	adc	r19, r19
    2180:	22 0f       	add	r18, r18
    2182:	33 1f       	adc	r19, r19
    2184:	22 0f       	add	r18, r18
    2186:	33 1f       	adc	r19, r19
    2188:	28 2b       	or	r18, r24
    218a:	25 bd       	out	0x25, r18	; 37
    218c:	80 81       	ld	r24, Z
    218e:	81 11       	cpse	r24, r1
    2190:	22 c0       	rjmp	.+68     	; 0x21d6 <timer2_initialization+0x8e>
    2192:	89 b7       	in	r24, 0x39	; 57
    2194:	94 81       	ldd	r25, Z+4	; 0x04
    2196:	69 2f       	mov	r22, r25
    2198:	61 70       	andi	r22, 0x01	; 1
    219a:	70 e0       	ldi	r23, 0x00	; 0
    219c:	76 95       	lsr	r23
    219e:	76 2f       	mov	r23, r22
    21a0:	66 27       	eor	r22, r22
    21a2:	77 95       	ror	r23
    21a4:	67 95       	ror	r22
    21a6:	91 fb       	bst	r25, 1
    21a8:	44 27       	eor	r20, r20
    21aa:	40 f9       	bld	r20, 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	00 24       	eor	r0, r0
    21b0:	56 95       	lsr	r21
    21b2:	47 95       	ror	r20
    21b4:	07 94       	ror	r0
    21b6:	56 95       	lsr	r21
    21b8:	47 95       	ror	r20
    21ba:	07 94       	ror	r0
    21bc:	54 2f       	mov	r21, r20
    21be:	40 2d       	mov	r20, r0
    21c0:	46 2b       	or	r20, r22
    21c2:	48 2b       	or	r20, r24
    21c4:	49 bf       	out	0x39, r20	; 57
    21c6:	84 81       	ldd	r24, Z+4	; 0x04
    21c8:	83 70       	andi	r24, 0x03	; 3
    21ca:	39 f0       	breq	.+14     	; 0x21da <timer2_initialization+0x92>
    21cc:	78 94       	sei
    21ce:	80 e0       	ldi	r24, 0x00	; 0
    21d0:	08 95       	ret
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	08 95       	ret
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	08 95       	ret
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	08 95       	ret

000021de <timer2_start>:
    21de:	00 97       	sbiw	r24, 0x00	; 0
    21e0:	61 f0       	breq	.+24     	; 0x21fa <timer2_start+0x1c>
    21e2:	fc 01       	movw	r30, r24
    21e4:	20 81       	ld	r18, Z
    21e6:	21 11       	cpse	r18, r1
    21e8:	0a c0       	rjmp	.+20     	; 0x21fe <timer2_start+0x20>
    21ea:	22 81       	ldd	r18, Z+2	; 0x02
    21ec:	24 bd       	out	0x24, r18	; 36
    21ee:	25 b5       	in	r18, 0x25	; 37
    21f0:	81 81       	ldd	r24, Z+1	; 0x01
    21f2:	82 2b       	or	r24, r18
    21f4:	85 bd       	out	0x25, r24	; 37
    21f6:	80 e0       	ldi	r24, 0x00	; 0
    21f8:	08 95       	ret
    21fa:	81 e0       	ldi	r24, 0x01	; 1
    21fc:	08 95       	ret
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	08 95       	ret

00002202 <timer2_stop>:
    2202:	00 97       	sbiw	r24, 0x00	; 0
    2204:	49 f0       	breq	.+18     	; 0x2218 <timer2_stop+0x16>
    2206:	fc 01       	movw	r30, r24
    2208:	80 81       	ld	r24, Z
    220a:	81 11       	cpse	r24, r1
    220c:	07 c0       	rjmp	.+14     	; 0x221c <timer2_stop+0x1a>
    220e:	85 b5       	in	r24, 0x25	; 37
    2210:	88 7f       	andi	r24, 0xF8	; 248
    2212:	85 bd       	out	0x25, r24	; 37
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	08 95       	ret
    2218:	81 e0       	ldi	r24, 0x01	; 1
    221a:	08 95       	ret
    221c:	80 e0       	ldi	r24, 0x00	; 0
    221e:	08 95       	ret

00002220 <timer2_get_tcnt>:
    2220:	89 2b       	or	r24, r25
    2222:	29 f0       	breq	.+10     	; 0x222e <timer2_get_tcnt+0xe>
    2224:	84 b5       	in	r24, 0x24	; 36
    2226:	fb 01       	movw	r30, r22
    2228:	80 83       	st	Z, r24
    222a:	80 e0       	ldi	r24, 0x00	; 0
    222c:	08 95       	ret
    222e:	81 e0       	ldi	r24, 0x01	; 1
    2230:	08 95       	ret

00002232 <timer2_initialize_callback_OVF>:
    2232:	00 97       	sbiw	r24, 0x00	; 0
    2234:	31 f0       	breq	.+12     	; 0x2242 <timer2_initialize_callback_OVF+0x10>
    2236:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <timer2_callback_OVF+0x1>
    223a:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <timer2_callback_OVF>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	08 95       	ret
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	08 95       	ret

00002246 <__vector_5>:


// Timer 2 overflow interrupt
ISR(TIMER2_OVF) {
    2246:	1f 92       	push	r1
    2248:	0f 92       	push	r0
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	0f 92       	push	r0
    224e:	11 24       	eor	r1, r1
    2250:	2f 93       	push	r18
    2252:	3f 93       	push	r19
    2254:	4f 93       	push	r20
    2256:	5f 93       	push	r21
    2258:	6f 93       	push	r22
    225a:	7f 93       	push	r23
    225c:	8f 93       	push	r24
    225e:	9f 93       	push	r25
    2260:	af 93       	push	r26
    2262:	bf 93       	push	r27
    2264:	ef 93       	push	r30
    2266:	ff 93       	push	r31
	// Call the Timer 2 overflow callback function
	(*timer2_callback_OVF)();
    2268:	e0 91 43 01 	lds	r30, 0x0143	; 0x800143 <timer2_callback_OVF>
    226c:	f0 91 44 01 	lds	r31, 0x0144	; 0x800144 <timer2_callback_OVF+0x1>
    2270:	09 95       	icall
}
    2272:	ff 91       	pop	r31
    2274:	ef 91       	pop	r30
    2276:	bf 91       	pop	r27
    2278:	af 91       	pop	r26
    227a:	9f 91       	pop	r25
    227c:	8f 91       	pop	r24
    227e:	7f 91       	pop	r23
    2280:	6f 91       	pop	r22
    2282:	5f 91       	pop	r21
    2284:	4f 91       	pop	r20
    2286:	3f 91       	pop	r19
    2288:	2f 91       	pop	r18
    228a:	0f 90       	pop	r0
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	0f 90       	pop	r0
    2290:	1f 90       	pop	r1
    2292:	18 95       	reti

00002294 <__vector_4>:

// Timer 2 compare match interrupt
ISR(TIMER2_COMP) {
    2294:	1f 92       	push	r1
    2296:	0f 92       	push	r0
    2298:	0f b6       	in	r0, 0x3f	; 63
    229a:	0f 92       	push	r0
    229c:	11 24       	eor	r1, r1
    229e:	2f 93       	push	r18
    22a0:	3f 93       	push	r19
    22a2:	4f 93       	push	r20
    22a4:	5f 93       	push	r21
    22a6:	6f 93       	push	r22
    22a8:	7f 93       	push	r23
    22aa:	8f 93       	push	r24
    22ac:	9f 93       	push	r25
    22ae:	af 93       	push	r26
    22b0:	bf 93       	push	r27
    22b2:	ef 93       	push	r30
    22b4:	ff 93       	push	r31
	// Call the Timer 2 compare match callback function
	(*timer2_callback_COMP)();
    22b6:	e0 91 41 01 	lds	r30, 0x0141	; 0x800141 <timer2_callback_COMP>
    22ba:	f0 91 42 01 	lds	r31, 0x0142	; 0x800142 <timer2_callback_COMP+0x1>
    22be:	09 95       	icall
}
    22c0:	ff 91       	pop	r31
    22c2:	ef 91       	pop	r30
    22c4:	bf 91       	pop	r27
    22c6:	af 91       	pop	r26
    22c8:	9f 91       	pop	r25
    22ca:	8f 91       	pop	r24
    22cc:	7f 91       	pop	r23
    22ce:	6f 91       	pop	r22
    22d0:	5f 91       	pop	r21
    22d2:	4f 91       	pop	r20
    22d4:	3f 91       	pop	r19
    22d6:	2f 91       	pop	r18
    22d8:	0f 90       	pop	r0
    22da:	0f be       	out	0x3f, r0	; 63
    22dc:	0f 90       	pop	r0
    22de:	1f 90       	pop	r1
    22e0:	18 95       	reti

000022e2 <__subsf3>:
    22e2:	50 58       	subi	r21, 0x80	; 128

000022e4 <__addsf3>:
    22e4:	bb 27       	eor	r27, r27
    22e6:	aa 27       	eor	r26, r26
    22e8:	0e 94 89 11 	call	0x2312	; 0x2312 <__addsf3x>
    22ec:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_round>
    22f0:	0e 94 2c 13 	call	0x2658	; 0x2658 <__fp_pscA>
    22f4:	38 f0       	brcs	.+14     	; 0x2304 <__addsf3+0x20>
    22f6:	0e 94 33 13 	call	0x2666	; 0x2666 <__fp_pscB>
    22fa:	20 f0       	brcs	.+8      	; 0x2304 <__addsf3+0x20>
    22fc:	39 f4       	brne	.+14     	; 0x230c <__addsf3+0x28>
    22fe:	9f 3f       	cpi	r25, 0xFF	; 255
    2300:	19 f4       	brne	.+6      	; 0x2308 <__addsf3+0x24>
    2302:	26 f4       	brtc	.+8      	; 0x230c <__addsf3+0x28>
    2304:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_nan>
    2308:	0e f4       	brtc	.+2      	; 0x230c <__addsf3+0x28>
    230a:	e0 95       	com	r30
    230c:	e7 fb       	bst	r30, 7
    230e:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_inf>

00002312 <__addsf3x>:
    2312:	e9 2f       	mov	r30, r25
    2314:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_split3>
    2318:	58 f3       	brcs	.-42     	; 0x22f0 <__addsf3+0xc>
    231a:	ba 17       	cp	r27, r26
    231c:	62 07       	cpc	r22, r18
    231e:	73 07       	cpc	r23, r19
    2320:	84 07       	cpc	r24, r20
    2322:	95 07       	cpc	r25, r21
    2324:	20 f0       	brcs	.+8      	; 0x232e <__addsf3x+0x1c>
    2326:	79 f4       	brne	.+30     	; 0x2346 <__addsf3x+0x34>
    2328:	a6 f5       	brtc	.+104    	; 0x2392 <__addsf3x+0x80>
    232a:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__fp_zero>
    232e:	0e f4       	brtc	.+2      	; 0x2332 <__addsf3x+0x20>
    2330:	e0 95       	com	r30
    2332:	0b 2e       	mov	r0, r27
    2334:	ba 2f       	mov	r27, r26
    2336:	a0 2d       	mov	r26, r0
    2338:	0b 01       	movw	r0, r22
    233a:	b9 01       	movw	r22, r18
    233c:	90 01       	movw	r18, r0
    233e:	0c 01       	movw	r0, r24
    2340:	ca 01       	movw	r24, r20
    2342:	a0 01       	movw	r20, r0
    2344:	11 24       	eor	r1, r1
    2346:	ff 27       	eor	r31, r31
    2348:	59 1b       	sub	r21, r25
    234a:	99 f0       	breq	.+38     	; 0x2372 <__addsf3x+0x60>
    234c:	59 3f       	cpi	r21, 0xF9	; 249
    234e:	50 f4       	brcc	.+20     	; 0x2364 <__addsf3x+0x52>
    2350:	50 3e       	cpi	r21, 0xE0	; 224
    2352:	68 f1       	brcs	.+90     	; 0x23ae <__addsf3x+0x9c>
    2354:	1a 16       	cp	r1, r26
    2356:	f0 40       	sbci	r31, 0x00	; 0
    2358:	a2 2f       	mov	r26, r18
    235a:	23 2f       	mov	r18, r19
    235c:	34 2f       	mov	r19, r20
    235e:	44 27       	eor	r20, r20
    2360:	58 5f       	subi	r21, 0xF8	; 248
    2362:	f3 cf       	rjmp	.-26     	; 0x234a <__addsf3x+0x38>
    2364:	46 95       	lsr	r20
    2366:	37 95       	ror	r19
    2368:	27 95       	ror	r18
    236a:	a7 95       	ror	r26
    236c:	f0 40       	sbci	r31, 0x00	; 0
    236e:	53 95       	inc	r21
    2370:	c9 f7       	brne	.-14     	; 0x2364 <__addsf3x+0x52>
    2372:	7e f4       	brtc	.+30     	; 0x2392 <__addsf3x+0x80>
    2374:	1f 16       	cp	r1, r31
    2376:	ba 0b       	sbc	r27, r26
    2378:	62 0b       	sbc	r22, r18
    237a:	73 0b       	sbc	r23, r19
    237c:	84 0b       	sbc	r24, r20
    237e:	ba f0       	brmi	.+46     	; 0x23ae <__addsf3x+0x9c>
    2380:	91 50       	subi	r25, 0x01	; 1
    2382:	a1 f0       	breq	.+40     	; 0x23ac <__addsf3x+0x9a>
    2384:	ff 0f       	add	r31, r31
    2386:	bb 1f       	adc	r27, r27
    2388:	66 1f       	adc	r22, r22
    238a:	77 1f       	adc	r23, r23
    238c:	88 1f       	adc	r24, r24
    238e:	c2 f7       	brpl	.-16     	; 0x2380 <__addsf3x+0x6e>
    2390:	0e c0       	rjmp	.+28     	; 0x23ae <__addsf3x+0x9c>
    2392:	ba 0f       	add	r27, r26
    2394:	62 1f       	adc	r22, r18
    2396:	73 1f       	adc	r23, r19
    2398:	84 1f       	adc	r24, r20
    239a:	48 f4       	brcc	.+18     	; 0x23ae <__addsf3x+0x9c>
    239c:	87 95       	ror	r24
    239e:	77 95       	ror	r23
    23a0:	67 95       	ror	r22
    23a2:	b7 95       	ror	r27
    23a4:	f7 95       	ror	r31
    23a6:	9e 3f       	cpi	r25, 0xFE	; 254
    23a8:	08 f0       	brcs	.+2      	; 0x23ac <__addsf3x+0x9a>
    23aa:	b0 cf       	rjmp	.-160    	; 0x230c <__addsf3+0x28>
    23ac:	93 95       	inc	r25
    23ae:	88 0f       	add	r24, r24
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__addsf3x+0xa2>
    23b2:	99 27       	eor	r25, r25
    23b4:	ee 0f       	add	r30, r30
    23b6:	97 95       	ror	r25
    23b8:	87 95       	ror	r24
    23ba:	08 95       	ret

000023bc <__cmpsf2>:
    23bc:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__fp_cmp>
    23c0:	08 f4       	brcc	.+2      	; 0x23c4 <__cmpsf2+0x8>
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	08 95       	ret

000023c6 <__divsf3>:
    23c6:	0e 94 f7 11 	call	0x23ee	; 0x23ee <__divsf3x>
    23ca:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_round>
    23ce:	0e 94 33 13 	call	0x2666	; 0x2666 <__fp_pscB>
    23d2:	58 f0       	brcs	.+22     	; 0x23ea <__divsf3+0x24>
    23d4:	0e 94 2c 13 	call	0x2658	; 0x2658 <__fp_pscA>
    23d8:	40 f0       	brcs	.+16     	; 0x23ea <__divsf3+0x24>
    23da:	29 f4       	brne	.+10     	; 0x23e6 <__divsf3+0x20>
    23dc:	5f 3f       	cpi	r21, 0xFF	; 255
    23de:	29 f0       	breq	.+10     	; 0x23ea <__divsf3+0x24>
    23e0:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_inf>
    23e4:	51 11       	cpse	r21, r1
    23e6:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_szero>
    23ea:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_nan>

000023ee <__divsf3x>:
    23ee:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_split3>
    23f2:	68 f3       	brcs	.-38     	; 0x23ce <__divsf3+0x8>

000023f4 <__divsf3_pse>:
    23f4:	99 23       	and	r25, r25
    23f6:	b1 f3       	breq	.-20     	; 0x23e4 <__divsf3+0x1e>
    23f8:	55 23       	and	r21, r21
    23fa:	91 f3       	breq	.-28     	; 0x23e0 <__divsf3+0x1a>
    23fc:	95 1b       	sub	r25, r21
    23fe:	55 0b       	sbc	r21, r21
    2400:	bb 27       	eor	r27, r27
    2402:	aa 27       	eor	r26, r26
    2404:	62 17       	cp	r22, r18
    2406:	73 07       	cpc	r23, r19
    2408:	84 07       	cpc	r24, r20
    240a:	38 f0       	brcs	.+14     	; 0x241a <__divsf3_pse+0x26>
    240c:	9f 5f       	subi	r25, 0xFF	; 255
    240e:	5f 4f       	sbci	r21, 0xFF	; 255
    2410:	22 0f       	add	r18, r18
    2412:	33 1f       	adc	r19, r19
    2414:	44 1f       	adc	r20, r20
    2416:	aa 1f       	adc	r26, r26
    2418:	a9 f3       	breq	.-22     	; 0x2404 <__divsf3_pse+0x10>
    241a:	35 d0       	rcall	.+106    	; 0x2486 <__divsf3_pse+0x92>
    241c:	0e 2e       	mov	r0, r30
    241e:	3a f0       	brmi	.+14     	; 0x242e <__divsf3_pse+0x3a>
    2420:	e0 e8       	ldi	r30, 0x80	; 128
    2422:	32 d0       	rcall	.+100    	; 0x2488 <__divsf3_pse+0x94>
    2424:	91 50       	subi	r25, 0x01	; 1
    2426:	50 40       	sbci	r21, 0x00	; 0
    2428:	e6 95       	lsr	r30
    242a:	00 1c       	adc	r0, r0
    242c:	ca f7       	brpl	.-14     	; 0x2420 <__divsf3_pse+0x2c>
    242e:	2b d0       	rcall	.+86     	; 0x2486 <__divsf3_pse+0x92>
    2430:	fe 2f       	mov	r31, r30
    2432:	29 d0       	rcall	.+82     	; 0x2486 <__divsf3_pse+0x92>
    2434:	66 0f       	add	r22, r22
    2436:	77 1f       	adc	r23, r23
    2438:	88 1f       	adc	r24, r24
    243a:	bb 1f       	adc	r27, r27
    243c:	26 17       	cp	r18, r22
    243e:	37 07       	cpc	r19, r23
    2440:	48 07       	cpc	r20, r24
    2442:	ab 07       	cpc	r26, r27
    2444:	b0 e8       	ldi	r27, 0x80	; 128
    2446:	09 f0       	breq	.+2      	; 0x244a <__divsf3_pse+0x56>
    2448:	bb 0b       	sbc	r27, r27
    244a:	80 2d       	mov	r24, r0
    244c:	bf 01       	movw	r22, r30
    244e:	ff 27       	eor	r31, r31
    2450:	93 58       	subi	r25, 0x83	; 131
    2452:	5f 4f       	sbci	r21, 0xFF	; 255
    2454:	3a f0       	brmi	.+14     	; 0x2464 <__divsf3_pse+0x70>
    2456:	9e 3f       	cpi	r25, 0xFE	; 254
    2458:	51 05       	cpc	r21, r1
    245a:	78 f0       	brcs	.+30     	; 0x247a <__divsf3_pse+0x86>
    245c:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_inf>
    2460:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_szero>
    2464:	5f 3f       	cpi	r21, 0xFF	; 255
    2466:	e4 f3       	brlt	.-8      	; 0x2460 <__divsf3_pse+0x6c>
    2468:	98 3e       	cpi	r25, 0xE8	; 232
    246a:	d4 f3       	brlt	.-12     	; 0x2460 <__divsf3_pse+0x6c>
    246c:	86 95       	lsr	r24
    246e:	77 95       	ror	r23
    2470:	67 95       	ror	r22
    2472:	b7 95       	ror	r27
    2474:	f7 95       	ror	r31
    2476:	9f 5f       	subi	r25, 0xFF	; 255
    2478:	c9 f7       	brne	.-14     	; 0x246c <__divsf3_pse+0x78>
    247a:	88 0f       	add	r24, r24
    247c:	91 1d       	adc	r25, r1
    247e:	96 95       	lsr	r25
    2480:	87 95       	ror	r24
    2482:	97 f9       	bld	r25, 7
    2484:	08 95       	ret
    2486:	e1 e0       	ldi	r30, 0x01	; 1
    2488:	66 0f       	add	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	bb 1f       	adc	r27, r27
    2490:	62 17       	cp	r22, r18
    2492:	73 07       	cpc	r23, r19
    2494:	84 07       	cpc	r24, r20
    2496:	ba 07       	cpc	r27, r26
    2498:	20 f0       	brcs	.+8      	; 0x24a2 <__divsf3_pse+0xae>
    249a:	62 1b       	sub	r22, r18
    249c:	73 0b       	sbc	r23, r19
    249e:	84 0b       	sbc	r24, r20
    24a0:	ba 0b       	sbc	r27, r26
    24a2:	ee 1f       	adc	r30, r30
    24a4:	88 f7       	brcc	.-30     	; 0x2488 <__divsf3_pse+0x94>
    24a6:	e0 95       	com	r30
    24a8:	08 95       	ret

000024aa <__fixunssfsi>:
    24aa:	0e 94 53 13 	call	0x26a6	; 0x26a6 <__fp_splitA>
    24ae:	88 f0       	brcs	.+34     	; 0x24d2 <__fixunssfsi+0x28>
    24b0:	9f 57       	subi	r25, 0x7F	; 127
    24b2:	98 f0       	brcs	.+38     	; 0x24da <__fixunssfsi+0x30>
    24b4:	b9 2f       	mov	r27, r25
    24b6:	99 27       	eor	r25, r25
    24b8:	b7 51       	subi	r27, 0x17	; 23
    24ba:	b0 f0       	brcs	.+44     	; 0x24e8 <__fixunssfsi+0x3e>
    24bc:	e1 f0       	breq	.+56     	; 0x24f6 <__fixunssfsi+0x4c>
    24be:	66 0f       	add	r22, r22
    24c0:	77 1f       	adc	r23, r23
    24c2:	88 1f       	adc	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	1a f0       	brmi	.+6      	; 0x24ce <__fixunssfsi+0x24>
    24c8:	ba 95       	dec	r27
    24ca:	c9 f7       	brne	.-14     	; 0x24be <__fixunssfsi+0x14>
    24cc:	14 c0       	rjmp	.+40     	; 0x24f6 <__fixunssfsi+0x4c>
    24ce:	b1 30       	cpi	r27, 0x01	; 1
    24d0:	91 f0       	breq	.+36     	; 0x24f6 <__fixunssfsi+0x4c>
    24d2:	0e 94 6d 13 	call	0x26da	; 0x26da <__fp_zero>
    24d6:	b1 e0       	ldi	r27, 0x01	; 1
    24d8:	08 95       	ret
    24da:	0c 94 6d 13 	jmp	0x26da	; 0x26da <__fp_zero>
    24de:	67 2f       	mov	r22, r23
    24e0:	78 2f       	mov	r23, r24
    24e2:	88 27       	eor	r24, r24
    24e4:	b8 5f       	subi	r27, 0xF8	; 248
    24e6:	39 f0       	breq	.+14     	; 0x24f6 <__fixunssfsi+0x4c>
    24e8:	b9 3f       	cpi	r27, 0xF9	; 249
    24ea:	cc f3       	brlt	.-14     	; 0x24de <__fixunssfsi+0x34>
    24ec:	86 95       	lsr	r24
    24ee:	77 95       	ror	r23
    24f0:	67 95       	ror	r22
    24f2:	b3 95       	inc	r27
    24f4:	d9 f7       	brne	.-10     	; 0x24ec <__fixunssfsi+0x42>
    24f6:	3e f4       	brtc	.+14     	; 0x2506 <__fixunssfsi+0x5c>
    24f8:	90 95       	com	r25
    24fa:	80 95       	com	r24
    24fc:	70 95       	com	r23
    24fe:	61 95       	neg	r22
    2500:	7f 4f       	sbci	r23, 0xFF	; 255
    2502:	8f 4f       	sbci	r24, 0xFF	; 255
    2504:	9f 4f       	sbci	r25, 0xFF	; 255
    2506:	08 95       	ret

00002508 <__floatunsisf>:
    2508:	e8 94       	clt
    250a:	09 c0       	rjmp	.+18     	; 0x251e <__floatsisf+0x12>

0000250c <__floatsisf>:
    250c:	97 fb       	bst	r25, 7
    250e:	3e f4       	brtc	.+14     	; 0x251e <__floatsisf+0x12>
    2510:	90 95       	com	r25
    2512:	80 95       	com	r24
    2514:	70 95       	com	r23
    2516:	61 95       	neg	r22
    2518:	7f 4f       	sbci	r23, 0xFF	; 255
    251a:	8f 4f       	sbci	r24, 0xFF	; 255
    251c:	9f 4f       	sbci	r25, 0xFF	; 255
    251e:	99 23       	and	r25, r25
    2520:	a9 f0       	breq	.+42     	; 0x254c <__floatsisf+0x40>
    2522:	f9 2f       	mov	r31, r25
    2524:	96 e9       	ldi	r25, 0x96	; 150
    2526:	bb 27       	eor	r27, r27
    2528:	93 95       	inc	r25
    252a:	f6 95       	lsr	r31
    252c:	87 95       	ror	r24
    252e:	77 95       	ror	r23
    2530:	67 95       	ror	r22
    2532:	b7 95       	ror	r27
    2534:	f1 11       	cpse	r31, r1
    2536:	f8 cf       	rjmp	.-16     	; 0x2528 <__floatsisf+0x1c>
    2538:	fa f4       	brpl	.+62     	; 0x2578 <__floatsisf+0x6c>
    253a:	bb 0f       	add	r27, r27
    253c:	11 f4       	brne	.+4      	; 0x2542 <__floatsisf+0x36>
    253e:	60 ff       	sbrs	r22, 0
    2540:	1b c0       	rjmp	.+54     	; 0x2578 <__floatsisf+0x6c>
    2542:	6f 5f       	subi	r22, 0xFF	; 255
    2544:	7f 4f       	sbci	r23, 0xFF	; 255
    2546:	8f 4f       	sbci	r24, 0xFF	; 255
    2548:	9f 4f       	sbci	r25, 0xFF	; 255
    254a:	16 c0       	rjmp	.+44     	; 0x2578 <__floatsisf+0x6c>
    254c:	88 23       	and	r24, r24
    254e:	11 f0       	breq	.+4      	; 0x2554 <__floatsisf+0x48>
    2550:	96 e9       	ldi	r25, 0x96	; 150
    2552:	11 c0       	rjmp	.+34     	; 0x2576 <__floatsisf+0x6a>
    2554:	77 23       	and	r23, r23
    2556:	21 f0       	breq	.+8      	; 0x2560 <__floatsisf+0x54>
    2558:	9e e8       	ldi	r25, 0x8E	; 142
    255a:	87 2f       	mov	r24, r23
    255c:	76 2f       	mov	r23, r22
    255e:	05 c0       	rjmp	.+10     	; 0x256a <__floatsisf+0x5e>
    2560:	66 23       	and	r22, r22
    2562:	71 f0       	breq	.+28     	; 0x2580 <__floatsisf+0x74>
    2564:	96 e8       	ldi	r25, 0x86	; 134
    2566:	86 2f       	mov	r24, r22
    2568:	70 e0       	ldi	r23, 0x00	; 0
    256a:	60 e0       	ldi	r22, 0x00	; 0
    256c:	2a f0       	brmi	.+10     	; 0x2578 <__floatsisf+0x6c>
    256e:	9a 95       	dec	r25
    2570:	66 0f       	add	r22, r22
    2572:	77 1f       	adc	r23, r23
    2574:	88 1f       	adc	r24, r24
    2576:	da f7       	brpl	.-10     	; 0x256e <__floatsisf+0x62>
    2578:	88 0f       	add	r24, r24
    257a:	96 95       	lsr	r25
    257c:	87 95       	ror	r24
    257e:	97 f9       	bld	r25, 7
    2580:	08 95       	ret

00002582 <__floatundisf>:
    2582:	e8 94       	clt

00002584 <__fp_di2sf>:
    2584:	f9 2f       	mov	r31, r25
    2586:	96 eb       	ldi	r25, 0xB6	; 182
    2588:	ff 23       	and	r31, r31
    258a:	81 f0       	breq	.+32     	; 0x25ac <__fp_di2sf+0x28>
    258c:	12 16       	cp	r1, r18
    258e:	13 06       	cpc	r1, r19
    2590:	14 06       	cpc	r1, r20
    2592:	44 0b       	sbc	r20, r20
    2594:	93 95       	inc	r25
    2596:	f6 95       	lsr	r31
    2598:	87 95       	ror	r24
    259a:	77 95       	ror	r23
    259c:	67 95       	ror	r22
    259e:	57 95       	ror	r21
    25a0:	40 40       	sbci	r20, 0x00	; 0
    25a2:	ff 23       	and	r31, r31
    25a4:	b9 f7       	brne	.-18     	; 0x2594 <__fp_di2sf+0x10>
    25a6:	1b c0       	rjmp	.+54     	; 0x25de <__fp_di2sf+0x5a>
    25a8:	99 27       	eor	r25, r25
    25aa:	08 95       	ret
    25ac:	88 23       	and	r24, r24
    25ae:	51 f4       	brne	.+20     	; 0x25c4 <__fp_di2sf+0x40>
    25b0:	98 50       	subi	r25, 0x08	; 8
    25b2:	d2 f7       	brpl	.-12     	; 0x25a8 <__fp_di2sf+0x24>
    25b4:	87 2b       	or	r24, r23
    25b6:	76 2f       	mov	r23, r22
    25b8:	65 2f       	mov	r22, r21
    25ba:	54 2f       	mov	r21, r20
    25bc:	43 2f       	mov	r20, r19
    25be:	32 2f       	mov	r19, r18
    25c0:	20 e0       	ldi	r18, 0x00	; 0
    25c2:	b1 f3       	breq	.-20     	; 0x25b0 <__fp_di2sf+0x2c>
    25c4:	12 16       	cp	r1, r18
    25c6:	13 06       	cpc	r1, r19
    25c8:	14 06       	cpc	r1, r20
    25ca:	44 0b       	sbc	r20, r20
    25cc:	88 23       	and	r24, r24
    25ce:	3a f0       	brmi	.+14     	; 0x25de <__fp_di2sf+0x5a>
    25d0:	9a 95       	dec	r25
    25d2:	44 0f       	add	r20, r20
    25d4:	55 1f       	adc	r21, r21
    25d6:	66 1f       	adc	r22, r22
    25d8:	77 1f       	adc	r23, r23
    25da:	88 1f       	adc	r24, r24
    25dc:	ca f7       	brpl	.-14     	; 0x25d0 <__fp_di2sf+0x4c>
    25de:	55 23       	and	r21, r21
    25e0:	4a f4       	brpl	.+18     	; 0x25f4 <__fp_di2sf+0x70>
    25e2:	44 0f       	add	r20, r20
    25e4:	55 1f       	adc	r21, r21
    25e6:	11 f4       	brne	.+4      	; 0x25ec <__fp_di2sf+0x68>
    25e8:	60 ff       	sbrs	r22, 0
    25ea:	04 c0       	rjmp	.+8      	; 0x25f4 <__fp_di2sf+0x70>
    25ec:	6f 5f       	subi	r22, 0xFF	; 255
    25ee:	7f 4f       	sbci	r23, 0xFF	; 255
    25f0:	8f 4f       	sbci	r24, 0xFF	; 255
    25f2:	9f 4f       	sbci	r25, 0xFF	; 255
    25f4:	88 0f       	add	r24, r24
    25f6:	96 95       	lsr	r25
    25f8:	87 95       	ror	r24
    25fa:	97 f9       	bld	r25, 7
    25fc:	08 95       	ret

000025fe <__fp_cmp>:
    25fe:	99 0f       	add	r25, r25
    2600:	00 08       	sbc	r0, r0
    2602:	55 0f       	add	r21, r21
    2604:	aa 0b       	sbc	r26, r26
    2606:	e0 e8       	ldi	r30, 0x80	; 128
    2608:	fe ef       	ldi	r31, 0xFE	; 254
    260a:	16 16       	cp	r1, r22
    260c:	17 06       	cpc	r1, r23
    260e:	e8 07       	cpc	r30, r24
    2610:	f9 07       	cpc	r31, r25
    2612:	c0 f0       	brcs	.+48     	; 0x2644 <__fp_cmp+0x46>
    2614:	12 16       	cp	r1, r18
    2616:	13 06       	cpc	r1, r19
    2618:	e4 07       	cpc	r30, r20
    261a:	f5 07       	cpc	r31, r21
    261c:	98 f0       	brcs	.+38     	; 0x2644 <__fp_cmp+0x46>
    261e:	62 1b       	sub	r22, r18
    2620:	73 0b       	sbc	r23, r19
    2622:	84 0b       	sbc	r24, r20
    2624:	95 0b       	sbc	r25, r21
    2626:	39 f4       	brne	.+14     	; 0x2636 <__fp_cmp+0x38>
    2628:	0a 26       	eor	r0, r26
    262a:	61 f0       	breq	.+24     	; 0x2644 <__fp_cmp+0x46>
    262c:	23 2b       	or	r18, r19
    262e:	24 2b       	or	r18, r20
    2630:	25 2b       	or	r18, r21
    2632:	21 f4       	brne	.+8      	; 0x263c <__fp_cmp+0x3e>
    2634:	08 95       	ret
    2636:	0a 26       	eor	r0, r26
    2638:	09 f4       	brne	.+2      	; 0x263c <__fp_cmp+0x3e>
    263a:	a1 40       	sbci	r26, 0x01	; 1
    263c:	a6 95       	lsr	r26
    263e:	8f ef       	ldi	r24, 0xFF	; 255
    2640:	81 1d       	adc	r24, r1
    2642:	81 1d       	adc	r24, r1
    2644:	08 95       	ret

00002646 <__fp_inf>:
    2646:	97 f9       	bld	r25, 7
    2648:	9f 67       	ori	r25, 0x7F	; 127
    264a:	80 e8       	ldi	r24, 0x80	; 128
    264c:	70 e0       	ldi	r23, 0x00	; 0
    264e:	60 e0       	ldi	r22, 0x00	; 0
    2650:	08 95       	ret

00002652 <__fp_nan>:
    2652:	9f ef       	ldi	r25, 0xFF	; 255
    2654:	80 ec       	ldi	r24, 0xC0	; 192
    2656:	08 95       	ret

00002658 <__fp_pscA>:
    2658:	00 24       	eor	r0, r0
    265a:	0a 94       	dec	r0
    265c:	16 16       	cp	r1, r22
    265e:	17 06       	cpc	r1, r23
    2660:	18 06       	cpc	r1, r24
    2662:	09 06       	cpc	r0, r25
    2664:	08 95       	ret

00002666 <__fp_pscB>:
    2666:	00 24       	eor	r0, r0
    2668:	0a 94       	dec	r0
    266a:	12 16       	cp	r1, r18
    266c:	13 06       	cpc	r1, r19
    266e:	14 06       	cpc	r1, r20
    2670:	05 06       	cpc	r0, r21
    2672:	08 95       	ret

00002674 <__fp_round>:
    2674:	09 2e       	mov	r0, r25
    2676:	03 94       	inc	r0
    2678:	00 0c       	add	r0, r0
    267a:	11 f4       	brne	.+4      	; 0x2680 <__fp_round+0xc>
    267c:	88 23       	and	r24, r24
    267e:	52 f0       	brmi	.+20     	; 0x2694 <__fp_round+0x20>
    2680:	bb 0f       	add	r27, r27
    2682:	40 f4       	brcc	.+16     	; 0x2694 <__fp_round+0x20>
    2684:	bf 2b       	or	r27, r31
    2686:	11 f4       	brne	.+4      	; 0x268c <__fp_round+0x18>
    2688:	60 ff       	sbrs	r22, 0
    268a:	04 c0       	rjmp	.+8      	; 0x2694 <__fp_round+0x20>
    268c:	6f 5f       	subi	r22, 0xFF	; 255
    268e:	7f 4f       	sbci	r23, 0xFF	; 255
    2690:	8f 4f       	sbci	r24, 0xFF	; 255
    2692:	9f 4f       	sbci	r25, 0xFF	; 255
    2694:	08 95       	ret

00002696 <__fp_split3>:
    2696:	57 fd       	sbrc	r21, 7
    2698:	90 58       	subi	r25, 0x80	; 128
    269a:	44 0f       	add	r20, r20
    269c:	55 1f       	adc	r21, r21
    269e:	59 f0       	breq	.+22     	; 0x26b6 <__fp_splitA+0x10>
    26a0:	5f 3f       	cpi	r21, 0xFF	; 255
    26a2:	71 f0       	breq	.+28     	; 0x26c0 <__fp_splitA+0x1a>
    26a4:	47 95       	ror	r20

000026a6 <__fp_splitA>:
    26a6:	88 0f       	add	r24, r24
    26a8:	97 fb       	bst	r25, 7
    26aa:	99 1f       	adc	r25, r25
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <__fp_splitA+0x20>
    26ae:	9f 3f       	cpi	r25, 0xFF	; 255
    26b0:	79 f0       	breq	.+30     	; 0x26d0 <__fp_splitA+0x2a>
    26b2:	87 95       	ror	r24
    26b4:	08 95       	ret
    26b6:	12 16       	cp	r1, r18
    26b8:	13 06       	cpc	r1, r19
    26ba:	14 06       	cpc	r1, r20
    26bc:	55 1f       	adc	r21, r21
    26be:	f2 cf       	rjmp	.-28     	; 0x26a4 <__fp_split3+0xe>
    26c0:	46 95       	lsr	r20
    26c2:	f1 df       	rcall	.-30     	; 0x26a6 <__fp_splitA>
    26c4:	08 c0       	rjmp	.+16     	; 0x26d6 <__fp_splitA+0x30>
    26c6:	16 16       	cp	r1, r22
    26c8:	17 06       	cpc	r1, r23
    26ca:	18 06       	cpc	r1, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	f1 cf       	rjmp	.-30     	; 0x26b2 <__fp_splitA+0xc>
    26d0:	86 95       	lsr	r24
    26d2:	71 05       	cpc	r23, r1
    26d4:	61 05       	cpc	r22, r1
    26d6:	08 94       	sec
    26d8:	08 95       	ret

000026da <__fp_zero>:
    26da:	e8 94       	clt

000026dc <__fp_szero>:
    26dc:	bb 27       	eor	r27, r27
    26de:	66 27       	eor	r22, r22
    26e0:	77 27       	eor	r23, r23
    26e2:	cb 01       	movw	r24, r22
    26e4:	97 f9       	bld	r25, 7
    26e6:	08 95       	ret

000026e8 <__gesf2>:
    26e8:	0e 94 ff 12 	call	0x25fe	; 0x25fe <__fp_cmp>
    26ec:	08 f4       	brcc	.+2      	; 0x26f0 <__gesf2+0x8>
    26ee:	8f ef       	ldi	r24, 0xFF	; 255
    26f0:	08 95       	ret

000026f2 <__mulsf3>:
    26f2:	0e 94 8c 13 	call	0x2718	; 0x2718 <__mulsf3x>
    26f6:	0c 94 3a 13 	jmp	0x2674	; 0x2674 <__fp_round>
    26fa:	0e 94 2c 13 	call	0x2658	; 0x2658 <__fp_pscA>
    26fe:	38 f0       	brcs	.+14     	; 0x270e <__mulsf3+0x1c>
    2700:	0e 94 33 13 	call	0x2666	; 0x2666 <__fp_pscB>
    2704:	20 f0       	brcs	.+8      	; 0x270e <__mulsf3+0x1c>
    2706:	95 23       	and	r25, r21
    2708:	11 f0       	breq	.+4      	; 0x270e <__mulsf3+0x1c>
    270a:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_inf>
    270e:	0c 94 29 13 	jmp	0x2652	; 0x2652 <__fp_nan>
    2712:	11 24       	eor	r1, r1
    2714:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_szero>

00002718 <__mulsf3x>:
    2718:	0e 94 4b 13 	call	0x2696	; 0x2696 <__fp_split3>
    271c:	70 f3       	brcs	.-36     	; 0x26fa <__mulsf3+0x8>

0000271e <__mulsf3_pse>:
    271e:	95 9f       	mul	r25, r21
    2720:	c1 f3       	breq	.-16     	; 0x2712 <__mulsf3+0x20>
    2722:	95 0f       	add	r25, r21
    2724:	50 e0       	ldi	r21, 0x00	; 0
    2726:	55 1f       	adc	r21, r21
    2728:	62 9f       	mul	r22, r18
    272a:	f0 01       	movw	r30, r0
    272c:	72 9f       	mul	r23, r18
    272e:	bb 27       	eor	r27, r27
    2730:	f0 0d       	add	r31, r0
    2732:	b1 1d       	adc	r27, r1
    2734:	63 9f       	mul	r22, r19
    2736:	aa 27       	eor	r26, r26
    2738:	f0 0d       	add	r31, r0
    273a:	b1 1d       	adc	r27, r1
    273c:	aa 1f       	adc	r26, r26
    273e:	64 9f       	mul	r22, r20
    2740:	66 27       	eor	r22, r22
    2742:	b0 0d       	add	r27, r0
    2744:	a1 1d       	adc	r26, r1
    2746:	66 1f       	adc	r22, r22
    2748:	82 9f       	mul	r24, r18
    274a:	22 27       	eor	r18, r18
    274c:	b0 0d       	add	r27, r0
    274e:	a1 1d       	adc	r26, r1
    2750:	62 1f       	adc	r22, r18
    2752:	73 9f       	mul	r23, r19
    2754:	b0 0d       	add	r27, r0
    2756:	a1 1d       	adc	r26, r1
    2758:	62 1f       	adc	r22, r18
    275a:	83 9f       	mul	r24, r19
    275c:	a0 0d       	add	r26, r0
    275e:	61 1d       	adc	r22, r1
    2760:	22 1f       	adc	r18, r18
    2762:	74 9f       	mul	r23, r20
    2764:	33 27       	eor	r19, r19
    2766:	a0 0d       	add	r26, r0
    2768:	61 1d       	adc	r22, r1
    276a:	23 1f       	adc	r18, r19
    276c:	84 9f       	mul	r24, r20
    276e:	60 0d       	add	r22, r0
    2770:	21 1d       	adc	r18, r1
    2772:	82 2f       	mov	r24, r18
    2774:	76 2f       	mov	r23, r22
    2776:	6a 2f       	mov	r22, r26
    2778:	11 24       	eor	r1, r1
    277a:	9f 57       	subi	r25, 0x7F	; 127
    277c:	50 40       	sbci	r21, 0x00	; 0
    277e:	9a f0       	brmi	.+38     	; 0x27a6 <__mulsf3_pse+0x88>
    2780:	f1 f0       	breq	.+60     	; 0x27be <__mulsf3_pse+0xa0>
    2782:	88 23       	and	r24, r24
    2784:	4a f0       	brmi	.+18     	; 0x2798 <__mulsf3_pse+0x7a>
    2786:	ee 0f       	add	r30, r30
    2788:	ff 1f       	adc	r31, r31
    278a:	bb 1f       	adc	r27, r27
    278c:	66 1f       	adc	r22, r22
    278e:	77 1f       	adc	r23, r23
    2790:	88 1f       	adc	r24, r24
    2792:	91 50       	subi	r25, 0x01	; 1
    2794:	50 40       	sbci	r21, 0x00	; 0
    2796:	a9 f7       	brne	.-22     	; 0x2782 <__mulsf3_pse+0x64>
    2798:	9e 3f       	cpi	r25, 0xFE	; 254
    279a:	51 05       	cpc	r21, r1
    279c:	80 f0       	brcs	.+32     	; 0x27be <__mulsf3_pse+0xa0>
    279e:	0c 94 23 13 	jmp	0x2646	; 0x2646 <__fp_inf>
    27a2:	0c 94 6e 13 	jmp	0x26dc	; 0x26dc <__fp_szero>
    27a6:	5f 3f       	cpi	r21, 0xFF	; 255
    27a8:	e4 f3       	brlt	.-8      	; 0x27a2 <__mulsf3_pse+0x84>
    27aa:	98 3e       	cpi	r25, 0xE8	; 232
    27ac:	d4 f3       	brlt	.-12     	; 0x27a2 <__mulsf3_pse+0x84>
    27ae:	86 95       	lsr	r24
    27b0:	77 95       	ror	r23
    27b2:	67 95       	ror	r22
    27b4:	b7 95       	ror	r27
    27b6:	f7 95       	ror	r31
    27b8:	e7 95       	ror	r30
    27ba:	9f 5f       	subi	r25, 0xFF	; 255
    27bc:	c1 f7       	brne	.-16     	; 0x27ae <__mulsf3_pse+0x90>
    27be:	fe 2b       	or	r31, r30
    27c0:	88 0f       	add	r24, r24
    27c2:	91 1d       	adc	r25, r1
    27c4:	96 95       	lsr	r25
    27c6:	87 95       	ror	r24
    27c8:	97 f9       	bld	r25, 7
    27ca:	08 95       	ret

000027cc <_exit>:
    27cc:	f8 94       	cli

000027ce <__stop_program>:
    27ce:	ff cf       	rjmp	.-2      	; 0x27ce <__stop_program>
